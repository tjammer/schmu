prog: Wildcard
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_i Wildcard
##
## Ends in an error in state: 4.
##
## sexp_expr -> Minus_i . sexp_expr [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_f Wildcard
##
## Ends in an error in state: 5.
##
## sexp_expr -> Minus_f . sexp_expr [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Lpar Wildcard
##
## Ends in an error in state: 6.
##
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_set) -> Lpar . Setf parens(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Wildcard
##
## Ends in an error in state: 7.
##
## parens(sexp_field_set) -> Lpar Setf . parens(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Wildcard
##
## Ends in an error in state: 8.
##
## parens(sexp_set_access) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor Wildcard
##
## Ends in an error in state: 9.
##
## parens(sexp_set_access) -> Lpar Accessor . sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Wildcard
##
## Ends in an error in state: 11.
##
## sexp_vector_lit -> Lbrack . list(sexp_expr) Rbrack [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Wildcard
##
## Ends in an error in state: 12.
##
## bracs(nonempty_list(sexp_expr)) -> Lbrac . nonempty_list(sexp_expr) Rbrac [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## bracs(nonempty_list(sexp_record_item)) -> Lbrac . nonempty_list(sexp_record_item) Rbrac [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## bracs(record_update) -> Lbrac . At_id nonempty_list(sexp_record_item) Rbrac [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword Wildcard
##
## Ends in an error in state: 13.
##
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr nonempty_list(sexp_record_item) [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . nonempty_list(sexp_record_item) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword False U8
##
## Ends in an error in state: 22.
##
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . nonempty_list(sexp_record_item) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Wildcard
##
## Ends in an error in state: 38.
##
## sexp_expr -> ident . [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> ident . Div_i sexp_expr [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Wildcard
##
## Ends in an error in state: 39.
##
## sexp_expr -> ident Div_i . sexp_expr [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac At_id Wildcard
##
## Ends in an error in state: 45.
##
## bracs(record_update) -> Lbrac At_id . nonempty_list(sexp_record_item) Rbrac [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac At_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac False Rbrack
##
## Ends in an error in state: 48.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar Rbrac ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac False Rpar
##
## Ends in an error in state: 52.
##
## bracs(nonempty_list(sexp_expr)) -> Lbrac nonempty_list(sexp_expr) . Rbrac [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Rbrac
##
## Ends in an error in state: 54.
##
## list(sexp_expr) -> sexp_expr . list(sexp_expr) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Rpar
##
## Ends in an error in state: 56.
##
## sexp_vector_lit -> Lbrack list(sexp_expr) . Rbrack [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 54, spurious reduction of production list(sexp_expr) ->
## In state 55, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False U8
##
## Ends in an error in state: 58.
##
## parens(sexp_set_access) -> Lpar Accessor sexp_expr . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False Rpar Wildcard
##
## Ends in an error in state: 60.
##
## parens(sexp_field_set) -> Lpar Setf parens(sexp_set_access) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf parens(sexp_set_access)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False Rpar False U8
##
## Ends in an error in state: 61.
##
## parens(sexp_field_set) -> Lpar Setf parens(sexp_set_access) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf parens(sexp_set_access) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i Wildcard
##
## Ends in an error in state: 64.
##
## parens(sexp_call) -> Lpar Plus_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i False Rbrac
##
## Ends in an error in state: 65.
##
## parens(sexp_call) -> Lpar Plus_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f Wildcard
##
## Ends in an error in state: 67.
##
## parens(sexp_call) -> Lpar Plus_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f False Rbrac
##
## Ends in an error in state: 68.
##
## parens(sexp_call) -> Lpar Plus_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or Wildcard
##
## Ends in an error in state: 70.
##
## parens(sexp_call) -> Lpar Or . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or False Rbrac
##
## Ends in an error in state: 71.
##
## parens(sexp_call) -> Lpar Or nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i Wildcard
##
## Ends in an error in state: 73.
##
## parens(sexp_call) -> Lpar Mult_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i False Rbrac
##
## Ends in an error in state: 74.
##
## parens(sexp_call) -> Lpar Mult_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f Wildcard
##
## Ends in an error in state: 76.
##
## parens(sexp_call) -> Lpar Mult_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f False Rbrac
##
## Ends in an error in state: 77.
##
## parens(sexp_call) -> Lpar Mult_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i Wildcard
##
## Ends in an error in state: 79.
##
## parens(sexp_call) -> Lpar Minus_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i False Rbrac
##
## Ends in an error in state: 80.
##
## parens(sexp_call) -> Lpar Minus_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f Wildcard
##
## Ends in an error in state: 82.
##
## parens(sexp_call) -> Lpar Minus_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f False Rbrac
##
## Ends in an error in state: 83.
##
## parens(sexp_call) -> Lpar Minus_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Wildcard
##
## Ends in an error in state: 85.
##
## parens(sexp_match) -> Lpar Match . sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False U8
##
## Ends in an error in state: 86.
##
## parens(sexp_match) -> Lpar Match sexp_expr . nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Val
##
## Ends in an error in state: 87.
##
## parens(sexp_clause) -> Lpar . sexp_ctor sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . parens(ctor_pattern_item) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . ident sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . Wildcard sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . bracs(nonempty_list(record_item_pattern)) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . Int sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . bracs(sexp_pattern_tuple) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . parens(or_pattern) sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Wildcard Wildcard
##
## Ends in an error in state: 88.
##
## parens(sexp_clause) -> Lpar Wildcard . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Wildcard False U8
##
## Ends in an error in state: 89.
##
## parens(sexp_clause) -> Lpar Wildcard sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Wildcard sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Wildcard
##
## Ends in an error in state: 91.
##
## parens(ctor_pattern_item) -> Lpar . sexp_ctor sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor ident Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Wildcard Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(nonempty_list(record_item_pattern)) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Int Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(sexp_pattern_tuple) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(or_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or sexp_ctor nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or parens(ctor_pattern_item) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or ident nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or Wildcard nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or bracs(nonempty_list(record_item_pattern)) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or Int nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or bracs(sexp_pattern_tuple) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or parens(or_pattern) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Val
##
## Ends in an error in state: 92.
##
## parens(or_pattern) -> Lpar Or . sexp_ctor nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . parens(ctor_pattern_item) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . ident nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . Wildcard nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . bracs(nonempty_list(record_item_pattern)) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . Int nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . bracs(sexp_pattern_tuple) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar Or . parens(or_pattern) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Wildcard Val
##
## Ends in an error in state: 93.
##
## parens(or_pattern) -> Lpar Or Wildcard . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Wildcard Val
##
## Ends in an error in state: 94.
##
## nonempty_list(sexp_pattern) -> Wildcard . [ Rpar ]
## nonempty_list(sexp_pattern) -> Wildcard . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Val
##
## Ends in an error in state: 95.
##
## bracs(nonempty_list(record_item_pattern)) -> Lbrac . nonempty_list(record_item_pattern) Rbrac [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## bracs(sexp_pattern_tuple) -> Lbrac . with_loc(sexp_pattern) nonempty_list(with_loc(sexp_pattern)) Rbrac [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Keyword Val
##
## Ends in an error in state: 97.
##
## nonempty_list(record_item_pattern) -> Keyword . option(sexp_pattern) [ Rbrac ]
## nonempty_list(record_item_pattern) -> Keyword . option(sexp_pattern) nonempty_list(record_item_pattern) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Keyword Kebab_id Wildcard
##
## Ends in an error in state: 103.
##
## nonempty_list(record_item_pattern) -> Keyword option(sexp_pattern) . [ Rbrac ]
## nonempty_list(record_item_pattern) -> Keyword option(sexp_pattern) . nonempty_list(record_item_pattern) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword option(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Val
##
## Ends in an error in state: 109.
##
## bracs(sexp_pattern_tuple) -> Lbrac with_loc(sexp_pattern) . nonempty_list(with_loc(sexp_pattern)) Rbrac [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrac with_loc(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Kebab_id Val
##
## Ends in an error in state: 110.
##
## nonempty_list(with_loc(sexp_pattern)) -> with_loc(sexp_pattern) . [ Rbrac ]
## nonempty_list(with_loc(sexp_pattern)) -> with_loc(sexp_pattern) . nonempty_list(with_loc(sexp_pattern)) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## with_loc(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Int Val
##
## Ends in an error in state: 122.
##
## nonempty_list(sexp_pattern) -> Int . [ Rpar ]
## nonempty_list(sexp_pattern) -> Int . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Constructor Val
##
## Ends in an error in state: 123.
##
## nonempty_list(sexp_pattern) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_pattern) -> sexp_ctor . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Lpar Or Kebab_id Kebab_id Rpar Val
##
## Ends in an error in state: 124.
##
## nonempty_list(sexp_pattern) -> parens(or_pattern) . [ Rpar ]
## nonempty_list(sexp_pattern) -> parens(or_pattern) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 125.
##
## nonempty_list(sexp_pattern) -> parens(ctor_pattern_item) . [ Rpar ]
## nonempty_list(sexp_pattern) -> parens(ctor_pattern_item) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Kebab_id Val
##
## Ends in an error in state: 127.
##
## nonempty_list(sexp_pattern) -> ident . [ Rpar ]
## nonempty_list(sexp_pattern) -> ident . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Lbrac Kebab_id Kebab_id Rbrac Val
##
## Ends in an error in state: 129.
##
## nonempty_list(sexp_pattern) -> bracs(sexp_pattern_tuple) . [ Rpar ]
## nonempty_list(sexp_pattern) -> bracs(sexp_pattern_tuple) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Lbrac Keyword Rbrac Val
##
## Ends in an error in state: 131.
##
## nonempty_list(sexp_pattern) -> bracs(nonempty_list(record_item_pattern)) . [ Rpar ]
## nonempty_list(sexp_pattern) -> bracs(nonempty_list(record_item_pattern)) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Int Val
##
## Ends in an error in state: 139.
##
## parens(or_pattern) -> Lpar Or Int . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Constructor Val
##
## Ends in an error in state: 142.
##
## parens(or_pattern) -> Lpar Or sexp_ctor . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Lpar Or Kebab_id Kebab_id Rpar Val
##
## Ends in an error in state: 145.
##
## parens(or_pattern) -> Lpar Or parens(or_pattern) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 148.
##
## parens(or_pattern) -> Lpar Or parens(ctor_pattern_item) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Val
##
## Ends in an error in state: 151.
##
## parens(or_pattern) -> Lpar Or ident . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Lbrac Kebab_id Kebab_id Rbrac Val
##
## Ends in an error in state: 154.
##
## parens(or_pattern) -> Lpar Or bracs(sexp_pattern_tuple) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Lbrac Keyword Rbrac Val
##
## Ends in an error in state: 157.
##
## parens(or_pattern) -> Lpar Or bracs(nonempty_list(record_item_pattern)) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Or bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Val
##
## Ends in an error in state: 160.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor . sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . parens(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . ident Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . Wildcard Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . bracs(nonempty_list(record_item_pattern)) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . Int Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . bracs(sexp_pattern_tuple) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . parens(or_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Wildcard Wildcard
##
## Ends in an error in state: 161.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor Wildcard . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Int Wildcard
##
## Ends in an error in state: 163.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor Int . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 165.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor sexp_ctor . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Lpar Or Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 167.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor parens(or_pattern) . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 169.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor parens(ctor_pattern_item) . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Kebab_id Wildcard
##
## Ends in an error in state: 171.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor ident . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Lbrac Kebab_id Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 173.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor bracs(sexp_pattern_tuple) . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Lbrac Keyword Rbrac Wildcard
##
## Ends in an error in state: 175.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor bracs(nonempty_list(record_item_pattern)) . Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Int Wildcard
##
## Ends in an error in state: 177.
##
## parens(sexp_clause) -> Lpar Int . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Int False U8
##
## Ends in an error in state: 178.
##
## parens(sexp_clause) -> Lpar Int sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Int sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Wildcard
##
## Ends in an error in state: 180.
##
## parens(sexp_clause) -> Lpar sexp_ctor . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor False U8
##
## Ends in an error in state: 181.
##
## parens(sexp_clause) -> Lpar sexp_ctor sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 183.
##
## parens(sexp_clause) -> Lpar parens(or_pattern) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Kebab_id Rpar False U8
##
## Ends in an error in state: 184.
##
## parens(sexp_clause) -> Lpar parens(or_pattern) sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(or_pattern) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 186.
##
## parens(sexp_clause) -> Lpar parens(ctor_pattern_item) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Kebab_id Rpar False U8
##
## Ends in an error in state: 187.
##
## parens(sexp_clause) -> Lpar parens(ctor_pattern_item) sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(ctor_pattern_item) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Kebab_id Wildcard
##
## Ends in an error in state: 189.
##
## parens(sexp_clause) -> Lpar ident . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Kebab_id False U8
##
## Ends in an error in state: 190.
##
## parens(sexp_clause) -> Lpar ident sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 192.
##
## parens(sexp_clause) -> Lpar bracs(sexp_pattern_tuple) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Kebab_id Rbrac False U8
##
## Ends in an error in state: 193.
##
## parens(sexp_clause) -> Lpar bracs(sexp_pattern_tuple) sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(sexp_pattern_tuple) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Keyword Rbrac Wildcard
##
## Ends in an error in state: 195.
##
## parens(sexp_clause) -> Lpar bracs(nonempty_list(record_item_pattern)) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(nonempty_list(record_item_pattern))
##

Expecting (pattern expression)

prog: Lpar Match False Lpar Lbrac Keyword Rbrac False U8
##
## Ends in an error in state: 196.
##
## parens(sexp_clause) -> Lpar bracs(nonempty_list(record_item_pattern)) sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(nonempty_list(record_item_pattern)) sexp_expr
##

Expecting (pattern expression)

prog: Lpar Match False Lpar Kebab_id False Rpar Wildcard
##
## Ends in an error in state: 198.
##
## nonempty_list(parens(sexp_clause)) -> parens(sexp_clause) . [ Rpar ]
## nonempty_list(parens(sexp_clause)) -> parens(sexp_clause) . nonempty_list(parens(sexp_clause)) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_clause)
##

Expecting (pattern expression)

prog: Lpar Lpar Wildcard
##
## Ends in an error in state: 202.
##
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Wildcard
##
## Ends in an error in state: 203.
##
## parens(lets) -> Lpar Let . maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Wildcard
##
## Ends in an error in state: 204.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar . nonempty_list(lets_let) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Wildcard
##
## Ends in an error in state: 206.
##
## parens(sexp_decl_typed) -> Lpar . ident build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_decl_typed) -> Lpar . ident parens(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_decl_typed) -> Lpar . mut_ident build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_decl_typed) -> Lpar . mut_ident parens(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Mut_id Wildcard
##
## Ends in an error in state: 207.
##
## parens(sexp_decl_typed) -> Lpar mut_ident . build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_decl_typed) -> Lpar mut_ident . parens(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar mut_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Quote Wildcard
##
## Ends in an error in state: 208.
##
## type_spec -> Quote . Lowercase_id [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Wildcard
##
## Ends in an error in state: 210.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
## parens(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_type_expr) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Wildcard
##
## Ends in an error in state: 211.
##
## parens(sexp_type_func) -> Lpar Fun . nonempty_list(sexp_type_expr) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 213.
##
## nonempty_list(sexp_type_expr) -> parens(sexp_type_func) . [ Rpar ]
## nonempty_list(sexp_type_expr) -> parens(sexp_type_func) . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 215.
##
## type_spec -> ident . [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
## type_spec -> ident . Div_i type_spec [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Div_i Wildcard
##
## Ends in an error in state: 216.
##
## type_spec -> ident Div_i . type_spec [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id String_lit
##
## Ends in an error in state: 218.
##
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . [ Rpar ]
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id String_lit
##
## Ends in an error in state: 222.
##
## build_sexp_type_list -> Lpar type_spec . build_sexp_type_list Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Lpar Wildcard
##
## Ends in an error in state: 223.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 224.
##
## build_sexp_type_list -> Lpar type_spec build_sexp_type_list . Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Mut_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 226.
##
## parens(sexp_decl_typed) -> Lpar mut_ident parens(sexp_type_func) . Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar mut_ident parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Mut_id Kebab_id String_lit
##
## Ends in an error in state: 228.
##
## parens(sexp_decl_typed) -> Lpar mut_ident build_sexp_type_list . Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar mut_ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Wildcard
##
## Ends in an error in state: 230.
##
## parens(sexp_decl_typed) -> Lpar ident . build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_decl_typed) -> Lpar ident . parens(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 231.
##
## parens(sexp_decl_typed) -> Lpar ident parens(sexp_type_func) . Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 233.
##
## parens(sexp_decl_typed) -> Lpar ident build_sexp_type_list . Rpar [ U8 True String_lit Rpar Rbrack Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 235.
##
## nonempty_list(lets_let) -> parens(sexp_decl_typed) . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> parens(sexp_decl_typed) . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parens(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Lpar Kebab_id Kebab_id Rpar False U8
##
## Ends in an error in state: 236.
##
## nonempty_list(lets_let) -> parens(sexp_decl_typed) sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> parens(sexp_decl_typed) sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parens(sexp_decl_typed) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Mut_id Wildcard
##
## Ends in an error in state: 238.
##
## nonempty_list(lets_let) -> mut_ident . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> mut_ident . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## mut_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Mut_id False U8
##
## Ends in an error in state: 239.
##
## nonempty_list(lets_let) -> mut_ident sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> mut_ident sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## mut_ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id Wildcard
##
## Ends in an error in state: 241.
##
## nonempty_list(lets_let) -> ident . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> ident . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False U8
##
## Ends in an error in state: 242.
##
## nonempty_list(lets_let) -> ident sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> ident sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Kebab_id False Rbrack
##
## Ends in an error in state: 244.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar nonempty_list(lets_let) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 242, spurious reduction of production nonempty_list(lets_let) -> ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Wildcard
##
## Ends in an error in state: 246.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack . nonempty_list(lets_let) Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rpar
##
## Ends in an error in state: 247.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack nonempty_list(lets_let) . Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 242, spurious reduction of production nonempty_list(lets_let) -> ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rbrack Wildcard
##
## Ends in an error in state: 249.
##
## parens(lets) -> Lpar Let maybe_bracks(nonempty_list(lets_let)) . nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let maybe_bracks(nonempty_list(lets_let))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Lpar Wildcard
##
## Ends in an error in state: 250.
##
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_field_set) -> Lpar . Setf parens(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_fun) -> Lpar . Fun ident option(attr) option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_let) -> Lpar . Val ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_let) -> Lpar . Val mut_ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_let) -> Lpar . Val parens(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Wildcard
##
## Ends in an error in state: 251.
##
## parens(sexp_let) -> Lpar Val . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Val . mut_ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Val . parens(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 252.
##
## parens(sexp_let) -> Lpar Val parens(sexp_decl_typed) . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parens(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar False U8
##
## Ends in an error in state: 253.
##
## parens(sexp_let) -> Lpar Val parens(sexp_decl_typed) sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parens(sexp_decl_typed) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Mut_id Wildcard
##
## Ends in an error in state: 255.
##
## parens(sexp_let) -> Lpar Val mut_ident . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val mut_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Mut_id False U8
##
## Ends in an error in state: 256.
##
## parens(sexp_let) -> Lpar Val mut_ident sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val mut_ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id Wildcard
##
## Ends in an error in state: 258.
##
## parens(sexp_let) -> Lpar Val ident . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id False U8
##
## Ends in an error in state: 259.
##
## parens(sexp_let) -> Lpar Val ident sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i Wildcard
##
## Ends in an error in state: 261.
##
## parens(sexp_call) -> Lpar Less_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i False Rbrac
##
## Ends in an error in state: 262.
##
## parens(sexp_call) -> Lpar Less_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f Wildcard
##
## Ends in an error in state: 264.
##
## parens(sexp_call) -> Lpar Less_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f False Rbrac
##
## Ends in an error in state: 265.
##
## parens(sexp_call) -> Lpar Less_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If Wildcard
##
## Ends in an error in state: 267.
##
## parens(sexp_if) -> Lpar If . sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False Rpar
##
## Ends in an error in state: 268.
##
## parens(sexp_if) -> Lpar If sexp_expr . sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False Rbrack
##
## Ends in an error in state: 269.
##
## parens(sexp_if) -> Lpar If sexp_expr sexp_expr . option(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False False U8
##
## Ends in an error in state: 271.
##
## parens(sexp_if) -> Lpar If sexp_expr sexp_expr option(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr sexp_expr option(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i Wildcard
##
## Ends in an error in state: 273.
##
## parens(sexp_call) -> Lpar Greater_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i False Rbrac
##
## Ends in an error in state: 274.
##
## parens(sexp_call) -> Lpar Greater_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f Wildcard
##
## Ends in an error in state: 276.
##
## parens(sexp_call) -> Lpar Greater_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f False Rbrac
##
## Ends in an error in state: 277.
##
## parens(sexp_call) -> Lpar Greater_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Wildcard
##
## Ends in an error in state: 279.
##
## parens(sexp_fun) -> Lpar Fun . ident option(attr) option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lpar Wildcard
##
## Ends in an error in state: 280.
##
## maybe_bracks(list(sexp_decl)) -> Lpar . list(sexp_decl) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting identifier

prog: Lpar Fun Lbrack Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 281.
##
## list(sexp_decl) -> parens(sexp_decl_typed) . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parens(sexp_decl_typed)
##

Expecting identifier

prog: Lpar Fun Lbrack Mut_id Wildcard
##
## Ends in an error in state: 282.
##
## list(sexp_decl) -> mut_ident . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## mut_ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Kebab_id Wildcard
##
## Ends in an error in state: 284.
##
## list(sexp_decl) -> ident . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident
##

Expecting identifier

prog: Lpar Fun Lpar Kebab_id Rbrack
##
## Ends in an error in state: 287.
##
## maybe_bracks(list(sexp_decl)) -> Lpar list(sexp_decl) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 284, spurious reduction of production list(sexp_decl) ->
## In state 285, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Wildcard
##
## Ends in an error in state: 289.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack . list(sexp_decl) Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Kebab_id Rpar
##
## Ends in an error in state: 290.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack list(sexp_decl) . Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 284, spurious reduction of production list(sexp_decl) ->
## In state 285, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack Wildcard
##
## Ends in an error in state: 292.
##
## parens(sexp_lambda) -> Lpar Fun maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack False Rbrack
##
## Ends in an error in state: 293.
##
## list(stmt) -> stmt . list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

Expecting expression

prog: Lpar Fun Kebab_id Wildcard
##
## Ends in an error in state: 300.
##
## parens(sexp_fun) -> Lpar Fun ident . option(attr) option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Keyword Wildcard
##
## Ends in an error in state: 302.
##
## parens(sexp_fun) -> Lpar Fun ident option(attr) . option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident option(attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id String_lit Wildcard
##
## Ends in an error in state: 304.
##
## parens(sexp_fun) -> Lpar Fun ident option(attr) option(String_lit) . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident option(attr) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Lbrack Rbrack Wildcard
##
## Ends in an error in state: 305.
##
## parens(sexp_fun) -> Lpar Fun ident option(attr) option(String_lit) maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident option(attr) option(String_lit) maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fmt_str Wildcard
##
## Ends in an error in state: 308.
##
## parens(fmt_str) -> Lpar Fmt_str . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fmt_str
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fmt_str False Rbrac
##
## Ends in an error in state: 309.
##
## parens(fmt_str) -> Lpar Fmt_str nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fmt_str nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal Wildcard
##
## Ends in an error in state: 311.
##
## parens(sexp_call) -> Lpar Equal . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal False Rbrac
##
## Ends in an error in state: 312.
##
## parens(sexp_call) -> Lpar Equal nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Wildcard
##
## Ends in an error in state: 314.
##
## parens(do_block) -> Lpar Do . nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Do
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do False Rbrack
##
## Ends in an error in state: 315.
##
## nonempty_list(stmt) -> stmt . [ Rpar ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i Wildcard
##
## Ends in an error in state: 319.
##
## parens(sexp_call) -> Lpar Div_i . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i False Rbrac
##
## Ends in an error in state: 320.
##
## parens(sexp_call) -> Lpar Div_i nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f Wildcard
##
## Ends in an error in state: 322.
##
## parens(sexp_call) -> Lpar Div_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f False Rbrac
##
## Ends in an error in state: 323.
##
## parens(sexp_call) -> Lpar Div_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Cond Wildcard
##
## Ends in an error in state: 325.
##
## parens(sexp_if) -> Lpar Cond . parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond
##

Expecting expression

prog: Lpar Cond Lpar Wildcard
##
## Ends in an error in state: 326.
##
## parens(cond_item) -> Lpar . sexp_expr sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting (condition expression)

prog: Lpar Cond Lpar False Rpar
##
## Ends in an error in state: 327.
##
## parens(cond_item) -> Lpar sexp_expr . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr
##

Expecting expression

prog: Lpar Cond Lpar False False U8
##
## Ends in an error in state: 328.
##
## parens(cond_item) -> Lpar sexp_expr sexp_expr . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr sexp_expr
##

Expecting only one expression per condition

prog: Lpar Cond Lpar False False Rpar Wildcard
##
## Ends in an error in state: 330.
##
## parens(sexp_if) -> Lpar Cond parens(cond_item) . sexp_cond Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond parens(cond_item)
##

Expecting (condition expression)

prog: Lpar Cond Lpar False False Rpar Lpar Wildcard
##
## Ends in an error in state: 331.
##
## parens(cond_else) -> Lpar . Else sexp_expr Rpar [ Rpar ]
## parens(cond_item) -> Lpar . sexp_expr sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting condition

prog: Lpar Cond Lpar False False Rpar Lpar Else Wildcard
##
## Ends in an error in state: 332.
##
## parens(cond_else) -> Lpar Else . sexp_expr Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar Else
##

Expecting expression

prog: Lpar Cond Lpar False False Rpar Lpar Else False U8
##
## Ends in an error in state: 333.
##
## parens(cond_else) -> Lpar Else sexp_expr . Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar Else sexp_expr
##

Expecting only one expression in 'else' case

prog: Lpar Cond Lpar False False Rpar Lpar Else False Rpar Wildcard
##
## Ends in an error in state: 335.
##
## parens(sexp_if) -> Lpar Cond parens(cond_item) sexp_cond . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond parens(cond_item) sexp_cond
##

Expecting no condition after 'else'

prog: Lpar Cond Lpar False False Rpar Lpar False False Rpar Wildcard
##
## Ends in an error in state: 337.
##
## sexp_cond -> parens(cond_item) . sexp_cond [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(cond_item)
##

Expceting (condition expression)

prog: Lpar Builtin_id Wildcard
##
## Ends in an error in state: 341.
##
## parens(sexp_call) -> Lpar Builtin_id . list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id False Rbrack
##
## Ends in an error in state: 342.
##
## parens(sexp_call) -> Lpar Builtin_id list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 54, spurious reduction of production list(sexp_expr) ->
## In state 55, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f Wildcard
##
## Ends in an error in state: 344.
##
## parens(sexp_call) -> Lpar Bin_equal_f . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f False Rbrac
##
## Ends in an error in state: 345.
##
## parens(sexp_call) -> Lpar Bin_equal_f nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter Wildcard
##
## Ends in an error in state: 347.
##
## parens(sexp_pipe_tail) -> Lpar Arrow_righter . sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter False Rpar
##
## Ends in an error in state: 348.
##
## parens(sexp_pipe_tail) -> Lpar Arrow_righter sexp_expr . nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter sexp_expr
##

Expecting something to pipe into

prog: Lpar Arrow_right False False Rbrack
##
## Ends in an error in state: 351.
##
## nonempty_list(pipeable) -> pipeable . [ Rpar ]
## nonempty_list(pipeable) -> pipeable . nonempty_list(pipeable) [ Rpar ]
##
## The known suffix of the stack is as follows:
## pipeable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right Wildcard
##
## Ends in an error in state: 355.
##
## parens(sexp_pipe_head) -> Lpar Arrow_right . sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Rpar
##
## Ends in an error in state: 356.
##
## parens(sexp_pipe_head) -> Lpar Arrow_right sexp_expr . nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And Wildcard
##
## Ends in an error in state: 359.
##
## parens(sexp_call) -> Lpar And . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And False Rbrac
##
## Ends in an error in state: 360.
##
## parens(sexp_call) -> Lpar And nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor Wildcard
##
## Ends in an error in state: 362.
##
## parens(sexp_field_get) -> Lpar Accessor . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor False U8
##
## Ends in an error in state: 363.
##
## parens(sexp_field_get) -> Lpar Accessor sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor Wildcard
##
## Ends in an error in state: 365.
##
## parens(sexp_ctor_item) -> Lpar sexp_ctor . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor False U8
##
## Ends in an error in state: 366.
##
## parens(sexp_ctor_item) -> Lpar sexp_ctor sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar Wildcard
##
## Ends in an error in state: 368.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar False Rbrack
##
## Ends in an error in state: 370.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar False False Rbrac
##
## Ends in an error in state: 372.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar Wildcard
##
## Ends in an error in state: 374.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar False Rbrack
##
## Ends in an error in state: 376.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar False False Rbrac
##
## Ends in an error in state: 378.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar Wildcard
##
## Ends in an error in state: 380.
##
## parens(sexp_call) -> Lpar parens(sexp_match) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar False Rbrack
##
## Ends in an error in state: 382.
##
## parens(sexp_call) -> Lpar parens(sexp_match) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar False False Rbrac
##
## Ends in an error in state: 384.
##
## parens(sexp_call) -> Lpar parens(sexp_match) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fun Lbrack Rbrack Rpar Wildcard
##
## Ends in an error in state: 386.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fun Lbrack Rbrack Rpar False Rbrack
##
## Ends in an error in state: 388.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fun Lbrack Rbrack Rpar False False Rbrac
##
## Ends in an error in state: 390.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar Wildcard
##
## Ends in an error in state: 392.
##
## parens(sexp_call) -> Lpar parens(sexp_if) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar False Rbrack
##
## Ends in an error in state: 394.
##
## parens(sexp_call) -> Lpar parens(sexp_if) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar False False Rbrac
##
## Ends in an error in state: 396.
##
## parens(sexp_call) -> Lpar parens(sexp_if) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar Wildcard
##
## Ends in an error in state: 398.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar False Rbrack
##
## Ends in an error in state: 400.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar False False Rbrac
##
## Ends in an error in state: 402.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 404.
##
## parens(sexp_call) -> Lpar parens(sexp_call) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar False Rbrack
##
## Ends in an error in state: 406.
##
## parens(sexp_call) -> Lpar parens(sexp_call) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar False False Rbrac
##
## Ends in an error in state: 408.
##
## parens(sexp_call) -> Lpar parens(sexp_call) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar Wildcard
##
## Ends in an error in state: 410.
##
## parens(sexp_call) -> Lpar parens(lets) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(lets) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(lets) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar False Rbrack
##
## Ends in an error in state: 412.
##
## parens(sexp_call) -> Lpar parens(lets) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(lets) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar False False Rbrac
##
## Ends in an error in state: 414.
##
## parens(sexp_call) -> Lpar parens(lets) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar Wildcard
##
## Ends in an error in state: 416.
##
## parens(sexp_call) -> Lpar parens(do_block) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar False Rbrack
##
## Ends in an error in state: 418.
##
## parens(sexp_call) -> Lpar parens(do_block) sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar False False Rbrac
##
## Ends in an error in state: 420.
##
## parens(sexp_call) -> Lpar parens(do_block) sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block) sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Wildcard
##
## Ends in an error in state: 422.
##
## parens(sexp_call) -> Lpar ident . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i Wildcard
##
## Ends in an error in state: 424.
##
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False Rbrack
##
## Ends in an error in state: 425.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . sexp_expr Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False False Rbrack
##
## Ends in an error in state: 427.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False False False Rbrac
##
## Ends in an error in state: 429.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False Rbrack
##
## Ends in an error in state: 431.
##
## parens(sexp_call) -> Lpar ident sexp_expr . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar ident sexp_expr . nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False False Rbrac
##
## Ends in an error in state: 433.
##
## parens(sexp_call) -> Lpar ident sexp_expr nonempty_list(sexp_expr) . Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident sexp_expr nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 48, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Lpar Fun Wildcard
##
## Ends in an error in state: 437.
##
## parens(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Rbrack Rbrac Mut_id Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Wildcard
##
## Ends in an error in state: 440.
##
## parens(defalias) -> Lpar . Type ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defalias) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type ident bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_field_set) -> Lpar . Setf parens(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_fun) -> Lpar . Fun ident option(attr) option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Val ident sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Val mut_ident sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Val parens(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Wildcard
##
## Ends in an error in state: 441.
##
## parens(defalias) -> Lpar Type . ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defalias) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type . ident bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type . ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Wildcard
##
## Ends in an error in state: 442.
##
## parens(defalias) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Wildcard
##
## Ends in an error in state: 443.
##
## parens(defalias) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 444.
##
## nonempty_list(poly_id) -> Quote . Lowercase_id [ Rpar ]
## nonempty_list(poly_id) -> Quote . Lowercase_id nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 445.
##
## nonempty_list(poly_id) -> Quote Lowercase_id . [ Rpar ]
## nonempty_list(poly_id) -> Quote Lowercase_id . nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 448.
##
## parens(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Wildcard
##
## Ends in an error in state: 449.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
## parens(nonempty_list(sexp_ctordef)) -> Lpar . nonempty_list(sexp_ctordef) Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Wildcard
##
## Ends in an error in state: 450.
##
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Wildcard
##
## Ends in an error in state: 451.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Int Wildcard
##
## Ends in an error in state: 452.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor Int . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Kebab_id String_lit
##
## Ends in an error in state: 454.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor build_sexp_type_list . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Wildcard
##
## Ends in an error in state: 456.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Lpar Wildcard
##
## Ends in an error in state: 457.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 458.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 459.
##
## nonempty_list(sexp_ctordef) -> parens(sexp_ctordef_item) . [ Rpar ]
## nonempty_list(sexp_ctordef) -> parens(sexp_ctordef_item) . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_ctordef_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Wildcard
##
## Ends in an error in state: 464.
##
## bracs(nonempty_list(sexp_type_decl)) -> Lbrac . nonempty_list(sexp_type_decl) Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Wildcard
##
## Ends in an error in state: 465.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword . build_sexp_type_list [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . parens(sexp_type_func) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . build_sexp_type_list nonempty_list(sexp_type_decl) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . parens(sexp_type_func) nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 466.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword parens(sexp_type_func) . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword parens(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Wildcard
##
## Ends in an error in state: 467.
##
## nonempty_list(sexp_type_decl) -> Keyword . build_sexp_type_list [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parens(sexp_type_func) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . build_sexp_type_list nonempty_list(sexp_type_decl) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parens(sexp_type_func) nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 468.
##
## nonempty_list(sexp_type_decl) -> Keyword parens(sexp_type_func) . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword parens(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id String_lit
##
## Ends in an error in state: 470.
##
## nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Kebab_id String_lit
##
## Ends in an error in state: 473.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword build_sexp_type_list . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword build_sexp_type_list . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Kebab_id String_lit
##
## Ends in an error in state: 480.
##
## parens(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Lbrac Mut_keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 482.
##
## parens(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Constructor Wildcard
##
## Ends in an error in state: 484.
##
## parens(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Wildcard
##
## Ends in an error in state: 486.
##
## parens(defalias) -> Lpar Type ident . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type ident . bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type ident . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 487.
##
## parens(defalias) -> Lpar Type ident build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 489.
##
## parens(defrecord) -> Lpar Type ident bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Constructor Wildcard
##
## Ends in an error in state: 491.
##
## parens(defvariant) -> Lpar Type ident atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Wildcard
##
## Ends in an error in state: 493.
##
## parens(sexp_open) -> Lpar Open . ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Kebab_id Wildcard
##
## Ends in an error in state: 494.
##
## parens(sexp_open) -> Lpar Open ident . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Wildcard
##
## Ends in an error in state: 496.
##
## parens(defexternal) -> Lpar Defexternal . ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar Defexternal . ident parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Wildcard
##
## Ends in an error in state: 497.
##
## parens(defexternal) -> Lpar Defexternal ident . build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar Defexternal ident . parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 498.
##
## parens(defexternal) -> Lpar Defexternal ident parens(sexp_type_func) . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar String_lit Wildcard
##
## Ends in an error in state: 499.
##
## parens(defexternal) -> Lpar Defexternal ident parens(sexp_type_func) option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parens(sexp_type_func) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Rbrac
##
## Ends in an error in state: 501.
##
## parens(defexternal) -> Lpar Defexternal ident build_sexp_type_list . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 215, spurious reduction of production type_spec -> ident
## In state 212, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id String_lit Wildcard
##
## Ends in an error in state: 502.
##
## parens(defexternal) -> Lpar Defexternal ident build_sexp_type_list option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Rpar
##
## Ends in an error in state: 504.
##
## list(top_item) -> top_item . list(top_item) [ Eof ]
##
## The known suffix of the stack is as follows:
## top_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

