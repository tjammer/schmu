prog: Wildcard
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_i Wildcard
##
## Ends in an error in state: 4.
##
## sexp_expr -> Minus_i . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_f Wildcard
##
## Ends in an error in state: 5.
##
## sexp_expr -> Minus_f . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Lpar Wildcard
##
## Ends in an error in state: 6.
##
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_field_set) -> Lpar . Set Ampersand sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_lambda) -> Lpar . Fn maybe_bracks(list(param)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> Lpar . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Set Wildcard
##
## Ends in an error in state: 7.
##
## parens(sexp_field_set) -> Lpar Set . Ampersand sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Set
##

Expecting '&' to indicate mutation

prog: Lpar Set Ampersand Wildcard
##
## Ends in an error in state: 8.
##
## parens(sexp_field_set) -> Lpar Set Ampersand . sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Set Ampersand
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Wildcard
##
## Ends in an error in state: 10.
##
## array_lit -> Lbrack . list(sexp_expr) Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Wildcard
##
## Ends in an error in state: 11.
##
## bracs(nonempty_list(sexp_expr)) -> Lbrac . nonempty_list(sexp_expr) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## bracs(nonempty_list(sexp_record_item)) -> Lbrac . nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## bracs(record_update) -> Lbrac . At sexp_expr nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword Wildcard
##
## Ends in an error in state: 12.
##
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr nonempty_list(sexp_record_item) [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . nonempty_list(sexp_record_item) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword False Wildcard
##
## Ends in an error in state: 20.
##
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . [ Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . nonempty_list(sexp_record_item) [ Rbrac ]
## sexp_expr -> sexp_expr . Accessor [ Rbrac Ldotbrack Keyword Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rbrac Ldotbrack Keyword Accessor ]
##
## The known suffix of the stack is as follows:
## Keyword sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Ldotbrack Wildcard
##
## Ends in an error in state: 21.
##
## sexp_expr -> sexp_expr Ldotbrack . sexp_expr Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr Ldotbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Ldotbrack False Wildcard
##
## Ends in an error in state: 22.
##
## sexp_expr -> sexp_expr . Accessor [ Rbrack Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rbrack Ldotbrack Accessor ]
## sexp_expr -> sexp_expr Ldotbrack sexp_expr . Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr Ldotbrack sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Type
##
## Ends in an error in state: 38.
##
## sexp_expr -> ident . [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> ident . Div_i sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Wildcard
##
## Ends in an error in state: 39.
##
## sexp_expr -> ident Div_i . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac At Wildcard
##
## Ends in an error in state: 48.
##
## bracs(record_update) -> Lbrac At . sexp_expr nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac At
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac At False Wildcard
##
## Ends in an error in state: 49.
##
## bracs(record_update) -> Lbrac At sexp_expr . nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Ldotbrack Keyword Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Ldotbrack Keyword Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac At sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac False Wildcard
##
## Ends in an error in state: 52.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar Rbrac ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar Rbrac ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac False Rpar
##
## Ends in an error in state: 56.
##
## bracs(nonempty_list(sexp_expr)) -> Lbrac nonempty_list(sexp_expr) . Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Wildcard
##
## Ends in an error in state: 58.
##
## list(sexp_expr) -> sexp_expr . list(sexp_expr) [ Rpar Rbrack ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Rpar
##
## Ends in an error in state: 60.
##
## array_lit -> Lbrack list(sexp_expr) . Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(sexp_expr) ->
## In state 59, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Set Ampersand False Wildcard
##
## Ends in an error in state: 62.
##
## parens(sexp_field_set) -> Lpar Set Ampersand sexp_expr . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Set Ampersand sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Set Ampersand False False Wildcard
##
## Ends in an error in state: 63.
##
## parens(sexp_field_set) -> Lpar Set Ampersand sexp_expr sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Set Ampersand sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i Wildcard
##
## Ends in an error in state: 66.
##
## parens(sexp_call) -> Lpar Plus_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i False Rbrac
##
## Ends in an error in state: 67.
##
## parens(sexp_call) -> Lpar Plus_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f Wildcard
##
## Ends in an error in state: 69.
##
## parens(sexp_call) -> Lpar Plus_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f False Rbrac
##
## Ends in an error in state: 70.
##
## parens(sexp_call) -> Lpar Plus_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or Wildcard
##
## Ends in an error in state: 72.
##
## parens(sexp_call) -> Lpar Or . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or False Rbrac
##
## Ends in an error in state: 73.
##
## parens(sexp_call) -> Lpar Or nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i Wildcard
##
## Ends in an error in state: 75.
##
## parens(sexp_call) -> Lpar Mult_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i False Rbrac
##
## Ends in an error in state: 76.
##
## parens(sexp_call) -> Lpar Mult_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f Wildcard
##
## Ends in an error in state: 78.
##
## parens(sexp_call) -> Lpar Mult_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f False Rbrac
##
## Ends in an error in state: 79.
##
## parens(sexp_call) -> Lpar Mult_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i Wildcard
##
## Ends in an error in state: 81.
##
## parens(sexp_call) -> Lpar Minus_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> Minus_i . sexp_expr [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i False Wildcard
##
## Ends in an error in state: 82.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> Minus_i sexp_expr . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i False False Rbrac
##
## Ends in an error in state: 83.
##
## parens(sexp_call) -> Lpar Minus_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
## In state 53, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr nonempty_list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f Wildcard
##
## Ends in an error in state: 85.
##
## parens(sexp_call) -> Lpar Minus_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> Minus_f . sexp_expr [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f False Wildcard
##
## Ends in an error in state: 86.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> Minus_f sexp_expr . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f False False Rbrac
##
## Ends in an error in state: 87.
##
## parens(sexp_call) -> Lpar Minus_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
## In state 53, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr nonempty_list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Wildcard
##
## Ends in an error in state: 89.
##
## parens(sexp_match) -> Lpar Match . sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Wildcard
##
## Ends in an error in state: 90.
##
## parens(sexp_match) -> Lpar Match sexp_expr . nonempty_list(parens(sexp_clause)) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Lpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Lpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Type
##
## Ends in an error in state: 91.
##
## parens(sexp_clause) -> Lpar . sexp_ctor sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . parens(ctor_pattern_item) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . ident sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . Wildcard sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . bracs(nonempty_list(record_item_pattern)) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . Int sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . U8 sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . bracs(sexp_pattern_tuple) sexp_expr Rpar [ Rpar Lpar ]
## parens(sexp_clause) -> Lpar . parens(or_pattern) sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting pattern

prog: Lpar Match False Lpar Wildcard Wildcard
##
## Ends in an error in state: 92.
##
## parens(sexp_clause) -> Lpar Wildcard . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Wildcard False Wildcard
##
## Ends in an error in state: 93.
##
## parens(sexp_clause) -> Lpar Wildcard sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Wildcard sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar U8 Wildcard
##
## Ends in an error in state: 95.
##
## parens(sexp_clause) -> Lpar U8 . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar U8 False Wildcard
##
## Ends in an error in state: 96.
##
## parens(sexp_clause) -> Lpar U8 sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar U8 sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Lpar Wildcard
##
## Ends in an error in state: 98.
##
## parens(ctor_pattern_item) -> Lpar . sexp_ctor sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor ident Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Wildcard Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(nonempty_list(record_item_pattern)) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Int Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor U8 Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(sexp_pattern_tuple) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(or_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or sexp_ctor nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or parens(ctor_pattern_item) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or ident nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or Wildcard nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or bracs(nonempty_list(record_item_pattern)) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or Int nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or U8 nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or bracs(sexp_pattern_tuple) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
## parens(or_pattern) -> Lpar . Or parens(or_pattern) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Type
##
## Ends in an error in state: 99.
##
## parens(or_pattern) -> Lpar Or . sexp_ctor nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . parens(ctor_pattern_item) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . ident nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . Wildcard nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . bracs(nonempty_list(record_item_pattern)) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . Int nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . U8 nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . bracs(sexp_pattern_tuple) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar Or . parens(or_pattern) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Wildcard Type
##
## Ends in an error in state: 100.
##
## parens(or_pattern) -> Lpar Or Wildcard . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Wildcard Type
##
## Ends in an error in state: 101.
##
## nonempty_list(sexp_pattern) -> Wildcard . [ Rpar ]
## nonempty_list(sexp_pattern) -> Wildcard . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id U8 Type
##
## Ends in an error in state: 102.
##
## nonempty_list(sexp_pattern) -> U8 . [ Rpar ]
## nonempty_list(sexp_pattern) -> U8 . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Type
##
## Ends in an error in state: 103.
##
## bracs(nonempty_list(record_item_pattern)) -> Lbrac . nonempty_list(record_item_pattern) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## bracs(sexp_pattern_tuple) -> Lbrac . with_loc(sexp_pattern) list(with_loc(sexp_pattern)) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Keyword Type
##
## Ends in an error in state: 106.
##
## nonempty_list(record_item_pattern) -> Keyword . option(sexp_pattern) [ Rbrac ]
## nonempty_list(record_item_pattern) -> Keyword . option(sexp_pattern) nonempty_list(record_item_pattern) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Keyword Kebab_id Wildcard
##
## Ends in an error in state: 113.
##
## nonempty_list(record_item_pattern) -> Keyword option(sexp_pattern) . [ Rbrac ]
## nonempty_list(record_item_pattern) -> Keyword option(sexp_pattern) . nonempty_list(record_item_pattern) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword option(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Kebab_id Type
##
## Ends in an error in state: 119.
##
## bracs(sexp_pattern_tuple) -> Lbrac with_loc(sexp_pattern) . list(with_loc(sexp_pattern)) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lbrac with_loc(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Kebab_id Kebab_id Type
##
## Ends in an error in state: 120.
##
## list(with_loc(sexp_pattern)) -> with_loc(sexp_pattern) . list(with_loc(sexp_pattern)) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## with_loc(sexp_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Int Type
##
## Ends in an error in state: 132.
##
## nonempty_list(sexp_pattern) -> Int . [ Rpar ]
## nonempty_list(sexp_pattern) -> Int . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Constructor Type
##
## Ends in an error in state: 133.
##
## nonempty_list(sexp_pattern) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_pattern) -> sexp_ctor . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Lpar Or Kebab_id Kebab_id Rpar Type
##
## Ends in an error in state: 134.
##
## nonempty_list(sexp_pattern) -> parens(or_pattern) . [ Rpar ]
## nonempty_list(sexp_pattern) -> parens(or_pattern) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Lpar Constructor Kebab_id Rpar Type
##
## Ends in an error in state: 135.
##
## nonempty_list(sexp_pattern) -> parens(ctor_pattern_item) . [ Rpar ]
## nonempty_list(sexp_pattern) -> parens(ctor_pattern_item) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Kebab_id Type
##
## Ends in an error in state: 137.
##
## nonempty_list(sexp_pattern) -> ident . [ Rpar ]
## nonempty_list(sexp_pattern) -> ident . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Lbrac Kebab_id Rbrac Type
##
## Ends in an error in state: 139.
##
## nonempty_list(sexp_pattern) -> bracs(sexp_pattern_tuple) . [ Rpar ]
## nonempty_list(sexp_pattern) -> bracs(sexp_pattern_tuple) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Lbrac Keyword Rbrac Type
##
## Ends in an error in state: 141.
##
## nonempty_list(sexp_pattern) -> bracs(nonempty_list(record_item_pattern)) . [ Rpar ]
## nonempty_list(sexp_pattern) -> bracs(nonempty_list(record_item_pattern)) . nonempty_list(sexp_pattern) [ Rpar ]
##
## The known suffix of the stack is as follows:
## bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or U8 Type
##
## Ends in an error in state: 150.
##
## parens(or_pattern) -> Lpar Or U8 . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Int Type
##
## Ends in an error in state: 153.
##
## parens(or_pattern) -> Lpar Or Int . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Constructor Type
##
## Ends in an error in state: 156.
##
## parens(or_pattern) -> Lpar Or sexp_ctor . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Lpar Or Kebab_id Kebab_id Rpar Type
##
## Ends in an error in state: 159.
##
## parens(or_pattern) -> Lpar Or parens(or_pattern) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Lpar Constructor Kebab_id Rpar Type
##
## Ends in an error in state: 162.
##
## parens(or_pattern) -> Lpar Or parens(ctor_pattern_item) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Type
##
## Ends in an error in state: 165.
##
## parens(or_pattern) -> Lpar Or ident . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Lbrac Kebab_id Rbrac Type
##
## Ends in an error in state: 168.
##
## parens(or_pattern) -> Lpar Or bracs(sexp_pattern_tuple) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Lbrac Keyword Rbrac Type
##
## Ends in an error in state: 171.
##
## parens(or_pattern) -> Lpar Or bracs(nonempty_list(record_item_pattern)) . nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Or bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Type
##
## Ends in an error in state: 174.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor . sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . parens(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . ident Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . Wildcard Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . bracs(nonempty_list(record_item_pattern)) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . Int Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . U8 Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . bracs(sexp_pattern_tuple) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar sexp_ctor . parens(or_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Wildcard Wildcard
##
## Ends in an error in state: 175.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor Wildcard . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor U8 Wildcard
##
## Ends in an error in state: 177.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor U8 . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Int Wildcard
##
## Ends in an error in state: 179.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor Int . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 181.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor sexp_ctor . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Lpar Or Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 183.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor parens(or_pattern) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 185.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor parens(ctor_pattern_item) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Kebab_id Wildcard
##
## Ends in an error in state: 187.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor ident . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Lbrac Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 189.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor bracs(sexp_pattern_tuple) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Lbrac Keyword Rbrac Wildcard
##
## Ends in an error in state: 191.
##
## parens(ctor_pattern_item) -> Lpar sexp_ctor bracs(nonempty_list(record_item_pattern)) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Int Wildcard
##
## Ends in an error in state: 193.
##
## parens(sexp_clause) -> Lpar Int . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Int False Wildcard
##
## Ends in an error in state: 194.
##
## parens(sexp_clause) -> Lpar Int sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Int sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Wildcard
##
## Ends in an error in state: 196.
##
## parens(sexp_clause) -> Lpar sexp_ctor . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor False Wildcard
##
## Ends in an error in state: 197.
##
## parens(sexp_clause) -> Lpar sexp_ctor sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 199.
##
## parens(sexp_clause) -> Lpar parens(or_pattern) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Or Kebab_id Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 200.
##
## parens(sexp_clause) -> Lpar parens(or_pattern) sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(or_pattern) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 202.
##
## parens(sexp_clause) -> Lpar parens(ctor_pattern_item) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lpar Constructor Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 203.
##
## parens(sexp_clause) -> Lpar parens(ctor_pattern_item) sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(ctor_pattern_item) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Kebab_id Wildcard
##
## Ends in an error in state: 205.
##
## parens(sexp_clause) -> Lpar ident . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Kebab_id False Wildcard
##
## Ends in an error in state: 206.
##
## parens(sexp_clause) -> Lpar ident sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 208.
##
## parens(sexp_clause) -> Lpar bracs(sexp_pattern_tuple) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Kebab_id Rbrac False Wildcard
##
## Ends in an error in state: 209.
##
## parens(sexp_clause) -> Lpar bracs(sexp_pattern_tuple) sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(sexp_pattern_tuple) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Lbrac Keyword Rbrac Wildcard
##
## Ends in an error in state: 211.
##
## parens(sexp_clause) -> Lpar bracs(nonempty_list(record_item_pattern)) . sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(nonempty_list(record_item_pattern))
##

Expecting (pattern expression)

prog: Lpar Match False Lpar Lbrac Keyword Rbrac False Wildcard
##
## Ends in an error in state: 212.
##
## parens(sexp_clause) -> Lpar bracs(nonempty_list(record_item_pattern)) sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar bracs(nonempty_list(record_item_pattern)) sexp_expr
##

Expecting (pattern expression)

prog: Lpar Match False Lpar Kebab_id False Rpar Wildcard
##
## Ends in an error in state: 214.
##
## nonempty_list(parens(sexp_clause)) -> parens(sexp_clause) . [ Rpar ]
## nonempty_list(parens(sexp_clause)) -> parens(sexp_clause) . nonempty_list(parens(sexp_clause)) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_clause)
##

Expecting (pattern expression)

prog: Lpar Let Wildcard
##
## Ends in an error in state: 218.
##
## parens(lets) -> Lpar Let . maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Type
##
## Ends in an error in state: 219.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar . nonempty_list(lets_let) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Wildcard Wildcard
##
## Ends in an error in state: 220.
##
## sexp_decl -> Wildcard . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> Wildcard . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def U8 Wildcard
##
## Ends in an error in state: 222.
##
## sexp_decl -> U8 . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> U8 . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Wildcard
##
## Ends in an error in state: 224.
##
## parens(ctor_pattern_item) -> Lpar . sexp_ctor sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor ident Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Wildcard Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(nonempty_list(record_item_pattern)) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor Int Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor U8 Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor bracs(sexp_pattern_tuple) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(ctor_pattern_item) -> Lpar . sexp_ctor parens(or_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or sexp_ctor nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or parens(ctor_pattern_item) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or ident nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or Wildcard nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or bracs(nonempty_list(record_item_pattern)) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or Int nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or U8 nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or bracs(sexp_pattern_tuple) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(or_pattern) -> Lpar . Or parens(or_pattern) nonempty_list(sexp_pattern) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(sexp_decl_typed) -> Lpar . ident option(decl_attr) sexp_type_list Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(sexp_decl_typed) -> Lpar . ident option(decl_attr) parens(sexp_type_func) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Kebab_id Wildcard
##
## Ends in an error in state: 225.
##
## parens(sexp_decl_typed) -> Lpar ident . option(decl_attr) sexp_type_list Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(sexp_decl_typed) -> Lpar ident . option(decl_attr) parens(sexp_type_func) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Kebab_id Ampersand Wildcard
##
## Ends in an error in state: 228.
##
## parens(sexp_decl_typed) -> Lpar ident option(decl_attr) . sexp_type_list Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## parens(sexp_decl_typed) -> Lpar ident option(decl_attr) . parens(sexp_type_func) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar ident option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Quote Wildcard
##
## Ends in an error in state: 229.
##
## type_spec -> Quote . Lowercase_id [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Wildcard
##
## Ends in an error in state: 231.
##
## parens(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_fun_param) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
## sexp_type_list -> Lpar . type_spec nonempty_list(sexp_type_list) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lbrac Wildcard
##
## Ends in an error in state: 232.
##
## type_spec -> Lbrac . type_spec nonempty_list(type_spec) Rbrac [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lbrac Kebab_id String_lit
##
## Ends in an error in state: 233.
##
## type_spec -> Lbrac type_spec . nonempty_list(type_spec) Rbrac [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Lbrac type_spec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lbrac Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 234.
##
## nonempty_list(type_spec) -> type_spec . [ Rbrac ]
## nonempty_list(type_spec) -> type_spec . nonempty_list(type_spec) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## type_spec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 236.
##
## type_spec -> ident . [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
## type_spec -> ident . Div_i separated_nonempty_list(Div_i,ident) [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Div_i Wildcard
##
## Ends in an error in state: 237.
##
## type_spec -> ident Div_i . separated_nonempty_list(Div_i,ident) [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Div_i Kebab_id Wildcard
##
## Ends in an error in state: 239.
##
## separated_nonempty_list(Div_i,ident) -> ident . [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
## separated_nonempty_list(Div_i,ident) -> ident . Div_i separated_nonempty_list(Div_i,ident) [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Div_i Kebab_id Div_i Wildcard
##
## Ends in an error in state: 240.
##
## separated_nonempty_list(Div_i,ident) -> ident Div_i . separated_nonempty_list(Div_i,ident) [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Wildcard
##
## Ends in an error in state: 244.
##
## parens(sexp_type_func) -> Lpar Fun . nonempty_list(sexp_fun_param) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id String_lit
##
## Ends in an error in state: 246.
##
## nonempty_list(sexp_fun_param) -> sexp_type_list . option(decl_attr) [ Rpar ]
## nonempty_list(sexp_fun_param) -> sexp_type_list . option(decl_attr) nonempty_list(sexp_fun_param) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Ampersand Wildcard
##
## Ends in an error in state: 247.
##
## nonempty_list(sexp_fun_param) -> sexp_type_list option(decl_attr) . [ Rpar ]
## nonempty_list(sexp_fun_param) -> sexp_type_list option(decl_attr) . nonempty_list(sexp_fun_param) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_type_list option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 248.
##
## nonempty_list(sexp_fun_param) -> parens(sexp_type_func) . option(decl_attr) [ Rpar ]
## nonempty_list(sexp_fun_param) -> parens(sexp_type_func) . option(decl_attr) nonempty_list(sexp_fun_param) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Lpar Fun Kebab_id Rpar Ampersand Wildcard
##
## Ends in an error in state: 249.
##
## nonempty_list(sexp_fun_param) -> parens(sexp_type_func) option(decl_attr) . [ Rpar ]
## nonempty_list(sexp_fun_param) -> parens(sexp_type_func) option(decl_attr) . nonempty_list(sexp_fun_param) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_type_func) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id String_lit
##
## Ends in an error in state: 254.
##
## sexp_type_list -> Lpar type_spec . nonempty_list(sexp_type_list) Rpar [ String_lit Rpar Rbrac Quote Mut_keyword Lpar Lowercase_id Lbrac Keyword Kebab_id Exclamation Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Lpar Wildcard
##
## Ends in an error in state: 255.
##
## sexp_type_list -> Lpar . type_spec nonempty_list(sexp_type_list) Rpar [ Rpar Quote Lpar Lowercase_id Lbrac Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 256.
##
## nonempty_list(sexp_type_list) -> sexp_type_list . [ Rpar ]
## nonempty_list(sexp_type_list) -> sexp_type_list . nonempty_list(sexp_type_list) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 260.
##
## parens(sexp_decl_typed) -> Lpar ident option(decl_attr) sexp_type_list . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar ident option(decl_attr) sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 262.
##
## parens(sexp_decl_typed) -> Lpar ident option(decl_attr) parens(sexp_type_func) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Lpar ident option(decl_attr) parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Int Wildcard
##
## Ends in an error in state: 264.
##
## sexp_decl -> Int . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> Int . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id Ampersand Wildcard
##
## Ends in an error in state: 266.
##
## nonempty_list(lets_let) -> sexp_decl . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl . Ampersand sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl . Exclamation sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl . Ampersand sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl . Exclamation sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id Exclamation Wildcard
##
## Ends in an error in state: 267.
##
## nonempty_list(lets_let) -> sexp_decl Exclamation . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl Exclamation . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_decl Exclamation
##

Expecting expression to mutate

prog: Lpar Let Lbrack Kebab_id Exclamation False True
##
## Ends in an error in state: 268.
##
## nonempty_list(lets_let) -> sexp_decl Exclamation sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl Exclamation sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
## sexp_expr -> sexp_expr . Accessor [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_decl Exclamation sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Constructor Wildcard
##
## Ends in an error in state: 269.
##
## sexp_decl -> sexp_ctor . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> sexp_ctor . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Or Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 272.
##
## sexp_decl -> parens(or_pattern) . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> parens(or_pattern) . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 274.
##
## sexp_decl -> parens(ctor_pattern_item) . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> parens(ctor_pattern_item) . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Wildcard
##
## Ends in an error in state: 277.
##
## sexp_decl -> ident . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> ident . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 279.
##
## sexp_decl -> bracs(sexp_pattern_tuple) . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> bracs(sexp_pattern_tuple) . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Lbrac Keyword Rbrac Wildcard
##
## Ends in an error in state: 281.
##
## sexp_decl -> bracs(nonempty_list(record_item_pattern)) . Ampersand [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
## sexp_decl -> bracs(nonempty_list(record_item_pattern)) . [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand ]
##
## The known suffix of the stack is as follows:
## bracs(nonempty_list(record_item_pattern))
##

Expecting expression

prog: Lpar Let Lbrack Kebab_id Ampersand Ampersand Wildcard
##
## Ends in an error in state: 283.
##
## nonempty_list(lets_let) -> sexp_decl Ampersand . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl Ampersand . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_decl Ampersand
##

Expecting expression

prog: Lpar Let Lbrack Kebab_id Ampersand Ampersand False True
##
## Ends in an error in state: 284.
##
## nonempty_list(lets_let) -> sexp_decl Ampersand sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl Ampersand sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
## sexp_expr -> sexp_expr . Accessor [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_decl Ampersand sexp_expr
##

Expecting ']' or another binding

prog: Lpar Let Lbrack Kebab_id False True
##
## Ends in an error in state: 286.
##
## nonempty_list(lets_let) -> sexp_decl sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> sexp_decl sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
## sexp_expr -> sexp_expr . Accessor [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Ldotbrack Lbrac Kebab_id Int Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_decl sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Kebab_id False Rbrack
##
## Ends in an error in state: 288.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar nonempty_list(lets_let) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 286, spurious reduction of production nonempty_list(lets_let) -> sexp_decl sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Type
##
## Ends in an error in state: 290.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack . nonempty_list(lets_let) Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rpar
##
## Ends in an error in state: 291.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack nonempty_list(lets_let) . Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 286, spurious reduction of production nonempty_list(lets_let) -> sexp_decl sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rbrack Wildcard
##
## Ends in an error in state: 293.
##
## parens(lets) -> Lpar Let maybe_bracks(nonempty_list(lets_let)) . nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let maybe_bracks(nonempty_list(lets_let))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Lpar Wildcard
##
## Ends in an error in state: 294.
##
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_field_set) -> Lpar . Set Ampersand sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_fun) -> Lpar . Defn ident option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_lambda) -> Lpar . Fn maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_let) -> Lpar . Def sexp_decl sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Ampersand sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Exclamation sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## parens(sexp_rec) -> Lpar . Rec parens(sexp_fun) nonempty_list(parens(sexp_fun)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Rec Wildcard
##
## Ends in an error in state: 295.
##
## parens(sexp_rec) -> Lpar Rec . parens(sexp_fun) nonempty_list(parens(sexp_fun)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Rec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Rec Lpar Wildcard
##
## Ends in an error in state: 296.
##
## parens(sexp_fun) -> Lpar . Defn ident option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting function definition

prog: Lpar Defn Wildcard
##
## Ends in an error in state: 297.
##
## parens(sexp_fun) -> Lpar Defn . ident option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defn
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defn Kebab_id Wildcard
##
## Ends in an error in state: 298.
##
## parens(sexp_fun) -> Lpar Defn ident . option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defn ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defn Kebab_id Keyword Wildcard
##
## Ends in an error in state: 300.
##
## parens(sexp_fun) -> Lpar Defn ident option(attr) . option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defn ident option(attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defn Kebab_id String_lit Wildcard
##
## Ends in an error in state: 302.
##
## parens(sexp_fun) -> Lpar Defn ident option(attr) option(String_lit) . maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defn ident option(attr) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lpar Type
##
## Ends in an error in state: 303.
##
## maybe_bracks(list(param)) -> Lpar . list(param) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Wildcard Type
##
## Ends in an error in state: 304.
##
## param -> Wildcard . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> Wildcard . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> Wildcard . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

Expecting ']' or another parameter

prog: Lpar Fn Lbrack U8 Type
##
## Ends in an error in state: 307.
##
## param -> U8 . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> U8 . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> U8 . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## U8
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Int Type
##
## Ends in an error in state: 310.
##
## param -> Int . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> Int . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> Int . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Constructor Type
##
## Ends in an error in state: 313.
##
## param -> sexp_ctor . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> sexp_ctor . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> sexp_ctor . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Lpar Or Kebab_id Kebab_id Rpar Type
##
## Ends in an error in state: 317.
##
## param -> parens(or_pattern) . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> parens(or_pattern) . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> parens(or_pattern) . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## parens(or_pattern)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Lpar Constructor Kebab_id Rpar Type
##
## Ends in an error in state: 320.
##
## param -> parens(ctor_pattern_item) . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> parens(ctor_pattern_item) . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> parens(ctor_pattern_item) . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## parens(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Kebab_id Ampersand Type
##
## Ends in an error in state: 323.
##
## list(param) -> param . list(param) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Kebab_id Type
##
## Ends in an error in state: 325.
##
## param -> ident . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> ident . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> ident . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Lbrac Kebab_id Rbrac Type
##
## Ends in an error in state: 328.
##
## param -> bracs(sexp_pattern_tuple) . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> bracs(sexp_pattern_tuple) . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> bracs(sexp_pattern_tuple) . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## bracs(sexp_pattern_tuple)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Lbrac Keyword Rbrac Type
##
## Ends in an error in state: 331.
##
## param -> bracs(nonempty_list(record_item_pattern)) . Ampersand [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> bracs(nonempty_list(record_item_pattern)) . Exclamation [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
## param -> bracs(nonempty_list(record_item_pattern)) . [ Wildcard U8 Rpar Rbrack Lpar Lowercase_id Lbrac Kebab_id Int Constructor ]
##
## The known suffix of the stack is as follows:
## bracs(nonempty_list(record_item_pattern))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lpar Kebab_id Rbrack
##
## Ends in an error in state: 334.
##
## maybe_bracks(list(param)) -> Lpar list(param) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar list(param)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 325, spurious reduction of production param -> ident
## In state 323, spurious reduction of production list(param) ->
## In state 324, spurious reduction of production list(param) -> param list(param)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Type
##
## Ends in an error in state: 336.
##
## maybe_bracks(list(param)) -> Lbrack . list(param) Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Kebab_id Rpar
##
## Ends in an error in state: 337.
##
## maybe_bracks(list(param)) -> Lbrack list(param) . Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(param)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 325, spurious reduction of production param -> ident
## In state 323, spurious reduction of production list(param) ->
## In state 324, spurious reduction of production list(param) -> param list(param)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defn Kebab_id Lbrack Rbrack Wildcard
##
## Ends in an error in state: 339.
##
## parens(sexp_fun) -> Lpar Defn ident option(attr) option(String_lit) maybe_bracks(list(param)) . list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defn ident option(attr) option(String_lit) maybe_bracks(list(param))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Rbrack False Eof
##
## Ends in an error in state: 340.
##
## list(stmt) -> stmt . list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Wildcard
##
## Ends in an error in state: 341.
##
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## stmt -> sexp_expr . [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Rec Lpar Defn Kebab_id Lbrack Rbrack Rpar Wildcard
##
## Ends in an error in state: 349.
##
## parens(sexp_rec) -> Lpar Rec parens(sexp_fun) . nonempty_list(parens(sexp_fun)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Rec parens(sexp_fun)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Rec Lpar Defn Kebab_id Lbrack Rbrack Rpar Lpar Defn Kebab_id Lbrack Rbrack Rpar Wildcard
##
## Ends in an error in state: 350.
##
## nonempty_list(parens(sexp_fun)) -> parens(sexp_fun) . [ Rpar ]
## nonempty_list(parens(sexp_fun)) -> parens(sexp_fun) . nonempty_list(parens(sexp_fun)) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_fun)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Wildcard
##
## Ends in an error in state: 354.
##
## parens(sexp_open) -> Lpar Open . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Kebab_id Wildcard
##
## Ends in an error in state: 355.
##
## parens(sexp_open) -> Lpar Open ident . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i Wildcard
##
## Ends in an error in state: 357.
##
## parens(sexp_call) -> Lpar Less_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i False Rbrac
##
## Ends in an error in state: 358.
##
## parens(sexp_call) -> Lpar Less_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f Wildcard
##
## Ends in an error in state: 360.
##
## parens(sexp_call) -> Lpar Less_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f False Rbrac
##
## Ends in an error in state: 361.
##
## parens(sexp_call) -> Lpar Less_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_eq_i Wildcard
##
## Ends in an error in state: 363.
##
## parens(sexp_call) -> Lpar Less_eq_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_eq_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_eq_i False Rbrac
##
## Ends in an error in state: 364.
##
## parens(sexp_call) -> Lpar Less_eq_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_eq_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_eq_f Wildcard
##
## Ends in an error in state: 366.
##
## parens(sexp_call) -> Lpar Less_eq_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_eq_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_eq_f False Rbrac
##
## Ends in an error in state: 367.
##
## parens(sexp_call) -> Lpar Less_eq_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_eq_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If Wildcard
##
## Ends in an error in state: 369.
##
## parens(sexp_if) -> Lpar If . sexp_expr sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False Wildcard
##
## Ends in an error in state: 370.
##
## parens(sexp_if) -> Lpar If sexp_expr . sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False Wildcard
##
## Ends in an error in state: 371.
##
## parens(sexp_if) -> Lpar If sexp_expr sexp_expr . option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False False Wildcard
##
## Ends in an error in state: 372.
##
## option(sexp_expr) -> sexp_expr . [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i Wildcard
##
## Ends in an error in state: 375.
##
## parens(sexp_call) -> Lpar Greater_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i False Rbrac
##
## Ends in an error in state: 376.
##
## parens(sexp_call) -> Lpar Greater_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f Wildcard
##
## Ends in an error in state: 378.
##
## parens(sexp_call) -> Lpar Greater_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f False Rbrac
##
## Ends in an error in state: 379.
##
## parens(sexp_call) -> Lpar Greater_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_eq_i Wildcard
##
## Ends in an error in state: 381.
##
## parens(sexp_call) -> Lpar Greater_eq_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_eq_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_eq_i False Rbrac
##
## Ends in an error in state: 382.
##
## parens(sexp_call) -> Lpar Greater_eq_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_eq_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_eq_f Wildcard
##
## Ends in an error in state: 384.
##
## parens(sexp_call) -> Lpar Greater_eq_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_eq_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_eq_f False Rbrac
##
## Ends in an error in state: 385.
##
## parens(sexp_call) -> Lpar Greater_eq_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_eq_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Wildcard
##
## Ends in an error in state: 387.
##
## parens(sexp_lambda) -> Lpar Fn . maybe_bracks(list(param)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fn
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fn Lbrack Rbrack Wildcard
##
## Ends in an error in state: 388.
##
## parens(sexp_lambda) -> Lpar Fn maybe_bracks(list(param)) . list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fn maybe_bracks(list(param))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fmt_str Wildcard
##
## Ends in an error in state: 391.
##
## parens(fmt_str) -> Lpar Fmt_str . list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fmt_str
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fmt_str False Rbrack
##
## Ends in an error in state: 392.
##
## parens(fmt_str) -> Lpar Fmt_str list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fmt_str list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 58, spurious reduction of production list(sexp_expr) ->
## In state 59, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal Wildcard
##
## Ends in an error in state: 394.
##
## parens(sexp_call) -> Lpar Equal . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal False Rbrac
##
## Ends in an error in state: 395.
##
## parens(sexp_call) -> Lpar Equal nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Wildcard
##
## Ends in an error in state: 397.
##
## parens(do_block) -> Lpar Do . nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Do
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do False Eof
##
## Ends in an error in state: 398.
##
## nonempty_list(stmt) -> stmt . [ Rpar ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i Wildcard
##
## Ends in an error in state: 402.
##
## parens(sexp_call) -> Lpar Div_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i False Rbrac
##
## Ends in an error in state: 403.
##
## parens(sexp_call) -> Lpar Div_i nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f Wildcard
##
## Ends in an error in state: 405.
##
## parens(sexp_call) -> Lpar Div_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f False Rbrac
##
## Ends in an error in state: 406.
##
## parens(sexp_call) -> Lpar Div_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Type
##
## Ends in an error in state: 408.
##
## parens(sexp_let) -> Lpar Def . sexp_decl sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Def . sexp_decl Ampersand sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Def . sexp_decl Exclamation sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Def
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Ampersand Wildcard
##
## Ends in an error in state: 409.
##
## parens(sexp_let) -> Lpar Def sexp_decl . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Def sexp_decl . Ampersand sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar Def sexp_decl . Exclamation sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Exclamation Wildcard
##
## Ends in an error in state: 410.
##
## parens(sexp_let) -> Lpar Def sexp_decl Exclamation . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl Exclamation
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Exclamation False Wildcard
##
## Ends in an error in state: 411.
##
## parens(sexp_let) -> Lpar Def sexp_decl Exclamation sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl Exclamation sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Ampersand Ampersand Wildcard
##
## Ends in an error in state: 413.
##
## parens(sexp_let) -> Lpar Def sexp_decl Ampersand . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl Ampersand
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id Ampersand Ampersand False Wildcard
##
## Ends in an error in state: 414.
##
## parens(sexp_let) -> Lpar Def sexp_decl Ampersand sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl Ampersand sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Def Kebab_id False Wildcard
##
## Ends in an error in state: 416.
##
## parens(sexp_let) -> Lpar Def sexp_decl sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Def sexp_decl sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Cond Wildcard
##
## Ends in an error in state: 418.
##
## parens(sexp_if) -> Lpar Cond . parens(cond_item) sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond
##

Expecting expression

prog: Lpar Cond Lpar Wildcard
##
## Ends in an error in state: 419.
##
## parens(cond_item) -> Lpar . sexp_expr sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting (condition expression)

prog: Lpar Cond Lpar False Wildcard
##
## Ends in an error in state: 420.
##
## parens(cond_item) -> Lpar sexp_expr . sexp_expr Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr
##

Expecting expression

prog: Lpar Cond Lpar False False Wildcard
##
## Ends in an error in state: 421.
##
## parens(cond_item) -> Lpar sexp_expr sexp_expr . Rpar [ Rpar Lpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr sexp_expr
##

Expecting only one expression per condition

prog: Lpar Cond Lpar False False Rpar Wildcard
##
## Ends in an error in state: 423.
##
## parens(sexp_if) -> Lpar Cond parens(cond_item) . sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond parens(cond_item)
##

Expecting (condition expression)

prog: Lpar Cond Lpar False False Rpar Lpar Wildcard
##
## Ends in an error in state: 424.
##
## parens(cond_else) -> Lpar . Else sexp_expr Rpar [ Rpar ]
## parens(cond_item) -> Lpar . sexp_expr sexp_expr Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting condition

prog: Lpar Cond Lpar False False Rpar Lpar Else Wildcard
##
## Ends in an error in state: 425.
##
## parens(cond_else) -> Lpar Else . sexp_expr Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar Else
##

Expecting expression

prog: Lpar Cond Lpar False False Rpar Lpar Else False Wildcard
##
## Ends in an error in state: 426.
##
## parens(cond_else) -> Lpar Else sexp_expr . Rpar [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Else sexp_expr
##

Expecting only one expression in 'else' case

prog: Lpar Cond Lpar False False Rpar Lpar Else False Rpar Wildcard
##
## Ends in an error in state: 428.
##
## parens(sexp_if) -> Lpar Cond parens(cond_item) sexp_cond . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond parens(cond_item) sexp_cond
##

Expecting no condition after 'else'

prog: Lpar Cond Lpar False False Rpar Lpar False False Rpar Wildcard
##
## Ends in an error in state: 430.
##
## sexp_cond -> parens(cond_item) . sexp_cond [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(cond_item)
##

Expecting (condition expression)

prog: Lpar Builtin_id Wildcard
##
## Ends in an error in state: 434.
##
## parens(sexp_call) -> Lpar Builtin_id . list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id Ampersand Wildcard
##
## Ends in an error in state: 435.
##
## list(call_arg) -> option(decl_attr) . sexp_expr list(call_arg) [ Rpar ]
##
## The known suffix of the stack is as follows:
## option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id False Wildcard
##
## Ends in an error in state: 436.
##
## list(call_arg) -> option(decl_attr) sexp_expr . list(call_arg) [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f Wildcard
##
## Ends in an error in state: 440.
##
## parens(sexp_call) -> Lpar Bin_equal_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f False Rbrac
##
## Ends in an error in state: 441.
##
## parens(sexp_call) -> Lpar Bin_equal_f nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter Wildcard
##
## Ends in an error in state: 443.
##
## parens(sexp_pipe_tail) -> Lpar Arrow_righter . option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter Ampersand Wildcard
##
## Ends in an error in state: 444.
##
## parens(sexp_pipe_tail) -> Lpar Arrow_righter option(decl_attr) . sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter False Wildcard
##
## Ends in an error in state: 445.
##
## parens(sexp_pipe_tail) -> Lpar Arrow_righter option(decl_attr) sexp_expr . nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Lpar Wildcard
##
## Ends in an error in state: 446.
##
## parens(Accessor) -> Lpar . Accessor Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor ]
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_field_set) -> Lpar . Set Ampersand sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_lambda) -> Lpar . Fn maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right Wildcard
##
## Ends in an error in state: 447.
##
## parens(sexp_pipe_head) -> Lpar Arrow_right . option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right Ampersand Wildcard
##
## Ends in an error in state: 448.
##
## parens(sexp_pipe_head) -> Lpar Arrow_right option(decl_attr) . sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Wildcard
##
## Ends in an error in state: 449.
##
## parens(sexp_pipe_head) -> Lpar Arrow_right option(decl_attr) sexp_expr . nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False False Wildcard
##
## Ends in an error in state: 451.
##
## pipeable -> sexp_expr . [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Fmt_str Wildcard
##
## Ends in an error in state: 452.
##
## nonempty_list(pipeable) -> pipeable . [ Rpar ]
## nonempty_list(pipeable) -> pipeable . nonempty_list(pipeable) [ Rpar ]
##
## The known suffix of the stack is as follows:
## pipeable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And Wildcard
##
## Ends in an error in state: 457.
##
## parens(sexp_call) -> Lpar And . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And False Rbrac
##
## Ends in an error in state: 458.
##
## parens(sexp_call) -> Lpar And nonempty_list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And nonempty_list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 52, spurious reduction of production nonempty_list(sexp_expr) -> sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Lpar Accessor Wildcard
##
## Ends in an error in state: 460.
##
## parens(Accessor) -> Lpar Accessor . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor ]
## parens(sexp_field_get) -> Lpar Accessor . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Fmt_str Float False F32 Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor False Wildcard
##
## Ends in an error in state: 462.
##
## parens(sexp_field_get) -> Lpar Accessor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar False Wildcard
##
## Ends in an error in state: 464.
##
## parens(sexp_call) -> Lpar sexp_expr . Accessor Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr . Ldotbrack sexp_expr Rbrack Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr . Accessor option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr . Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr . Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr . Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ldotbrack Wildcard
##
## Ends in an error in state: 465.
##
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack . sexp_expr Rbrack Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack . sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack . sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr Ldotbrack . sexp_expr Rbrack [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Ldotbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ldotbrack False Wildcard
##
## Ends in an error in state: 466.
##
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr . Rbrack Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr . Rbrack option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr . Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Rbrack Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rbrack Ldotbrack Accessor ]
## sexp_expr -> sexp_expr Ldotbrack sexp_expr . Rbrack [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Ldotbrack sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ldotbrack False Rbrack Wildcard
##
## Ends in an error in state: 467.
##
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr Ldotbrack sexp_expr Rbrack . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Ldotbrack sexp_expr Rbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ldotbrack False Rbrack Ampersand Wildcard
##
## Ends in an error in state: 469.
##
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ldotbrack False Rbrack False Wildcard
##
## Ends in an error in state: 470.
##
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False Ampersand Wildcard
##
## Ends in an error in state: 472.
##
## nonempty_list(call_arg) -> option(decl_attr) . sexp_expr [ Rpar ]
## nonempty_list(call_arg) -> option(decl_attr) . sexp_expr nonempty_list(call_arg) [ Rpar ]
##
## The known suffix of the stack is as follows:
## option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False False Wildcard
##
## Ends in an error in state: 473.
##
## nonempty_list(call_arg) -> option(decl_attr) sexp_expr . [ Rpar ]
## nonempty_list(call_arg) -> option(decl_attr) sexp_expr . nonempty_list(call_arg) [ Rpar ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Accessor Wildcard
##
## Ends in an error in state: 477.
##
## parens(sexp_call) -> Lpar sexp_expr Accessor . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Accessor . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Accessor . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr Accessor . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Accessor Ampersand Wildcard
##
## Ends in an error in state: 479.
##
## parens(sexp_call) -> Lpar sexp_expr Accessor option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Accessor option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Accessor option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Accessor False Wildcard
##
## Ends in an error in state: 480.
##
## parens(sexp_call) -> Lpar sexp_expr Accessor option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar sexp_expr Accessor option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr Accessor option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor Wildcard
##
## Ends in an error in state: 484.
##
## parens(sexp_ctor_item) -> Lpar sexp_ctor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_ctor . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor False Wildcard
##
## Ends in an error in state: 485.
##
## parens(sexp_ctor_item) -> Lpar sexp_ctor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ Rpar Ldotbrack Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Rpar Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar Wildcard
##
## Ends in an error in state: 487.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_pipe_tail) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar Ampersand Wildcard
##
## Ends in an error in state: 489.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar False Wildcard
##
## Ends in an error in state: 490.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_tail) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_tail) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar Wildcard
##
## Ends in an error in state: 494.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_pipe_head) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar Ampersand Wildcard
##
## Ends in an error in state: 496.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar False Wildcard
##
## Ends in an error in state: 497.
##
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_pipe_head) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_pipe_head) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar Wildcard
##
## Ends in an error in state: 501.
##
## parens(sexp_call) -> Lpar parens(sexp_match) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_match) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar Ampersand Wildcard
##
## Ends in an error in state: 503.
##
## parens(sexp_call) -> Lpar parens(sexp_match) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Lpar Kebab_id False Rpar Rpar False Wildcard
##
## Ends in an error in state: 504.
##
## parens(sexp_call) -> Lpar parens(sexp_match) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_match) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_match) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fn Lbrack Rbrack Rpar Wildcard
##
## Ends in an error in state: 508.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_lambda) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fn Lbrack Rbrack Rpar Ampersand Wildcard
##
## Ends in an error in state: 510.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fn Lbrack Rbrack Rpar False Wildcard
##
## Ends in an error in state: 511.
##
## parens(sexp_call) -> Lpar parens(sexp_lambda) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_lambda) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_lambda) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar Wildcard
##
## Ends in an error in state: 515.
##
## parens(sexp_call) -> Lpar parens(sexp_if) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_if) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar Ampersand Wildcard
##
## Ends in an error in state: 517.
##
## parens(sexp_call) -> Lpar parens(sexp_if) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar If False False Rpar False Wildcard
##
## Ends in an error in state: 518.
##
## parens(sexp_call) -> Lpar parens(sexp_if) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_if) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_if) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar Wildcard
##
## Ends in an error in state: 522.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_field_get) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar Ampersand Wildcard
##
## Ends in an error in state: 524.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar False Wildcard
##
## Ends in an error in state: 525.
##
## parens(sexp_call) -> Lpar parens(sexp_field_get) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_field_get) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_field_get) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 529.
##
## parens(sexp_call) -> Lpar parens(sexp_call) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(sexp_call) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar Ampersand Wildcard
##
## Ends in an error in state: 531.
##
## parens(sexp_call) -> Lpar parens(sexp_call) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 532.
##
## parens(sexp_call) -> Lpar parens(sexp_call) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(sexp_call) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(sexp_call) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar Wildcard
##
## Ends in an error in state: 536.
##
## parens(sexp_call) -> Lpar parens(lets) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(lets) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(lets) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(lets) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar Ampersand Wildcard
##
## Ends in an error in state: 538.
##
## parens(sexp_call) -> Lpar parens(lets) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(lets) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar False Wildcard
##
## Ends in an error in state: 539.
##
## parens(sexp_call) -> Lpar parens(lets) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(lets) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(lets) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar Wildcard
##
## Ends in an error in state: 543.
##
## parens(sexp_call) -> Lpar parens(do_block) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> parens(do_block) . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar Ampersand Wildcard
##
## Ends in an error in state: 545.
##
## parens(sexp_call) -> Lpar parens(do_block) option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block) option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar False Wildcard
##
## Ends in an error in state: 546.
##
## parens(sexp_call) -> Lpar parens(do_block) option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar parens(do_block) option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parens(do_block) option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Wildcard
##
## Ends in an error in state: 550.
##
## parens(sexp_call) -> Lpar ident . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident . Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> ident . [ Ldotbrack Accessor ]
## sexp_expr -> ident . Div_i sexp_expr [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i Wildcard
##
## Ends in an error in state: 552.
##
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i . sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> ident Div_i . sexp_expr [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False Wildcard
##
## Ends in an error in state: 553.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . option(decl_attr) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr . option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> ident Div_i sexp_expr . [ Ldotbrack Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False Ampersand Wildcard
##
## Ends in an error in state: 555.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False False Wildcard
##
## Ends in an error in state: 556.
##
## parens(sexp_call) -> Lpar ident Div_i sexp_expr option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident Div_i sexp_expr option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Ampersand Wildcard
##
## Ends in an error in state: 560.
##
## parens(sexp_call) -> Lpar ident option(decl_attr) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident option(decl_attr) . sexp_expr nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident option(decl_attr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False Wildcard
##
## Ends in an error in state: 561.
##
## parens(sexp_call) -> Lpar ident option(decl_attr) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## parens(sexp_call) -> Lpar ident option(decl_attr) sexp_expr . nonempty_list(call_arg) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Accessor [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Exclamation Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident option(decl_attr) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor Wildcard
##
## Ends in an error in state: 567.
##
## parens(sexp_field_get) -> Lpar Accessor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_f False Type
##
## Ends in an error in state: 570.
##
## sexp_expr -> sexp_expr . Accessor [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> Minus_f sexp_expr . [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_i False Type
##
## Ends in an error in state: 571.
##
## sexp_expr -> sexp_expr . Accessor [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> sexp_expr . Ldotbrack sexp_expr Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
## sexp_expr -> Minus_i sexp_expr . [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Keyword Kebab_id Int I32 Fmt_str Float False F32 Exclamation Eof Constructor Ampersand Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Wildcard
##
## Ends in an error in state: 572.
##
## parens(defalias) -> Lpar . Type ident sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defalias) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident sexp_type_list option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type ident bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(modul) -> Lpar . Module ident list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(modul) -> Lpar . Module ident parens(signature) list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_set) -> Lpar . Set Ampersand sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_fun) -> Lpar . Defn ident option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_lambda) -> Lpar . Fn maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_let) -> Lpar . Def sexp_decl sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Ampersand sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Exclamation sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_rec) -> Lpar . Rec parens(sexp_fun) nonempty_list(parens(sexp_fun)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(signature) -> Lpar . signature Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Wildcard
##
## Ends in an error in state: 573.
##
## parens(defalias) -> Lpar Type . ident sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defalias) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type . ident bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type . ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Wildcard
##
## Ends in an error in state: 574.
##
## parens(defalias) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Wildcard
##
## Ends in an error in state: 575.
##
## parens(defalias) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 576.
##
## nonempty_list(poly_id) -> Quote . Lowercase_id [ Rpar ]
## nonempty_list(poly_id) -> Quote . Lowercase_id nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 577.
##
## nonempty_list(poly_id) -> Quote Lowercase_id . [ Rpar ]
## nonempty_list(poly_id) -> Quote Lowercase_id . nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 580.
##
## parens(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Wildcard
##
## Ends in an error in state: 581.
##
## parens(nonempty_list(sexp_ctordef)) -> Lpar . nonempty_list(sexp_ctordef) Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor sexp_type_list Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar ]
## sexp_type_list -> Lpar . type_spec nonempty_list(sexp_type_list) Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Wildcard
##
## Ends in an error in state: 582.
##
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Wildcard
##
## Ends in an error in state: 583.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Int Wildcard
##
## Ends in an error in state: 584.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor Int . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Kebab_id String_lit
##
## Ends in an error in state: 586.
##
## parens(sexp_ctordef_item) -> Lpar sexp_ctor sexp_type_list . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Wildcard
##
## Ends in an error in state: 588.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . sexp_type_list Rpar [ Rpar ]
## parens(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Lpar Wildcard
##
## Ends in an error in state: 589.
##
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parens(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
## sexp_type_list -> Lpar . type_spec nonempty_list(sexp_type_list) Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 590.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 591.
##
## nonempty_list(sexp_ctordef) -> parens(sexp_ctordef_item) . [ Rpar ]
## nonempty_list(sexp_ctordef) -> parens(sexp_ctordef_item) . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sexp_ctordef_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Wildcard
##
## Ends in an error in state: 596.
##
## bracs(nonempty_list(sexp_type_decl)) -> Lbrac . nonempty_list(sexp_type_decl) Rbrac [ Rpar ]
## type_spec -> Lbrac . type_spec nonempty_list(type_spec) Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Wildcard
##
## Ends in an error in state: 597.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword . sexp_type_list [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . parens(sexp_type_func) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . sexp_type_list nonempty_list(sexp_type_decl) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword . parens(sexp_type_func) nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Kebab_id String_lit
##
## Ends in an error in state: 598.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword sexp_type_list . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword sexp_type_list . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Wildcard
##
## Ends in an error in state: 599.
##
## nonempty_list(sexp_type_decl) -> Keyword . sexp_type_list [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parens(sexp_type_func) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . sexp_type_list nonempty_list(sexp_type_decl) [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parens(sexp_type_func) nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id String_lit
##
## Ends in an error in state: 600.
##
## nonempty_list(sexp_type_decl) -> Keyword sexp_type_list . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword sexp_type_list . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 602.
##
## nonempty_list(sexp_type_decl) -> Keyword parens(sexp_type_func) . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword parens(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Mut_keyword Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 605.
##
## nonempty_list(sexp_type_decl) -> Mut_keyword parens(sexp_type_func) . [ Rbrac ]
## nonempty_list(sexp_type_decl) -> Mut_keyword parens(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rbrac ]
##
## The known suffix of the stack is as follows:
## Mut_keyword parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Kebab_id String_lit
##
## Ends in an error in state: 609.
##
## parens(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar sexp_type_list . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Lbrac Keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 614.
##
## parens(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Constructor Wildcard
##
## Ends in an error in state: 616.
##
## parens(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Wildcard
##
## Ends in an error in state: 618.
##
## parens(defalias) -> Lpar Type ident . sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar Type ident . bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar Type ident . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 619.
##
## parens(defalias) -> Lpar Type ident sexp_type_list . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 621.
##
## parens(defrecord) -> Lpar Type ident bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Constructor Wildcard
##
## Ends in an error in state: 623.
##
## parens(defvariant) -> Lpar Type ident atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Signature Wildcard
##
## Ends in an error in state: 625.
##
## signature -> Signature . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Signature
##

Expecting type or value declaration

prog: Lpar Signature Lpar Wildcard
##
## Ends in an error in state: 626.
##
## parens(defabstract) -> Lpar . Type ident Rpar [ Rpar Lpar ]
## parens(defabstract) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar . Type ident sexp_type_list Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar . Type ident bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar . Type ident atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
## parens(sigvalue) -> Lpar . Def ident sexp_type_list Rpar [ Rpar Lpar ]
## parens(sigvalue) -> Lpar . Def ident parens(sexp_type_func) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting type or value declaration

prog: Lpar Signature Lpar Type Wildcard
##
## Ends in an error in state: 627.
##
## parens(defabstract) -> Lpar Type . ident Rpar [ Rpar Lpar ]
## parens(defabstract) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type . ident sexp_type_list Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type . ident bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type . ident atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Type
##

Expecting type name

prog: Lpar Signature Lpar Type Lpar Wildcard
##
## Ends in an error in state: 628.
##
## parens(defabstract) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar
##

Expecting type name

prog: Lpar Signature Lpar Type Lpar Kebab_id Wildcard
##
## Ends in an error in state: 629.
##
## parens(defabstract) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident
##

Expecting type param

prog: Lpar Signature Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 631.
##
## parens(defabstract) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar
##

Expecting type declaration

prog: Lpar Signature Lpar Type Kebab_id Wildcard
##
## Ends in an error in state: 633.
##
## parens(defabstract) -> Lpar Type ident . Rpar [ Rpar Lpar ]
## parens(defalias) -> Lpar Type ident . sexp_type_list Rpar [ Rpar Lpar ]
## parens(defrecord) -> Lpar Type ident . bracs(nonempty_list(sexp_type_decl)) Rpar [ Rpar Lpar ]
## parens(defvariant) -> Lpar Type ident . atom_or_list(sexp_ctordef) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident
##

Expecting alias declaration

prog: Lpar Signature Lpar Def Wildcard
##
## Ends in an error in state: 635.
##
## parens(sigvalue) -> Lpar Def . ident sexp_type_list Rpar [ Rpar Lpar ]
## parens(sigvalue) -> Lpar Def . ident parens(sexp_type_func) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Def
##

Expecting type or value declaration

prog: Lpar Signature Lpar Def Kebab_id Wildcard
##
## Ends in an error in state: 636.
##
## parens(sigvalue) -> Lpar Def ident . sexp_type_list Rpar [ Rpar Lpar ]
## parens(sigvalue) -> Lpar Def ident . parens(sexp_type_func) Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Def ident
##

Expecting type or value declaration

prog: Lpar Signature Lpar Def Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 637.
##
## parens(sigvalue) -> Lpar Def ident sexp_type_list . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Def ident sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

Expecting type or value declaration

prog: Lpar Signature Lpar Def Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 639.
##
## parens(sigvalue) -> Lpar Def ident parens(sexp_type_func) . Rpar [ Rpar Lpar ]
##
## The known suffix of the stack is as follows:
## Lpar Def ident parens(sexp_type_func)
##

Expecting ')'

prog: Lpar Signature Lpar Def Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 641.
##
## nonempty_list(sig_item) -> parens(sigvalue) . [ Rpar ]
## nonempty_list(sig_item) -> parens(sigvalue) . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(sigvalue)
##

Expecting ')'

prog: Lpar Signature Lpar Type Kebab_id Constructor Rpar Wildcard
##
## Ends in an error in state: 642.
##
## nonempty_list(sig_item) -> parens(defvariant) . [ Rpar ]
## nonempty_list(sig_item) -> parens(defvariant) . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(defvariant)
##

Expecting ')'

prog: Lpar Signature Lpar Type Kebab_id Lbrac Keyword Kebab_id Rbrac Rpar Wildcard
##
## Ends in an error in state: 643.
##
## nonempty_list(sig_item) -> parens(defrecord) . [ Rpar ]
## nonempty_list(sig_item) -> parens(defrecord) . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(defrecord)
##

Expecting ')'

prog: Lpar Signature Lpar Type Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 644.
##
## nonempty_list(sig_item) -> parens(defalias) . [ Rpar ]
## nonempty_list(sig_item) -> parens(defalias) . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(defalias)
##

Expecting ')'

prog: Lpar Signature Lpar Type Kebab_id Rpar Wildcard
##
## Ends in an error in state: 645.
##
## nonempty_list(sig_item) -> parens(defabstract) . [ Rpar ]
## nonempty_list(sig_item) -> parens(defabstract) . nonempty_list(sig_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parens(defabstract)
##

Expecting type or value declaration

prog: Lpar Module Wildcard
##
## Ends in an error in state: 652.
##
## parens(modul) -> Lpar Module . ident list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(modul) -> Lpar Module . ident parens(signature) list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Module
##

Expecting definition

prog: Lpar Module Kebab_id Wildcard
##
## Ends in an error in state: 653.
##
## parens(modul) -> Lpar Module ident . list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(modul) -> Lpar Module ident . parens(signature) list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Module ident
##

Expecting definition

prog: Lpar Module Kebab_id Rpar Wildcard
##
## Ends in an error in state: 654.
##
## list(top_item) -> top_item . list(top_item) [ Rpar Eof ]
##
## The known suffix of the stack is as follows:
## top_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Lpar Wildcard
##
## Ends in an error in state: 655.
##
## parens(defalias) -> Lpar . Type ident sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defalias) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar sexp_type_list Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident sexp_type_list option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar . Defexternal ident parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type ident bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defrecord) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defvariant) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(fmt_str) -> Lpar . Fmt_str list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(modul) -> Lpar . Module ident list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(modul) -> Lpar . Module ident parens(signature) list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Accessor option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . sexp_expr Ldotbrack sexp_expr Rbrack option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(lets) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_if) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_lambda) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_field_get) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_head) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_pipe_tail) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_call) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(do_block) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . ident Div_i sexp_expr option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . parens(sexp_match) option(decl_attr) sexp_expr nonempty_list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Less_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Greater_eq_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_call) -> Lpar . Builtin_id list(call_arg) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_field_set) -> Lpar . Set Ampersand sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_fun) -> Lpar . Defn ident option(attr) option(String_lit) maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_if) -> Lpar . Cond parens(cond_item) sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_lambda) -> Lpar . Fn maybe_bracks(list(param)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_let) -> Lpar . Def sexp_decl sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Ampersand sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_let) -> Lpar . Def sexp_decl Exclamation sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_match) -> Lpar . Match sexp_expr nonempty_list(parens(sexp_clause)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(sexp_pipe_head) -> Lpar . Arrow_right option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_pipe_tail) -> Lpar . Arrow_righter option(decl_attr) sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parens(sexp_rec) -> Lpar . Rec parens(sexp_fun) nonempty_list(parens(sexp_fun)) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Ldotbrack Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Wildcard
##
## Ends in an error in state: 656.
##
## parens(defexternal) -> Lpar Defexternal . ident sexp_type_list option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar Defexternal . ident parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Wildcard
##
## Ends in an error in state: 657.
##
## parens(defexternal) -> Lpar Defexternal ident . sexp_type_list option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parens(defexternal) -> Lpar Defexternal ident . parens(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Rbrac
##
## Ends in an error in state: 658.
##
## parens(defexternal) -> Lpar Defexternal ident sexp_type_list . option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 236, spurious reduction of production type_spec -> ident
## In state 245, spurious reduction of production sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id String_lit Wildcard
##
## Ends in an error in state: 659.
##
## parens(defexternal) -> Lpar Defexternal ident sexp_type_list option(String_lit) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident sexp_type_list option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 661.
##
## parens(defexternal) -> Lpar Defexternal ident parens(sexp_type_func) . option(String_lit) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parens(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar String_lit Wildcard
##
## Ends in an error in state: 662.
##
## parens(defexternal) -> Lpar Defexternal ident parens(sexp_type_func) option(String_lit) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parens(sexp_type_func) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Module Kebab_id Lpar Signature Lpar Type Kebab_id Rpar Rpar Wildcard
##
## Ends in an error in state: 671.
##
## parens(modul) -> Lpar Module ident parens(signature) . list(top_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Module ident parens(signature)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Module Kebab_id Lpar Signature Lpar Type Kebab_id Rpar Rpar False Eof
##
## Ends in an error in state: 672.
##
## parens(modul) -> Lpar Module ident parens(signature) list(top_item) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Module ident parens(signature) list(top_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
## In state 664, spurious reduction of production top_item -> stmt
## In state 654, spurious reduction of production list(top_item) ->
## In state 670, spurious reduction of production list(top_item) -> top_item list(top_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Module Kebab_id False Eof
##
## Ends in an error in state: 674.
##
## parens(modul) -> Lpar Module ident list(top_item) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Module ident list(top_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
## In state 664, spurious reduction of production top_item -> stmt
## In state 654, spurious reduction of production list(top_item) ->
## In state 670, spurious reduction of production list(top_item) -> top_item list(top_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Signature Lpar Type Kebab_id Rpar Rpar Wildcard
##
## Ends in an error in state: 679.
##
## prog -> parens(signature) . list(top_item) Eof [ # ]
##
## The known suffix of the stack is as follows:
## parens(signature)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Signature Lpar Type Kebab_id Rpar Rpar False Rpar
##
## Ends in an error in state: 680.
##
## prog -> parens(signature) list(top_item) . Eof [ # ]
##
## The known suffix of the stack is as follows:
## parens(signature) list(top_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
## In state 664, spurious reduction of production top_item -> stmt
## In state 654, spurious reduction of production list(top_item) ->
## In state 670, spurious reduction of production list(top_item) -> top_item list(top_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Rpar
##
## Ends in an error in state: 682.
##
## prog -> list(top_item) . Eof [ # ]
##
## The known suffix of the stack is as follows:
## list(top_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 341, spurious reduction of production stmt -> sexp_expr
## In state 664, spurious reduction of production top_item -> stmt
## In state 654, spurious reduction of production list(top_item) ->
## In state 670, spurious reduction of production list(top_item) -> top_item list(top_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

