prog: Wildcard
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_i Wildcard
##
## Ends in an error in state: 4.
##
## sexp_expr -> Minus_i . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_f Wildcard
##
## Ends in an error in state: 5.
##
## sexp_expr -> Minus_f . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Lpar Wildcard
##
## Ends in an error in state: 6.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Plus_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Minus_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Mult_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Div_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Less_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Greater_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Equal sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Plus_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Minus_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Mult_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Div_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Less_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Greater_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Bin_equal_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . And sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Or sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_set) -> Lpar . Setf sexp_expr Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_if) -> Lpar . If sexp_expr block option(block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Lpar . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Wildcard
##
## Ends in an error in state: 7.
##
## parenss(sexp_field_set) -> Lpar Setf . sexp_expr Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Wildcard
##
## Ends in an error in state: 9.
##
## sexp_vector_lit -> Lbrack . list(sexp_expr) Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Wildcard
##
## Ends in an error in state: 10.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lbrac . nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Name Wildcard
##
## Ends in an error in state: 11.
##
## nonempty_list(sexp_record_item) -> Name . sexp_expr [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Name . [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Name . sexp_expr nonempty_list(sexp_record_item) [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Name . nonempty_list(sexp_record_item) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Name False Wildcard
##
## Ends in an error in state: 20.
##
## nonempty_list(sexp_record_item) -> Name sexp_expr . [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Name sexp_expr . nonempty_list(sexp_record_item) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Val
##
## Ends in an error in state: 35.
##
## sexp_expr -> ident . [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> ident . Div_i block [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Wildcard
##
## Ends in an error in state: 36.
##
## sexp_expr -> ident Div_i . block [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Lpar Wildcard
##
## Ends in an error in state: 37.
##
## block -> Lpar . Do nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Plus_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Minus_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Mult_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Div_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Less_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Greater_i sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Equal sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Plus_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Minus_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Mult_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Div_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Less_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Greater_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Bin_equal_f sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . And sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_binop_items) -> Lpar . Or sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_set) -> Lpar . Setf sexp_expr Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_fun) -> Lpar . Fun ident maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_if) -> Lpar . If sexp_expr block option(block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_let) -> Lpar . Val ident block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_let) -> Lpar . Val parenss(sexp_decl_typed) block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Lpar . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Wildcard
##
## Ends in an error in state: 38.
##
## parenss(sexp_let) -> Lpar Val . ident block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_let) -> Lpar Val . parenss(sexp_decl_typed) block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Val
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Wildcard
##
## Ends in an error in state: 39.
##
## parenss(sexp_decl_typed) -> Lpar . ident build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_decl_typed) -> Lpar . ident parenss(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Wildcard
##
## Ends in an error in state: 40.
##
## parenss(sexp_decl_typed) -> Lpar ident . build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_decl_typed) -> Lpar ident . parenss(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Uppercase_id Wildcard
##
## Ends in an error in state: 41.
##
## type_spec -> Uppercase_id . Dot type_spec [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Uppercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Uppercase_id Dot Wildcard
##
## Ends in an error in state: 42.
##
## type_spec -> Uppercase_id Dot . type_spec [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Uppercase_id Dot
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Quote Wildcard
##
## Ends in an error in state: 43.
##
## type_spec -> Quote . Lowercase_id [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Wildcard
##
## Ends in an error in state: 47.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Uppercase_id String_lit Rpar Quote Lpar Lowercase_id Kebab_id ]
## parenss(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_type_expr) Rpar [ Uppercase_id String_lit Rpar Quote Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Wildcard
##
## Ends in an error in state: 48.
##
## parenss(sexp_type_func) -> Lpar Fun . nonempty_list(sexp_type_expr) Rpar [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 50.
##
## nonempty_list(sexp_type_expr) -> parenss(sexp_type_func) . [ Rpar ]
## nonempty_list(sexp_type_expr) -> parenss(sexp_type_func) . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Wildcard
##
## Ends in an error in state: 52.
##
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . [ Rpar ]
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Lpar Kebab_id Wildcard
##
## Ends in an error in state: 56.
##
## build_sexp_type_list -> Lpar type_spec . build_sexp_type_list Rpar [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Lpar Wildcard
##
## Ends in an error in state: 57.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Lpar Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 58.
##
## build_sexp_type_list -> Lpar type_spec build_sexp_type_list . Rpar [ Uppercase_id String_lit Rpar Rbrac Quote Name Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 60.
##
## parenss(sexp_decl_typed) -> Lpar ident parenss(sexp_type_func) . Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 62.
##
## parenss(sexp_decl_typed) -> Lpar ident build_sexp_type_list . Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 64.
##
## parenss(sexp_let) -> Lpar Val parenss(sexp_decl_typed) . block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parenss(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 70.
##
## parenss(sexp_let) -> Lpar Val parenss(sexp_decl_typed) block . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parenss(sexp_decl_typed) block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id Wildcard
##
## Ends in an error in state: 72.
##
## parenss(sexp_let) -> Lpar Val ident . block Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id False Wildcard
##
## Ends in an error in state: 73.
##
## parenss(sexp_let) -> Lpar Val ident block . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i Wildcard
##
## Ends in an error in state: 76.
##
## parenss(sexp_binop_items) -> Lpar Plus_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i False Wildcard
##
## Ends in an error in state: 77.
##
## parenss(sexp_binop_items) -> Lpar Plus_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar False False False Wildcard
##
## Ends in an error in state: 78.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f Wildcard
##
## Ends in an error in state: 82.
##
## parenss(sexp_binop_items) -> Lpar Plus_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f False Wildcard
##
## Ends in an error in state: 83.
##
## parenss(sexp_binop_items) -> Lpar Plus_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or Wildcard
##
## Ends in an error in state: 86.
##
## parenss(sexp_binop_items) -> Lpar Or . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or False Wildcard
##
## Ends in an error in state: 87.
##
## parenss(sexp_binop_items) -> Lpar Or sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i Wildcard
##
## Ends in an error in state: 90.
##
## parenss(sexp_binop_items) -> Lpar Mult_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i False Wildcard
##
## Ends in an error in state: 91.
##
## parenss(sexp_binop_items) -> Lpar Mult_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f Wildcard
##
## Ends in an error in state: 94.
##
## parenss(sexp_binop_items) -> Lpar Mult_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f False Wildcard
##
## Ends in an error in state: 95.
##
## parenss(sexp_binop_items) -> Lpar Mult_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i Wildcard
##
## Ends in an error in state: 98.
##
## parenss(sexp_binop_items) -> Lpar Minus_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Minus_i . sexp_expr [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i False Wildcard
##
## Ends in an error in state: 99.
##
## parenss(sexp_binop_items) -> Lpar Minus_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Minus_i sexp_expr . [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f Wildcard
##
## Ends in an error in state: 102.
##
## parenss(sexp_binop_items) -> Lpar Minus_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Minus_f . sexp_expr [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f False Wildcard
##
## Ends in an error in state: 103.
##
## parenss(sexp_binop_items) -> Lpar Minus_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Minus_f sexp_expr . [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Wildcard
##
## Ends in an error in state: 106.
##
## parenss(sexp_match) -> Lpar Match . atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Quote Wildcard
##
## Ends in an error in state: 107.
##
## atom_or_quoted_list(sexp_expr) -> Quote . parenss(nonempty_list(sexp_expr)) [ Wildcard Quote Lpar Lowercase_id Kebab_id Constructor ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Quote Lpar Wildcard
##
## Ends in an error in state: 108.
##
## parenss(nonempty_list(sexp_expr)) -> Lpar . nonempty_list(sexp_expr) Rpar [ Wildcard Quote Lpar Lowercase_id Kebab_id Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False U8
##
## Ends in an error in state: 113.
##
## parenss(sexp_match) -> Lpar Match atom_or_quoted_list(sexp_expr) . nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match atom_or_quoted_list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Wildcard Wildcard
##
## Ends in an error in state: 114.
##
## nonempty_list(sexp_clause) -> Wildcard . block [ Rpar ]
## nonempty_list(sexp_clause) -> Wildcard . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Wildcard False U8
##
## Ends in an error in state: 115.
##
## nonempty_list(sexp_clause) -> Wildcard block . [ Rpar ]
## nonempty_list(sexp_clause) -> Wildcard block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Wildcard
##
## Ends in an error in state: 116.
##
## nonempty_list(sexp_clause) -> Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Val
##
## Ends in an error in state: 117.
##
## nonempty_list(sexp_clause) -> Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Val
##
## Ends in an error in state: 118.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Wildcard Val
##
## Ends in an error in state: 119.
##
## nonempty_list(sexp_pattern_item) -> Wildcard . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> Wildcard . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Wildcard
##
## Ends in an error in state: 120.
##
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor parenss(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor ident Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Wildcard Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Val
##
## Ends in an error in state: 121.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . parenss(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . ident Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Wildcard Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Wildcard Wildcard
##
## Ends in an error in state: 122.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Wildcard . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Wildcard
##
## Ends in an error in state: 124.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Val
##
## Ends in an error in state: 125.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Wildcard Val
##
## Ends in an error in state: 126.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Constructor Val
##
## Ends in an error in state: 127.
##
## nonempty_list(sexp_pattern_item) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> sexp_ctor . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 128.
##
## nonempty_list(sexp_pattern_item) -> parenss(ctor_pattern_item) . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Val
##
## Ends in an error in state: 130.
##
## nonempty_list(sexp_pattern_item) -> ident . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> ident . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Wildcard Kebab_id Rpar Wildcard
##
## Ends in an error in state: 134.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Constructor Val
##
## Ends in an error in state: 136.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 138.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 140.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 142.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Kebab_id Val
##
## Ends in an error in state: 144.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 146.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 148.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor sexp_ctor . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 150.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor parenss(ctor_pattern_item) . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Wildcard
##
## Ends in an error in state: 152.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor ident . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Kebab_id Rpar Wildcard
##
## Ends in an error in state: 156.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Kebab_id Rpar False U8
##
## Ends in an error in state: 157.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar block . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Constructor Wildcard
##
## Ends in an error in state: 158.
##
## nonempty_list(sexp_clause) -> sexp_ctor . block [ Rpar ]
## nonempty_list(sexp_clause) -> sexp_ctor . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Constructor False U8
##
## Ends in an error in state: 159.
##
## nonempty_list(sexp_clause) -> sexp_ctor block . [ Rpar ]
## nonempty_list(sexp_clause) -> sexp_ctor block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 160.
##
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) . block [ Rpar ]
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Rpar False U8
##
## Ends in an error in state: 161.
##
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) block . [ Rpar ]
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item) block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Kebab_id Wildcard
##
## Ends in an error in state: 163.
##
## nonempty_list(sexp_clause) -> ident . block [ Rpar ]
## nonempty_list(sexp_clause) -> ident . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Kebab_id False U8
##
## Ends in an error in state: 164.
##
## nonempty_list(sexp_clause) -> ident block . [ Rpar ]
## nonempty_list(sexp_clause) -> ident block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Val
##
## Ends in an error in state: 168.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 170.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Kebab_id Rpar False U8
##
## Ends in an error in state: 171.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar block . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 173.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 175.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar False U8
##
## Ends in an error in state: 176.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Val
##
## Ends in an error in state: 178.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 180.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . block [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . block nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Rpar False U8
##
## Ends in an error in state: 181.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar block . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar block . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i Wildcard
##
## Ends in an error in state: 186.
##
## parenss(sexp_binop_items) -> Lpar Less_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i False Wildcard
##
## Ends in an error in state: 187.
##
## parenss(sexp_binop_items) -> Lpar Less_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f Wildcard
##
## Ends in an error in state: 190.
##
## parenss(sexp_binop_items) -> Lpar Less_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f False Wildcard
##
## Ends in an error in state: 191.
##
## parenss(sexp_binop_items) -> Lpar Less_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If Wildcard
##
## Ends in an error in state: 194.
##
## parenss(sexp_if) -> Lpar If . sexp_expr block option(block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False Wildcard
##
## Ends in an error in state: 195.
##
## parenss(sexp_if) -> Lpar If sexp_expr . block option(block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False Wildcard
##
## Ends in an error in state: 196.
##
## parenss(sexp_if) -> Lpar If sexp_expr block . option(block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False False Wildcard
##
## Ends in an error in state: 197.
##
## parenss(sexp_if) -> Lpar If sexp_expr block option(block) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr block option(block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i Wildcard
##
## Ends in an error in state: 200.
##
## parenss(sexp_binop_items) -> Lpar Greater_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i False Wildcard
##
## Ends in an error in state: 201.
##
## parenss(sexp_binop_items) -> Lpar Greater_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f Wildcard
##
## Ends in an error in state: 204.
##
## parenss(sexp_binop_items) -> Lpar Greater_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f False Wildcard
##
## Ends in an error in state: 205.
##
## parenss(sexp_binop_items) -> Lpar Greater_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Wildcard
##
## Ends in an error in state: 208.
##
## parenss(sexp_fun) -> Lpar Fun . ident maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lpar Wildcard
##
## Ends in an error in state: 209.
##
## maybe_bracks(list(sexp_decl)) -> Lpar . list(sexp_decl) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 210.
##
## list(sexp_decl) -> parenss(sexp_decl_typed) . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Kebab_id Wildcard
##
## Ends in an error in state: 212.
##
## list(sexp_decl) -> ident . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lpar Kebab_id Rbrack
##
## Ends in an error in state: 214.
##
## maybe_bracks(list(sexp_decl)) -> Lpar list(sexp_decl) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 212, spurious reduction of production list(sexp_decl) ->
## In state 213, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Wildcard
##
## Ends in an error in state: 216.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack . list(sexp_decl) Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Kebab_id Rpar
##
## Ends in an error in state: 217.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack list(sexp_decl) . Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 212, spurious reduction of production list(sexp_decl) ->
## In state 213, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack Wildcard
##
## Ends in an error in state: 219.
##
## parenss(sexp_lambda) -> Lpar Fun maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack Lpar Wildcard
##
## Ends in an error in state: 220.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Plus_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Minus_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Mult_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Div_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Less_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Greater_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Equal sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Plus_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Minus_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Mult_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Div_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Less_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Greater_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Bin_equal_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . And sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_binop_items) -> Lpar . Or sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_field_set) -> Lpar . Setf sexp_expr Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_fun) -> Lpar . Fun ident maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_if) -> Lpar . If sexp_expr block option(block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_let) -> Lpar . Val ident block Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_let) -> Lpar . Val parenss(sexp_decl_typed) block Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal Wildcard
##
## Ends in an error in state: 221.
##
## parenss(sexp_binop_items) -> Lpar Equal . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal False Wildcard
##
## Ends in an error in state: 222.
##
## parenss(sexp_binop_items) -> Lpar Equal sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i Wildcard
##
## Ends in an error in state: 225.
##
## parenss(sexp_binop_items) -> Lpar Div_i . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i False Wildcard
##
## Ends in an error in state: 226.
##
## parenss(sexp_binop_items) -> Lpar Div_i sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f Wildcard
##
## Ends in an error in state: 229.
##
## parenss(sexp_binop_items) -> Lpar Div_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f False Wildcard
##
## Ends in an error in state: 230.
##
## parenss(sexp_binop_items) -> Lpar Div_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id Wildcard
##
## Ends in an error in state: 233.
##
## parenss(sexp_call) -> Lpar Builtin_id . list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Wildcard
##
## Ends in an error in state: 234.
##
## list(sexp_expr) -> sexp_expr . list(sexp_expr) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id False Rbrack
##
## Ends in an error in state: 236.
##
## parenss(sexp_call) -> Lpar Builtin_id list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 234, spurious reduction of production list(sexp_expr) ->
## In state 235, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f Wildcard
##
## Ends in an error in state: 238.
##
## parenss(sexp_binop_items) -> Lpar Bin_equal_f . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f False Wildcard
##
## Ends in an error in state: 239.
##
## parenss(sexp_binop_items) -> Lpar Bin_equal_f sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter Wildcard
##
## Ends in an error in state: 242.
##
## parenss(sexp_pipe_tail) -> Lpar Arrow_righter . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter False Wildcard
##
## Ends in an error in state: 243.
##
## parenss(sexp_pipe_tail) -> Lpar Arrow_righter sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right Wildcard
##
## Ends in an error in state: 246.
##
## parenss(sexp_pipe_head) -> Lpar Arrow_right . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Wildcard
##
## Ends in an error in state: 247.
##
## parenss(sexp_pipe_head) -> Lpar Arrow_right sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And Wildcard
##
## Ends in an error in state: 250.
##
## parenss(sexp_binop_items) -> Lpar And . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And False Wildcard
##
## Ends in an error in state: 251.
##
## parenss(sexp_binop_items) -> Lpar And sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor Wildcard
##
## Ends in an error in state: 254.
##
## parenss(sexp_field_get) -> Lpar Accessor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor False Wildcard
##
## Ends in an error in state: 255.
##
## parenss(sexp_field_get) -> Lpar Accessor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar False Wildcard
##
## Ends in an error in state: 257.
##
## parenss(sexp_call) -> Lpar sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar sexp_expr . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar False False Wildcard
##
## Ends in an error in state: 259.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar ]
## parenss(sexp_call) -> Lpar sexp_expr sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor Wildcard
##
## Ends in an error in state: 263.
##
## parenss(sexp_ctor_item) -> Lpar sexp_ctor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> sexp_ctor . [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor False Wildcard
##
## Ends in an error in state: 264.
##
## parenss(sexp_ctor_item) -> Lpar sexp_ctor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Name Rbrac
##
## Ends in an error in state: 266.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar nonempty_list(sexp_record_item) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(sexp_record_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production nonempty_list(sexp_record_item) -> Name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack False Wildcard
##
## Ends in an error in state: 268.
##
## list(stmt) -> stmt . list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Wildcard
##
## Ends in an error in state: 272.
##
## parenss(sexp_fun) -> Lpar Fun ident . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Lbrack Rbrack Wildcard
##
## Ends in an error in state: 273.
##
## parenss(sexp_fun) -> Lpar Fun ident maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Lpar Do Wildcard
##
## Ends in an error in state: 276.
##
## block -> Lpar Do . nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Do
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Lpar Do False Wildcard
##
## Ends in an error in state: 277.
##
## nonempty_list(stmt) -> stmt . [ Rpar ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Name Rpar
##
## Ends in an error in state: 282.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lbrac nonempty_list(sexp_record_item) . Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_record_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 11, spurious reduction of production nonempty_list(sexp_record_item) -> Name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Rpar
##
## Ends in an error in state: 284.
##
## sexp_vector_lit -> Lbrack list(sexp_expr) . Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 234, spurious reduction of production list(sexp_expr) ->
## In state 235, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf False Wildcard
##
## Ends in an error in state: 286.
##
## parenss(sexp_field_set) -> Lpar Setf sexp_expr . Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf False Accessor Wildcard
##
## Ends in an error in state: 287.
##
## parenss(sexp_field_set) -> Lpar Setf sexp_expr Accessor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf sexp_expr Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf False Accessor False Wildcard
##
## Ends in an error in state: 288.
##
## parenss(sexp_field_set) -> Lpar Setf sexp_expr Accessor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf sexp_expr Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Lpar Fun Wildcard
##
## Ends in an error in state: 290.
##
## parenss(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Name Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Wildcard
##
## Ends in an error in state: 293.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar . Defalias ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar . Defalias Lpar ident Quote Lowercase_id Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar . Defexternal ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar . Defexternal ident parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar . Defrecord ident maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar . Defrecord Lpar ident Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar . Defvariant ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar . Defvariant Lpar ident Quote Lowercase_id Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Plus_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Minus_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Mult_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Div_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Less_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Greater_i sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Equal sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Plus_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Minus_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Mult_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Div_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Less_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Greater_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Bin_equal_f sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . And sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_binop_items) -> Lpar . Or sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_field_set) -> Lpar . Setf sexp_expr Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_fun) -> Lpar . Fun ident maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_if) -> Lpar . If sexp_expr block option(block) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_let) -> Lpar . Val ident block Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_let) -> Lpar . Val parenss(sexp_decl_typed) block Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Wildcard
##
## Ends in an error in state: 294.
##
## parenss(sexp_open) -> Lpar Open . ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Kebab_id Wildcard
##
## Ends in an error in state: 295.
##
## parenss(sexp_open) -> Lpar Open ident . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Wildcard
##
## Ends in an error in state: 297.
##
## parenss(defvariant) -> Lpar Defvariant . ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Defvariant . Lpar ident Quote Lowercase_id Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Wildcard
##
## Ends in an error in state: 298.
##
## parenss(defvariant) -> Lpar Defvariant Lpar . ident Quote Lowercase_id Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Kebab_id Wildcard
##
## Ends in an error in state: 299.
##
## parenss(defvariant) -> Lpar Defvariant Lpar ident . Quote Lowercase_id Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 300.
##
## parenss(defvariant) -> Lpar Defvariant Lpar ident Quote . Lowercase_id Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar ident Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 301.
##
## parenss(defvariant) -> Lpar Defvariant Lpar ident Quote Lowercase_id . Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar ident Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 302.
##
## parenss(defvariant) -> Lpar Defvariant Lpar ident Quote Lowercase_id Rpar . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar ident Quote Lowercase_id Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Wildcard
##
## Ends in an error in state: 303.
##
## parenss(nonempty_list(sexp_ctordef)) -> Lpar . nonempty_list(sexp_ctordef) Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Lpar Wildcard
##
## Ends in an error in state: 304.
##
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Lpar Constructor Wildcard
##
## Ends in an error in state: 305.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Constructor Int Wildcard
##
## Ends in an error in state: 306.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor Int . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Constructor Kebab_id Wildcard
##
## Ends in an error in state: 308.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor build_sexp_type_list . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Constructor Wildcard
##
## Ends in an error in state: 310.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Constructor Lpar Wildcard
##
## Ends in an error in state: 311.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 312.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 313.
##
## nonempty_list(sexp_ctordef) -> parenss(sexp_ctordef_item) . [ Rpar ]
## nonempty_list(sexp_ctordef) -> parenss(sexp_ctordef_item) . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_ctordef_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Lpar Kebab_id Quote Lowercase_id Rpar Constructor Wildcard
##
## Ends in an error in state: 321.
##
## parenss(defvariant) -> Lpar Defvariant Lpar ident Quote Lowercase_id Rpar atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant Lpar ident Quote Lowercase_id Rpar atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Wildcard
##
## Ends in an error in state: 323.
##
## parenss(defvariant) -> Lpar Defvariant ident . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defvariant Kebab_id Constructor Wildcard
##
## Ends in an error in state: 324.
##
## parenss(defvariant) -> Lpar Defvariant ident atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defvariant ident atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Wildcard
##
## Ends in an error in state: 326.
##
## parenss(defrecord) -> Lpar Defrecord . ident maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Defrecord . Lpar ident Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Wildcard
##
## Ends in an error in state: 327.
##
## parenss(defrecord) -> Lpar Defrecord Lpar . ident Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Kebab_id Wildcard
##
## Ends in an error in state: 328.
##
## parenss(defrecord) -> Lpar Defrecord Lpar ident . Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 329.
##
## parenss(defrecord) -> Lpar Defrecord Lpar ident Quote . Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar ident Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 330.
##
## parenss(defrecord) -> Lpar Defrecord Lpar ident Quote Lowercase_id . Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar ident Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 331.
##
## parenss(defrecord) -> Lpar Defrecord Lpar ident Quote Lowercase_id Rpar . maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar ident Quote Lowercase_id Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lpar Wildcard
##
## Ends in an error in state: 332.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lpar . nonempty_list(sexp_type_decl) Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Wildcard
##
## Ends in an error in state: 333.
##
## nonempty_list(sexp_type_decl) -> Name . build_sexp_type_list [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . parenss(sexp_type_func) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . Lpar Mutable build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . Lpar Mutable parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . build_sexp_type_list nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . parenss(sexp_type_func) nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . Lpar Mutable build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name . Lpar Mutable parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Wildcard
##
## Ends in an error in state: 334.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar Rbrac Name ]
## nonempty_list(sexp_type_decl) -> Name Lpar . Mutable build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar . Mutable parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar . Mutable build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar . Mutable parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## parenss(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_type_expr) Rpar [ Rpar Rbrac Name ]
##
## The known suffix of the stack is as follows:
## Name Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Mutable Wildcard
##
## Ends in an error in state: 335.
##
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable . build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable . parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable . build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable . parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name Lpar Mutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Mutable Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 336.
##
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable parenss(sexp_type_func) . Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable parenss(sexp_type_func) . Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name Lpar Mutable parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Mutable Lpar Fun Kebab_id Rpar Rpar Wildcard
##
## Ends in an error in state: 337.
##
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable parenss(sexp_type_func) Rpar . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable parenss(sexp_type_func) Rpar . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name Lpar Mutable parenss(sexp_type_func) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Mutable Kebab_id Wildcard
##
## Ends in an error in state: 339.
##
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable build_sexp_type_list . Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable build_sexp_type_list . Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name Lpar Mutable build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Mutable Kebab_id Rpar Wildcard
##
## Ends in an error in state: 340.
##
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable build_sexp_type_list Rpar . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name Lpar Mutable build_sexp_type_list Rpar . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name Lpar Mutable build_sexp_type_list Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 342.
##
## nonempty_list(sexp_type_decl) -> Name parenss(sexp_type_func) . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name parenss(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Kebab_id Wildcard
##
## Ends in an error in state: 344.
##
## nonempty_list(sexp_type_decl) -> Name build_sexp_type_list . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Name build_sexp_type_list . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Name build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lpar Name Kebab_id Rbrac
##
## Ends in an error in state: 346.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lpar nonempty_list(sexp_type_decl) . Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(sexp_type_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 344, spurious reduction of production nonempty_list(sexp_type_decl) -> Name build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Wildcard
##
## Ends in an error in state: 348.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lbrac . nonempty_list(sexp_type_decl) Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Kebab_id Rpar
##
## Ends in an error in state: 349.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lbrac nonempty_list(sexp_type_decl) . Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_type_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 344, spurious reduction of production nonempty_list(sexp_type_decl) -> Name build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Lpar Kebab_id Quote Lowercase_id Rpar Lbrac Name Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 351.
##
## parenss(defrecord) -> Lpar Defrecord Lpar ident Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord Lpar ident Quote Lowercase_id Rpar maybe_bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Wildcard
##
## Ends in an error in state: 353.
##
## parenss(defrecord) -> Lpar Defrecord ident . maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defrecord Kebab_id Lbrac Name Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 354.
##
## parenss(defrecord) -> Lpar Defrecord ident maybe_bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defrecord ident maybe_bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Wildcard
##
## Ends in an error in state: 356.
##
## parenss(defexternal) -> Lpar Defexternal . ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar Defexternal . ident parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Wildcard
##
## Ends in an error in state: 357.
##
## parenss(defexternal) -> Lpar Defexternal ident . build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar Defexternal ident . parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 358.
##
## parenss(defexternal) -> Lpar Defexternal ident parenss(sexp_type_func) . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar String_lit Wildcard
##
## Ends in an error in state: 360.
##
## parenss(defexternal) -> Lpar Defexternal ident parenss(sexp_type_func) option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parenss(sexp_type_func) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 362.
##
## parenss(defexternal) -> Lpar Defexternal ident build_sexp_type_list . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id String_lit Wildcard
##
## Ends in an error in state: 363.
##
## parenss(defexternal) -> Lpar Defexternal ident build_sexp_type_list option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Wildcard
##
## Ends in an error in state: 365.
##
## parenss(defalias) -> Lpar Defalias . ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar Defalias . Lpar ident Quote Lowercase_id Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Wildcard
##
## Ends in an error in state: 366.
##
## parenss(defalias) -> Lpar Defalias Lpar . ident Quote Lowercase_id Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Kebab_id Wildcard
##
## Ends in an error in state: 367.
##
## parenss(defalias) -> Lpar Defalias Lpar ident . Quote Lowercase_id Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 368.
##
## parenss(defalias) -> Lpar Defalias Lpar ident Quote . Lowercase_id Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar ident Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 369.
##
## parenss(defalias) -> Lpar Defalias Lpar ident Quote Lowercase_id . Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar ident Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 370.
##
## parenss(defalias) -> Lpar Defalias Lpar ident Quote Lowercase_id Rpar . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar ident Quote Lowercase_id Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Lpar Kebab_id Quote Lowercase_id Rpar Kebab_id Wildcard
##
## Ends in an error in state: 371.
##
## parenss(defalias) -> Lpar Defalias Lpar ident Quote Lowercase_id Rpar build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias Lpar ident Quote Lowercase_id Rpar build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Wildcard
##
## Ends in an error in state: 373.
##
## parenss(defalias) -> Lpar Defalias ident . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defalias Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 374.
##
## parenss(defalias) -> Lpar Defalias ident build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defalias ident build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Wildcard
##
## Ends in an error in state: 376.
##
## list(top_item) -> top_item . list(top_item) [ Eof ]
##
## The known suffix of the stack is as follows:
## top_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

