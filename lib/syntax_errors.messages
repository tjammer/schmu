prog: Wildcard
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_i Wildcard
##
## Ends in an error in state: 4.
##
## sexp_expr -> Minus_i . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Minus_f Wildcard
##
## Ends in an error in state: 5.
##
## sexp_expr -> Minus_f . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Lpar Wildcard
##
## Ends in an error in state: 6.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(lets) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_field_set) -> Lpar . Setf parenss(sexp_set_access) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_if) -> Lpar . Cond sexp_expr sexp_expr sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> Lpar . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Wildcard
##
## Ends in an error in state: 7.
##
## parenss(sexp_field_set) -> Lpar Setf . parenss(sexp_set_access) sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Wildcard
##
## Ends in an error in state: 8.
##
## parenss(sexp_set_access) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor Wildcard
##
## Ends in an error in state: 9.
##
## parenss(sexp_set_access) -> Lpar Accessor . sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Wildcard
##
## Ends in an error in state: 11.
##
## sexp_vector_lit -> Lbrack . list(sexp_expr) Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Wildcard
##
## Ends in an error in state: 12.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lbrac . nonempty_list(sexp_record_item) Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword Wildcard
##
## Ends in an error in state: 13.
##
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . sexp_expr nonempty_list(sexp_record_item) [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword . nonempty_list(sexp_record_item) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword False Wildcard
##
## Ends in an error in state: 22.
##
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . [ Rpar Rbrac ]
## nonempty_list(sexp_record_item) -> Keyword sexp_expr . nonempty_list(sexp_record_item) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Val
##
## Ends in an error in state: 39.
##
## sexp_expr -> ident . [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## sexp_expr -> ident . Div_i sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Kebab_id Div_i Wildcard
##
## Ends in an error in state: 40.
##
## sexp_expr -> ident Div_i . sexp_expr [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrac Keyword Rpar
##
## Ends in an error in state: 43.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lbrac nonempty_list(sexp_record_item) . Rbrac [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_record_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 13, spurious reduction of production nonempty_list(sexp_record_item) -> Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Wildcard
##
## Ends in an error in state: 45.
##
## list(sexp_expr) -> sexp_expr . list(sexp_expr) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack False Rpar
##
## Ends in an error in state: 47.
##
## sexp_vector_lit -> Lbrack list(sexp_expr) . Rbrack [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production list(sexp_expr) ->
## In state 46, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False Wildcard
##
## Ends in an error in state: 49.
##
## parenss(sexp_set_access) -> Lpar Accessor sexp_expr . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False Rpar Wildcard
##
## Ends in an error in state: 51.
##
## parenss(sexp_field_set) -> Lpar Setf parenss(sexp_set_access) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf parenss(sexp_set_access)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Setf Lpar Accessor False Rpar False Wildcard
##
## Ends in an error in state: 52.
##
## parenss(sexp_field_set) -> Lpar Setf parenss(sexp_set_access) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Setf parenss(sexp_set_access) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_i Wildcard
##
## Ends in an error in state: 55.
##
## parenss(sexp_call) -> Lpar Plus_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And False Wildcard
##
## Ends in an error in state: 56.
##
## nonempty_list(sexp_expr) -> sexp_expr . [ Rpar ]
## nonempty_list(sexp_expr) -> sexp_expr . nonempty_list(sexp_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Plus_f Wildcard
##
## Ends in an error in state: 60.
##
## parenss(sexp_call) -> Lpar Plus_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Plus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Or Wildcard
##
## Ends in an error in state: 63.
##
## parenss(sexp_call) -> Lpar Or . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Or
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_i Wildcard
##
## Ends in an error in state: 66.
##
## parenss(sexp_call) -> Lpar Mult_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Mult_f Wildcard
##
## Ends in an error in state: 69.
##
## parenss(sexp_call) -> Lpar Mult_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Mult_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_i Wildcard
##
## Ends in an error in state: 72.
##
## parenss(sexp_call) -> Lpar Minus_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Minus_f Wildcard
##
## Ends in an error in state: 75.
##
## parenss(sexp_call) -> Lpar Minus_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Minus_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Wildcard
##
## Ends in an error in state: 78.
##
## parenss(sexp_match) -> Lpar Match . atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Quote Wildcard
##
## Ends in an error in state: 79.
##
## atom_or_quoted_list(sexp_expr) -> Quote . parenss(nonempty_list(sexp_expr)) [ Wildcard Quote Lpar Lowercase_id Kebab_id Constructor ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match Quote Lpar Wildcard
##
## Ends in an error in state: 80.
##
## parenss(nonempty_list(sexp_expr)) -> Lpar . nonempty_list(sexp_expr) Rpar [ Wildcard Quote Lpar Lowercase_id Kebab_id Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False U8
##
## Ends in an error in state: 85.
##
## parenss(sexp_match) -> Lpar Match atom_or_quoted_list(sexp_expr) . nonempty_list(sexp_clause) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Match atom_or_quoted_list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Wildcard Wildcard
##
## Ends in an error in state: 86.
##
## nonempty_list(sexp_clause) -> Wildcard . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Wildcard . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Wildcard False U8
##
## Ends in an error in state: 87.
##
## nonempty_list(sexp_clause) -> Wildcard sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> Wildcard sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Wildcard
##
## Ends in an error in state: 88.
##
## nonempty_list(sexp_clause) -> Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Val
##
## Ends in an error in state: 89.
##
## nonempty_list(sexp_clause) -> Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Val
##
## Ends in an error in state: 90.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Wildcard Val
##
## Ends in an error in state: 91.
##
## nonempty_list(sexp_pattern_item) -> Wildcard . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> Wildcard . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Wildcard
##
## Ends in an error in state: 92.
##
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor parenss(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor ident Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Wildcard Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar . sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Val
##
## Ends in an error in state: 93.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . sexp_ctor Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . parenss(ctor_pattern_item) Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . ident Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Wildcard Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor . Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Wildcard Wildcard
##
## Ends in an error in state: 94.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Wildcard . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Wildcard
##
## Ends in an error in state: 96.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote . Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Val
##
## Ends in an error in state: 97.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . sexp_ctor nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . ident nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar . Wildcard nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Wildcard Val
##
## Ends in an error in state: 98.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar Wildcard . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar Wildcard
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Constructor Val
##
## Ends in an error in state: 99.
##
## nonempty_list(sexp_pattern_item) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> sexp_ctor . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 100.
##
## nonempty_list(sexp_pattern_item) -> parenss(ctor_pattern_item) . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Val
##
## Ends in an error in state: 102.
##
## nonempty_list(sexp_pattern_item) -> ident . [ Rpar ]
## nonempty_list(sexp_pattern_item) -> ident . nonempty_list(sexp_pattern_item) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Wildcard Kebab_id Rpar Wildcard
##
## Ends in an error in state: 106.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Constructor Val
##
## Ends in an error in state: 108.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 110.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 112.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 114.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Kebab_id Val
##
## Ends in an error in state: 116.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Quote Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 118.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 120.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor sexp_ctor . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 122.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor parenss(ctor_pattern_item) . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Wildcard
##
## Ends in an error in state: 124.
##
## parenss(ctor_pattern_item) -> Lpar sexp_ctor ident . Rpar [ Wildcard U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Kebab_id Rpar Wildcard
##
## Ends in an error in state: 128.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Wildcard Kebab_id Rpar False U8
##
## Ends in an error in state: 129.
##
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar Wildcard nonempty_list(sexp_pattern_item) Rpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Constructor Wildcard
##
## Ends in an error in state: 130.
##
## nonempty_list(sexp_clause) -> sexp_ctor . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> sexp_ctor . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Constructor False U8
##
## Ends in an error in state: 131.
##
## nonempty_list(sexp_clause) -> sexp_ctor sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> sexp_ctor sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 132.
##
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Lpar Constructor Kebab_id Rpar False U8
##
## Ends in an error in state: 133.
##
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> parenss(ctor_pattern_item) sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(ctor_pattern_item) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Kebab_id Wildcard
##
## Ends in an error in state: 135.
##
## nonempty_list(sexp_clause) -> ident . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> ident . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Kebab_id False U8
##
## Ends in an error in state: 136.
##
## nonempty_list(sexp_clause) -> ident sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> ident sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Val
##
## Ends in an error in state: 140.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor . nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 142.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Constructor Kebab_id Rpar False U8
##
## Ends in an error in state: 143.
##
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar sexp_ctor nonempty_list(sexp_pattern_item) Rpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Val
##
## Ends in an error in state: 145.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) . nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 147.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Lpar Constructor Kebab_id Rpar Kebab_id Rpar False U8
##
## Ends in an error in state: 148.
##
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar parenss(ctor_pattern_item) nonempty_list(sexp_pattern_item) Rpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Val
##
## Ends in an error in state: 150.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident . nonempty_list(sexp_pattern_item) Rpar sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 152.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . sexp_expr [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar . sexp_expr nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Match False Quote Lpar Kebab_id Kebab_id Rpar False U8
##
## Ends in an error in state: 153.
##
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar sexp_expr . [ Rpar ]
## nonempty_list(sexp_clause) -> Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar sexp_expr . nonempty_list(sexp_clause) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lpar ident nonempty_list(sexp_pattern_item) Rpar sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Wildcard
##
## Ends in an error in state: 158.
##
## parenss(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_if) -> Lpar . Cond sexp_expr sexp_expr sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Wildcard
##
## Ends in an error in state: 159.
##
## parenss(lets) -> Lpar Let . maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Wildcard
##
## Ends in an error in state: 160.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar . nonempty_list(lets_let) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Wildcard
##
## Ends in an error in state: 161.
##
## parenss(sexp_decl_typed) -> Lpar . ident build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_decl_typed) -> Lpar . ident parenss(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Wildcard
##
## Ends in an error in state: 162.
##
## parenss(sexp_decl_typed) -> Lpar ident . build_sexp_type_list Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_decl_typed) -> Lpar ident . parenss(sexp_type_func) Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Quote Wildcard
##
## Ends in an error in state: 163.
##
## type_spec -> Quote . Lowercase_id [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Wildcard
##
## Ends in an error in state: 165.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ String_lit Rpar Quote Lpar Lowercase_id Kebab_id ]
## parenss(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_type_expr) Rpar [ String_lit Rpar Quote Lpar Lowercase_id Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Wildcard
##
## Ends in an error in state: 166.
##
## parenss(sexp_type_func) -> Lpar Fun . nonempty_list(sexp_type_expr) Rpar [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 168.
##
## nonempty_list(sexp_type_expr) -> parenss(sexp_type_func) . [ Rpar ]
## nonempty_list(sexp_type_expr) -> parenss(sexp_type_func) . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Wildcard
##
## Ends in an error in state: 170.
##
## type_spec -> ident . [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
## type_spec -> ident . Div_i type_spec [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Div_i Wildcard
##
## Ends in an error in state: 171.
##
## type_spec -> ident Div_i . type_spec [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id String_lit
##
## Ends in an error in state: 173.
##
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . [ Rpar ]
## nonempty_list(sexp_type_expr) -> build_sexp_type_list . nonempty_list(sexp_type_expr) [ Rpar ]
##
## The known suffix of the stack is as follows:
## build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id String_lit
##
## Ends in an error in state: 177.
##
## build_sexp_type_list -> Lpar type_spec . build_sexp_type_list Rpar [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Lpar Wildcard
##
## Ends in an error in state: 178.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 179.
##
## build_sexp_type_list -> Lpar type_spec build_sexp_type_list . Rpar [ String_lit Rpar Rbrac Quote Lpar Lowercase_id Keyword Kebab_id ]
##
## The known suffix of the stack is as follows:
## Lpar type_spec build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 181.
##
## parenss(sexp_decl_typed) -> Lpar ident parenss(sexp_type_func) . Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 183.
##
## parenss(sexp_decl_typed) -> Lpar ident build_sexp_type_list . Rpar [ U8 True String_lit Rpar Rbrack Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 185.
##
## nonempty_list(lets_let) -> parenss(sexp_decl_typed) . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> parenss(sexp_decl_typed) . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Lpar Kebab_id Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 186.
##
## nonempty_list(lets_let) -> parenss(sexp_decl_typed) sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> parenss(sexp_decl_typed) sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_decl_typed) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id Wildcard
##
## Ends in an error in state: 188.
##
## nonempty_list(lets_let) -> ident . sexp_expr [ Rpar Rbrack ]
## nonempty_list(lets_let) -> ident . sexp_expr nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Wildcard
##
## Ends in an error in state: 189.
##
## nonempty_list(lets_let) -> ident sexp_expr . [ Rpar Rbrack ]
## nonempty_list(lets_let) -> ident sexp_expr . nonempty_list(lets_let) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lpar Kebab_id False Rbrack
##
## Ends in an error in state: 191.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lpar nonempty_list(lets_let) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production nonempty_list(lets_let) -> ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Wildcard
##
## Ends in an error in state: 193.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack . nonempty_list(lets_let) Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rpar
##
## Ends in an error in state: 194.
##
## maybe_bracks(nonempty_list(lets_let)) -> Lbrack nonempty_list(lets_let) . Rbrack [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack nonempty_list(lets_let)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 189, spurious reduction of production nonempty_list(lets_let) -> ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Let Lbrack Kebab_id False Rbrack Wildcard
##
## Ends in an error in state: 196.
##
## parenss(lets) -> Lpar Let maybe_bracks(nonempty_list(lets_let)) . nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Let maybe_bracks(nonempty_list(lets_let))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Lpar Wildcard
##
## Ends in an error in state: 197.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_field_set) -> Lpar . Setf parenss(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_fun) -> Lpar . Fun ident Keyword option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_if) -> Lpar . Cond sexp_expr sexp_expr sexp_cond Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_let) -> Lpar . Val ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_let) -> Lpar . Val parenss(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Wildcard
##
## Ends in an error in state: 198.
##
## parenss(sexp_let) -> Lpar Val . ident sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_let) -> Lpar Val . parenss(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 199.
##
## parenss(sexp_let) -> Lpar Val parenss(sexp_decl_typed) . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parenss(sexp_decl_typed)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Lpar Kebab_id Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 200.
##
## parenss(sexp_let) -> Lpar Val parenss(sexp_decl_typed) sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val parenss(sexp_decl_typed) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id Wildcard
##
## Ends in an error in state: 202.
##
## parenss(sexp_let) -> Lpar Val ident . sexp_expr Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Val Kebab_id False Wildcard
##
## Ends in an error in state: 203.
##
## parenss(sexp_let) -> Lpar Val ident sexp_expr . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Val ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_i Wildcard
##
## Ends in an error in state: 205.
##
## parenss(sexp_call) -> Lpar Less_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Less_f Wildcard
##
## Ends in an error in state: 208.
##
## parenss(sexp_call) -> Lpar Less_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Less_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If Wildcard
##
## Ends in an error in state: 211.
##
## parenss(sexp_if) -> Lpar If . sexp_expr sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False Wildcard
##
## Ends in an error in state: 212.
##
## parenss(sexp_if) -> Lpar If sexp_expr . sexp_expr option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False Wildcard
##
## Ends in an error in state: 213.
##
## parenss(sexp_if) -> Lpar If sexp_expr sexp_expr . option(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar If False False False Wildcard
##
## Ends in an error in state: 215.
##
## parenss(sexp_if) -> Lpar If sexp_expr sexp_expr option(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar If sexp_expr sexp_expr option(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_i Wildcard
##
## Ends in an error in state: 217.
##
## parenss(sexp_call) -> Lpar Greater_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Greater_f Wildcard
##
## Ends in an error in state: 220.
##
## parenss(sexp_call) -> Lpar Greater_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Greater_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Wildcard
##
## Ends in an error in state: 223.
##
## parenss(sexp_fun) -> Lpar Fun . ident Keyword option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lpar Wildcard
##
## Ends in an error in state: 224.
##
## maybe_bracks(list(sexp_decl)) -> Lpar . list(sexp_decl) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

Expecting identifier

prog: Lpar Fun Lbrack Lpar Kebab_id Kebab_id Rpar Wildcard
##
## Ends in an error in state: 225.
##
## list(sexp_decl) -> parenss(sexp_decl_typed) . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_decl_typed)
##

Expecting identifier

prog: Lpar Fun Lbrack Kebab_id Wildcard
##
## Ends in an error in state: 227.
##
## list(sexp_decl) -> ident . list(sexp_decl) [ Rpar Rbrack ]
##
## The known suffix of the stack is as follows:
## ident
##

Expecting identifier

prog: Lpar Fun Lpar Kebab_id Rbrack
##
## Ends in an error in state: 229.
##
## maybe_bracks(list(sexp_decl)) -> Lpar list(sexp_decl) . Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 227, spurious reduction of production list(sexp_decl) ->
## In state 228, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Wildcard
##
## Ends in an error in state: 231.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack . list(sexp_decl) Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Kebab_id Rpar
##
## Ends in an error in state: 232.
##
## maybe_bracks(list(sexp_decl)) -> Lbrack list(sexp_decl) . Rbrack [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Constructor ]
##
## The known suffix of the stack is as follows:
## Lbrack list(sexp_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 227, spurious reduction of production list(sexp_decl) ->
## In state 228, spurious reduction of production list(sexp_decl) -> ident list(sexp_decl)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack Wildcard
##
## Ends in an error in state: 234.
##
## parenss(sexp_lambda) -> Lpar Fun maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Lbrack Rbrack False Wildcard
##
## Ends in an error in state: 235.
##
## list(stmt) -> stmt . list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

Expecting expression

prog: Lpar Fun Kebab_id Wildcard
##
## Ends in an error in state: 242.
##
## parenss(sexp_fun) -> Lpar Fun ident . Keyword option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Keyword Wildcard
##
## Ends in an error in state: 243.
##
## parenss(sexp_fun) -> Lpar Fun ident Keyword . option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Keyword String_lit Wildcard
##
## Ends in an error in state: 245.
##
## parenss(sexp_fun) -> Lpar Fun ident Keyword option(String_lit) . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident Keyword option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fun Kebab_id Keyword Lbrack Rbrack Wildcard
##
## Ends in an error in state: 246.
##
## parenss(sexp_fun) -> Lpar Fun ident Keyword option(String_lit) maybe_bracks(list(sexp_decl)) . list(stmt) Rpar [ U8 True String_lit Rpar Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun ident Keyword option(String_lit) maybe_bracks(list(sexp_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Fmt_str Wildcard
##
## Ends in an error in state: 249.
##
## parenss(fmt_str) -> Lpar Fmt_str . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fmt_str
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Equal Wildcard
##
## Ends in an error in state: 252.
##
## parenss(sexp_call) -> Lpar Equal . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Equal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do Wildcard
##
## Ends in an error in state: 255.
##
## parenss(do_block) -> Lpar Do . nonempty_list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Do
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Do False Wildcard
##
## Ends in an error in state: 256.
##
## nonempty_list(stmt) -> stmt . [ Rpar ]
## nonempty_list(stmt) -> stmt . nonempty_list(stmt) [ Rpar ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_i Wildcard
##
## Ends in an error in state: 260.
##
## parenss(sexp_call) -> Lpar Div_i . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Div_f Wildcard
##
## Ends in an error in state: 263.
##
## parenss(sexp_call) -> Lpar Div_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Div_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Cond Wildcard
##
## Ends in an error in state: 266.
##
## parenss(sexp_if) -> Lpar Cond . sexp_expr sexp_expr sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond
##

Expecting expression

prog: Lpar Cond False Wildcard
##
## Ends in an error in state: 267.
##
## parenss(sexp_if) -> Lpar Cond sexp_expr . sexp_expr sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond sexp_expr
##

Expecting expression

prog: Lpar Cond False False Wildcard
##
## Ends in an error in state: 268.
##
## parenss(sexp_if) -> Lpar Cond sexp_expr sexp_expr . sexp_cond Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Cond sexp_expr sexp_expr
##

Expecting expression representing 'else' or another condition

prog: Lpar Cond False False False Wildcard
##
## Ends in an error in state: 269.
##
## option(sexp_expr) -> sexp_expr . [ Rpar ]
## sexp_cond -> sexp_expr . sexp_expr sexp_cond [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_expr
##

Expecting expression after condition

prog: Lpar Cond False False False False Wildcard
##
## Ends in an error in state: 270.
##
## sexp_cond -> sexp_expr sexp_expr . sexp_cond [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id Wildcard
##
## Ends in an error in state: 275.
##
## parenss(sexp_call) -> Lpar Builtin_id . list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Builtin_id False Rbrack
##
## Ends in an error in state: 276.
##
## parenss(sexp_call) -> Lpar Builtin_id list(sexp_expr) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Builtin_id list(sexp_expr)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 45, spurious reduction of production list(sexp_expr) ->
## In state 46, spurious reduction of production list(sexp_expr) -> sexp_expr list(sexp_expr)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Bin_equal_f Wildcard
##
## Ends in an error in state: 278.
##
## parenss(sexp_call) -> Lpar Bin_equal_f . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Bin_equal_f
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter Wildcard
##
## Ends in an error in state: 281.
##
## parenss(sexp_pipe_tail) -> Lpar Arrow_righter . sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_righter False Wildcard
##
## Ends in an error in state: 282.
##
## parenss(sexp_pipe_tail) -> Lpar Arrow_righter sexp_expr . nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_righter sexp_expr
##

Expecting something to pipe into

prog: Lpar Arrow_right False False Wildcard
##
## Ends in an error in state: 285.
##
## nonempty_list(pipeable) -> pipeable . [ Rpar ]
## nonempty_list(pipeable) -> pipeable . nonempty_list(pipeable) [ Rpar ]
##
## The known suffix of the stack is as follows:
## pipeable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right Wildcard
##
## Ends in an error in state: 289.
##
## parenss(sexp_pipe_head) -> Lpar Arrow_right . sexp_expr nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Arrow_right False Wildcard
##
## Ends in an error in state: 290.
##
## parenss(sexp_pipe_head) -> Lpar Arrow_right sexp_expr . nonempty_list(pipeable) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Arrow_right sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar And Wildcard
##
## Ends in an error in state: 293.
##
## parenss(sexp_call) -> Lpar And . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar And
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor Wildcard
##
## Ends in an error in state: 296.
##
## parenss(sexp_field_get) -> Lpar Accessor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Accessor False Wildcard
##
## Ends in an error in state: 297.
##
## parenss(sexp_field_get) -> Lpar Accessor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Accessor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor Wildcard
##
## Ends in an error in state: 299.
##
## parenss(sexp_ctor_item) -> Lpar sexp_ctor . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Constructor False Wildcard
##
## Ends in an error in state: 300.
##
## parenss(sexp_ctor_item) -> Lpar sexp_ctor sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar Wildcard
##
## Ends in an error in state: 302.
##
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_tail) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_tail) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_tail) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_pipe_tail)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_righter False False Rpar False Wildcard
##
## Ends in an error in state: 304.
##
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_tail) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_tail) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_pipe_tail) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar Wildcard
##
## Ends in an error in state: 308.
##
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_head) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_head) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_head) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_pipe_head)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Arrow_right False False Rpar False Wildcard
##
## Ends in an error in state: 310.
##
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_head) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_pipe_head) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_pipe_head) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Kebab_id False Rpar Wildcard
##
## Ends in an error in state: 314.
##
## parenss(sexp_call) -> Lpar parenss(sexp_match) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_match) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_match) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_match)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Match False Kebab_id False Rpar False Wildcard
##
## Ends in an error in state: 316.
##
## parenss(sexp_call) -> Lpar parenss(sexp_match) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_match) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_match) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fun Lbrack Rbrack Rpar Wildcard
##
## Ends in an error in state: 320.
##
## parenss(sexp_call) -> Lpar parenss(sexp_lambda) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_lambda) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_lambda) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_lambda)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Fun Lbrack Rbrack Rpar False Wildcard
##
## Ends in an error in state: 322.
##
## parenss(sexp_call) -> Lpar parenss(sexp_lambda) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_lambda) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_lambda) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Cond False False Rpar Wildcard
##
## Ends in an error in state: 326.
##
## parenss(sexp_call) -> Lpar parenss(sexp_if) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_if) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_if) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_if)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Cond False False Rpar False Wildcard
##
## Ends in an error in state: 328.
##
## parenss(sexp_call) -> Lpar parenss(sexp_if) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_if) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_if) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar Wildcard
##
## Ends in an error in state: 332.
##
## parenss(sexp_call) -> Lpar parenss(sexp_field_get) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_field_get) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_field_get) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_field_get)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Accessor False Rpar False Wildcard
##
## Ends in an error in state: 334.
##
## parenss(sexp_call) -> Lpar parenss(sexp_field_get) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_field_get) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_field_get) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar Wildcard
##
## Ends in an error in state: 338.
##
## parenss(sexp_call) -> Lpar parenss(sexp_call) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_call) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_call) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_call)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Kebab_id Rpar False Wildcard
##
## Ends in an error in state: 340.
##
## parenss(sexp_call) -> Lpar parenss(sexp_call) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(sexp_call) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(sexp_call) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar Wildcard
##
## Ends in an error in state: 344.
##
## parenss(sexp_call) -> Lpar parenss(lets) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(lets) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(lets) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(lets)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Let Lbrack Kebab_id False Rbrack False Rpar False Wildcard
##
## Ends in an error in state: 346.
##
## parenss(sexp_call) -> Lpar parenss(lets) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(lets) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(lets) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar Wildcard
##
## Ends in an error in state: 350.
##
## parenss(sexp_call) -> Lpar parenss(do_block) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(do_block) . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(do_block) . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(do_block)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Lpar Do False Rpar False Wildcard
##
## Ends in an error in state: 352.
##
## parenss(sexp_call) -> Lpar parenss(do_block) sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar parenss(do_block) sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar parenss(do_block) sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Keyword Rbrac
##
## Ends in an error in state: 356.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar nonempty_list(sexp_record_item) . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(sexp_record_item)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 13, spurious reduction of production nonempty_list(sexp_record_item) -> Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Wildcard
##
## Ends in an error in state: 358.
##
## parenss(sexp_call) -> Lpar ident . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident . Div_i sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident . Div_i sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident . Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i Wildcard
##
## Ends in an error in state: 360.
##
## parenss(sexp_call) -> Lpar ident Div_i . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident Div_i . sexp_expr sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident Div_i . sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False Wildcard
##
## Ends in an error in state: 361.
##
## parenss(sexp_call) -> Lpar ident Div_i sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident Div_i sexp_expr . sexp_expr Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident Div_i sexp_expr . sexp_expr nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id Div_i False False Wildcard
##
## Ends in an error in state: 363.
##
## parenss(sexp_call) -> Lpar ident Div_i sexp_expr sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident Div_i sexp_expr sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident Div_i sexp_expr sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Kebab_id False Wildcard
##
## Ends in an error in state: 367.
##
## parenss(sexp_call) -> Lpar ident sexp_expr . Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
## parenss(sexp_call) -> Lpar ident sexp_expr . nonempty_list(sexp_expr) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar ident sexp_expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lbrack Lpar Fun Wildcard
##
## Ends in an error in state: 373.
##
## parenss(sexp_lambda) -> Lpar Fun . maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ Wildcard U8 True String_lit Rpar Rbrack Rbrac Quote Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Keyword Kebab_id Int I32 Float False F32 Eof Constructor Accessor ]
##
## The known suffix of the stack is as follows:
## Lpar Fun
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Wildcard
##
## Ends in an error in state: 376.
##
## maybe_bracs(nonempty_list(sexp_record_item)) -> Lpar . nonempty_list(sexp_record_item) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar . Type ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar . Defexternal ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar . Defexternal ident parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar . Type ident maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar . Type ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar . Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(do_block) -> Lpar . Do nonempty_list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(fmt_str) -> Lpar . Fmt_str nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(lets) -> Lpar . Let maybe_bracks(nonempty_list(lets_let)) nonempty_list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(lets) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_if) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_lambda) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_field_get) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_head) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_pipe_tail) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_call) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(do_block) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . ident Div_i sexp_expr sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . parenss(sexp_match) sexp_expr nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Plus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Minus_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Mult_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Div_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Less_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Greater_i nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Equal nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Plus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Minus_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Mult_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Div_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Less_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Greater_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Bin_equal_f nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . And nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Or nonempty_list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_call) -> Lpar . Builtin_id list(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_ctor_item) -> Lpar . sexp_ctor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_field_get) -> Lpar . Accessor sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_field_set) -> Lpar . Setf parenss(sexp_set_access) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_fun) -> Lpar . Fun ident Keyword option(String_lit) maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_if) -> Lpar . If sexp_expr sexp_expr option(sexp_expr) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_if) -> Lpar . Cond sexp_expr sexp_expr sexp_cond Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_lambda) -> Lpar . Fun maybe_bracks(list(sexp_decl)) list(stmt) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_let) -> Lpar . Val ident sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_let) -> Lpar . Val parenss(sexp_decl_typed) sexp_expr Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_match) -> Lpar . Match atom_or_quoted_list(sexp_expr) nonempty_list(sexp_clause) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_open) -> Lpar . Open ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_pipe_head) -> Lpar . Arrow_right sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(sexp_pipe_tail) -> Lpar . Arrow_righter sexp_expr nonempty_list(pipeable) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## sexp_expr -> Lpar . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Wildcard
##
## Ends in an error in state: 377.
##
## parenss(defalias) -> Lpar Type . ident build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defalias) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type . ident maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type . ident atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type . Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Wildcard
##
## Ends in an error in state: 378.
##
## parenss(defalias) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type Lpar . ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Wildcard
##
## Ends in an error in state: 379.
##
## parenss(defalias) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type Lpar ident . nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Wildcard
##
## Ends in an error in state: 380.
##
## nonempty_list(poly_id) -> Quote . Lowercase_id [ Rpar ]
## nonempty_list(poly_id) -> Quote . Lowercase_id nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Wildcard
##
## Ends in an error in state: 381.
##
## nonempty_list(poly_id) -> Quote Lowercase_id . [ Rpar ]
## nonempty_list(poly_id) -> Quote Lowercase_id . nonempty_list(poly_id) [ Rpar ]
##
## The known suffix of the stack is as follows:
## Quote Lowercase_id
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Wildcard
##
## Ends in an error in state: 384.
##
## parenss(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Wildcard
##
## Ends in an error in state: 385.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lpar . nonempty_list(sexp_type_decl) Rpar [ Rpar ]
## parenss(nonempty_list(sexp_ctordef)) -> Lpar . nonempty_list(sexp_ctordef) Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Wildcard
##
## Ends in an error in state: 386.
##
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Wildcard
##
## Ends in an error in state: 387.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Int Wildcard
##
## Ends in an error in state: 388.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor Int . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor Int
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Kebab_id String_lit
##
## Ends in an error in state: 390.
##
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor build_sexp_type_list . Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Wildcard
##
## Ends in an error in state: 392.
##
## nonempty_list(sexp_type_decl) -> Keyword . build_sexp_type_list [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parenss(sexp_type_func) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . Lpar Mutable build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . Lpar Mutable parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . build_sexp_type_list nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . parenss(sexp_type_func) nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . Lpar Mutable build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword . Lpar Mutable parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Wildcard
##
## Ends in an error in state: 393.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar Rbrac Keyword ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar . Mutable build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar . Mutable parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar . Mutable build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar . Mutable parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## parenss(sexp_type_func) -> Lpar . Fun nonempty_list(sexp_type_expr) Rpar [ Rpar Rbrac Keyword ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Mutable Wildcard
##
## Ends in an error in state: 394.
##
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable . build_sexp_type_list Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable . parenss(sexp_type_func) Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable . build_sexp_type_list Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable . parenss(sexp_type_func) Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar Mutable
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Mutable Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 395.
##
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable parenss(sexp_type_func) . Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable parenss(sexp_type_func) . Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar Mutable parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Mutable Lpar Fun Kebab_id Rpar Rpar Wildcard
##
## Ends in an error in state: 396.
##
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable parenss(sexp_type_func) Rpar . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable parenss(sexp_type_func) Rpar . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar Mutable parenss(sexp_type_func) Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Mutable Kebab_id String_lit
##
## Ends in an error in state: 398.
##
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable build_sexp_type_list . Rpar [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable build_sexp_type_list . Rpar nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar Mutable build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Mutable Kebab_id Rpar Wildcard
##
## Ends in an error in state: 399.
##
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable build_sexp_type_list Rpar . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword Lpar Mutable build_sexp_type_list Rpar . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword Lpar Mutable build_sexp_type_list Rpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 401.
##
## nonempty_list(sexp_type_decl) -> Keyword parenss(sexp_type_func) . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword parenss(sexp_type_func) . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id String_lit
##
## Ends in an error in state: 403.
##
## nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list . [ Rpar Rbrac ]
## nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list . nonempty_list(sexp_type_decl) [ Rpar Rbrac ]
##
## The known suffix of the stack is as follows:
## Keyword build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Wildcard
##
## Ends in an error in state: 405.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar sexp_ctor . Int Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Lpar Wildcard
##
## Ends in an error in state: 406.
##
## build_sexp_type_list -> Lpar . type_spec build_sexp_type_list Rpar [ Rpar ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor build_sexp_type_list Rpar [ Rpar Lpar Constructor ]
## parenss(sexp_ctordef_item) -> Lpar . sexp_ctor Int Rpar [ Rpar Lpar Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Constructor Constructor Wildcard
##
## Ends in an error in state: 407.
##
## nonempty_list(sexp_ctordef) -> sexp_ctor . [ Rpar ]
## nonempty_list(sexp_ctordef) -> sexp_ctor . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## sexp_ctor
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Lpar Constructor Kebab_id Rpar Wildcard
##
## Ends in an error in state: 408.
##
## nonempty_list(sexp_ctordef) -> parenss(sexp_ctordef_item) . [ Rpar ]
## nonempty_list(sexp_ctordef) -> parenss(sexp_ctordef_item) . nonempty_list(sexp_ctordef) [ Rpar ]
##
## The known suffix of the stack is as follows:
## parenss(sexp_ctordef_item)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lpar Keyword Kebab_id Rbrac
##
## Ends in an error in state: 411.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lpar nonempty_list(sexp_type_decl) . Rpar [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lpar nonempty_list(sexp_type_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
## In state 403, spurious reduction of production nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Wildcard
##
## Ends in an error in state: 415.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lbrac . nonempty_list(sexp_type_decl) Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id Rpar
##
## Ends in an error in state: 416.
##
## maybe_bracs(nonempty_list(sexp_type_decl)) -> Lbrac nonempty_list(sexp_type_decl) . Rbrac [ Rpar ]
##
## The known suffix of the stack is as follows:
## Lbrac nonempty_list(sexp_type_decl)
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
## In state 403, spurious reduction of production nonempty_list(sexp_type_decl) -> Keyword build_sexp_type_list
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Lbrac Keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 421.
##
## parenss(defrecord) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar maybe_bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Kebab_id String_lit
##
## Ends in an error in state: 423.
##
## parenss(defalias) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Lpar Kebab_id Quote Lowercase_id Rpar Constructor Wildcard
##
## Ends in an error in state: 425.
##
## parenss(defvariant) -> Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type Lpar ident nonempty_list(poly_id) Rpar atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Wildcard
##
## Ends in an error in state: 427.
##
## parenss(defalias) -> Lpar Type ident . build_sexp_type_list Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defrecord) -> Lpar Type ident . maybe_bracs(nonempty_list(sexp_type_decl)) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defvariant) -> Lpar Type ident . atom_or_list(sexp_ctordef) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Lbrac Keyword Kebab_id Rbrac Wildcard
##
## Ends in an error in state: 428.
##
## parenss(defrecord) -> Lpar Type ident maybe_bracs(nonempty_list(sexp_type_decl)) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident maybe_bracs(nonempty_list(sexp_type_decl))
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Kebab_id String_lit
##
## Ends in an error in state: 430.
##
## parenss(defalias) -> Lpar Type ident build_sexp_type_list . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Type Kebab_id Constructor Wildcard
##
## Ends in an error in state: 432.
##
## parenss(defvariant) -> Lpar Type ident atom_or_list(sexp_ctordef) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Type ident atom_or_list(sexp_ctordef)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Wildcard
##
## Ends in an error in state: 434.
##
## parenss(sexp_open) -> Lpar Open . ident Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Open Kebab_id Wildcard
##
## Ends in an error in state: 435.
##
## parenss(sexp_open) -> Lpar Open ident . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Open ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Wildcard
##
## Ends in an error in state: 437.
##
## parenss(defexternal) -> Lpar Defexternal . ident build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar Defexternal . ident parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Wildcard
##
## Ends in an error in state: 438.
##
## parenss(defexternal) -> Lpar Defexternal ident . build_sexp_type_list option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
## parenss(defexternal) -> Lpar Defexternal ident . parenss(sexp_type_func) option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar Wildcard
##
## Ends in an error in state: 439.
##
## parenss(defexternal) -> Lpar Defexternal ident parenss(sexp_type_func) . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parenss(sexp_type_func)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Lpar Fun Kebab_id Rpar String_lit Wildcard
##
## Ends in an error in state: 440.
##
## parenss(defexternal) -> Lpar Defexternal ident parenss(sexp_type_func) option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident parenss(sexp_type_func) option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id Rbrac
##
## Ends in an error in state: 442.
##
## parenss(defexternal) -> Lpar Defexternal ident build_sexp_type_list . option(String_lit) Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 170, spurious reduction of production type_spec -> ident
## In state 167, spurious reduction of production build_sexp_type_list -> type_spec
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: Lpar Defexternal Kebab_id Kebab_id String_lit Wildcard
##
## Ends in an error in state: 443.
##
## parenss(defexternal) -> Lpar Defexternal ident build_sexp_type_list option(String_lit) . Rpar [ U8 True String_lit Minus_i Minus_f Lpar Lowercase_id Lbrack Lbrac Kebab_id Int I32 Float False F32 Eof Constructor ]
##
## The known suffix of the stack is as follows:
## Lpar Defexternal ident build_sexp_type_list option(String_lit)
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: False Wildcard
##
## Ends in an error in state: 445.
##
## list(top_item) -> top_item . list(top_item) [ Eof ]
##
## The known suffix of the stack is as follows:
## top_item
##

<YOUR SYNTAX ERROR MESSAGE HERE>

