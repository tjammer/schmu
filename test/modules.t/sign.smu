signature {
  type t = int
  type use_hidden_type
  type abstr

  val t : int
  val ext : fun (string/cstr, int) -> unit
  val int : fun (int) -> unit
  val poly_int : fun ('a) -> 'a
  val create_use_hidden : fun () -> use_hidden_type
  val create_abstr : fun () -> abstr
}
external ext : fun (string/cstr, int) -> unit = "printf"
fun int(i : int) {
  fmt/println(fmt/int, i)
}
fun poly_int(a) {copy(a)}

-- type t is usable here
let t : t = 200

fun hidden(a) {
  fmt/(println(int, a + 2))
}
type hidden_type = int
type abstr = int

type another_hidden_type = { a : int }
type use_hidden_type = { hidden : another_hidden_type }

fun create_use_hidden () {
  { hidden = { a = 12 } }
}

fun create_abstr () {
  10
}
