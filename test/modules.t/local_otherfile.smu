fun test():
  print("hey test")

module local:
  signature:
    type t
    val test : () -> unit
    val poly_test : ('a) -> unit
    val value : string
  module nested:
    type t = unit
  type t = int
  fun test():
    print("hey thing")
  fun poly_test(a):
    print(fmt("hey poly ", a))
  let value = "test"

test()

local/test()
local/poly_test("test")

module nosig:
  type t = {a : int}
  type other = int
  module nested:
    fun nested():
      print("i'm nested")
    type t = float
  let c : nested/t = 10.0

module aliased = nosig/nested

let test : nosig/t = {a = 10}
ignore(test)

nosig/nested/nested()
