(defn test () (print "hey test"))

(module local
  (signature
    (type t)
    (def test (fun unit unit))
    (def poly-test (fun 'a unit))
    (def value string))
  (module nested ())
  (type t int)
  (defn test () (print "hey thing"))
  (defn poly-test (a) (print (fmt-str "hey poly " a)))
  (def value "test"))

(test)

(local/test)
(local/poly-test "test")

(module nosig
  (type t {:a int})
  (type other int)
  (module nested
    (defn nested () (print "i'm nested"))
    (type t float))
  (def [c nested/t] 10.0))

(module aliased nosig/nested)

(def [test nosig/t] {:a 10})
(ignore test)

(nosig/nested/nested)
