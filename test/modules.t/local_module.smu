fun test() {println("hey test")}

module local {
  signature {
    type t
    val test : () -> unit
    val poly_test : ('a) -> unit
    val value : string
  }
  module nested {
    type t = unit
  }
  type t = int
  fun test() {
    println("hey thing")
  }
  fun poly_test(a) {
    println(fmt("hey poly ", a))
  }
  let value = "test"
  ignore(value)
}
test()

local/test()
local/poly_test("test")

module nosig {
  type t = {a : int}
  type other = int
  module nested {
    fun nested() {
      println("i'm nested")
  }}
}

let test : nosig/t = {a = 10}
ignore(test)

nosig/nested/nested()
