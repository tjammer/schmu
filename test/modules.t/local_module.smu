(defn test [] (print "hey test"))

(module local
  (signature
    (type t)
    (def test (fun unit unit))
    (def poly-test (fun 'a unit))
    --(def value string)
    )
  (module nested)
  (type t int)
  (defn test [] (print "hey thing"))
  (defn poly-test [a] (print (fmt-str "hey poly " a)))
  -- (def value "test")
  )

(test)

(local/test)
(local/poly-test "test")

-- (module nosig
--   (type t {:a float}))

-- (def (test nosig/t) {:a 10.0})

(module nosig
  (type t {:a int})
  (module nested
    (type t u8)))

(def (test nosig/t) {:a 10})
(ignore test)
-- (def (test nosig/nested/t) {:a 10})
-- (ignore test)
