module outer:
  type t = {i : int}

module type sig:
  type t
  val add : (t, t) -> t

functor make(m : sig):
  fun add_twice(a, b): m/add(m/add(a, b), b)

module outa : sig:
  type t = outer/t
  fun add(a, b): {i = a.i + b.i}

module inta : sig:
  type t = int
  fun add(a, b): a + b

module floata : sig:
  signature:
    type t = float
    val add : (t, t) -> t
  type t = float
  fun add(a, b): a +. b

module somerec : sig:
  type t = {a : int, b : int}
  fun add(a, b):
    {a = a.a + b.a, b = a.b + b.b}

module intadder = make(inta)
module floatadder = make(floata)
module recadder = make(somerec)
module outeradder = make(outa)

print(fmt(intadder/add_twice(1, 2)))
print(fmt(floatadder/add_twice(1.0, 2.0)))
