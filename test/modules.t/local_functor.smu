module Outer:
  type t = {i : int}

module type Sig:
  type t
  val add : (t, t) -> t

functor Make(M : Sig):
  fun add_twice(a, b): M.add(M.add(a, b), b)

module Outa : Sig:
  type t = Outer.t
  fun add(a, b): {i = a.i + b.i}

module Inta : Sig:
  type t = int
  fun add(a, b): a + b

module Floata : Sig:
  signature:
    type t = float
    val add : (t, t) -> t
  type t = float
  fun add(a, b): a +. b

module Somerec : Sig:
  type t = {a : int, b : int}
  fun add(a, b):
    {a = a.a + b.a, b = a.b + b.b}

module Intadder = Make(Inta)
module Floatadder = Make(Floata)
module Recadder = Make(Somerec)
module Outeradder = Make(Outa)

print(fmt(Intadder.add_twice(1, 2)))
print(fmt(Floatadder.add_twice(1.0, 2.0)))
