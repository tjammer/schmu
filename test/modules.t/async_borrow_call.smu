signature {
  type promise['a]
  type future['a]

  val return : fun (mov 'a) -> future['a]
  val wait : fun () -> (future['a], promise['a])
  val resolve : fun (mut promise['a], mov 'a) -> unit

  val bind : fun (future['a], mov fun ('a) -> future['b]) -> future['b]
  val iter : fun (future['a], fun ('a) -> unit) -> unit
  val resolved : fun (future['a]) -> bool

  val join : fun (array[future['a]]) -> future[unit]
  val join_bind : fun (array[future['a]], mov fun (array['a]) -> future['b]) -> future['b]

  val extract : fun (future['a], fun ('a) -> 'b) -> option['b]
}

type prom_state['a] =
  | Pending
  | Queued1(fun ('a) -> unit)
  | Queued_n(array[fun ('a) -> unit])
  | Resolved('a)
  | Link(rc[prom_state])

type promise['a] = rc[prom_state['a]]
type future['a] = promise['a]

fun return(mov v) { rc/create(mov Resolved(v)) }

fun wait() {
  let pr = rc/create(mov Pending)
  (copy(pr), pr)
}

fun rec resolve(mut p, mov v) {
  let mut inner <- rc/write(mut p)
  match mut inner {
    Resolved(_) -> ()
    Pending -> {
      mut inner = Resolved(v)
    }
    Queued1(cb) -> {
      let cb = mov cb
      mut inner = Resolved(v)
      -- make sure promise is resolved when callback is called
      match inner { Resolved(v) -> cb(v) | _ -> () }
    }
    Queued_n(cbs) -> {
      let cbs = mov cbs
      -- make sure promise is resolved when callback is called
      mut inner = Resolved(v)
      match inner {
        Resolved(v) -> array/iter(cbs) |> iter/iter(fun cb { cb(v) })
        | _ -> ()
      }
    }
    Link(mut pr) -> resolve(mut pr, v)
  }
}

fun add_cb(mov fn) {
  let fut, pr = wait()
  let pr = mov pr -- move out because we have a bug in the borrow checker
  let weak = rc/to_weak(pr)
  fun cb(v) {
    let mut new = fn(v)
    let mut newcpy = copy(new) -- needed to resolve newcpy after linking pr

    -- this works because future and promise are really the same type
    fun rec aux(mut inner) {
      match mut inner {
        Resolved(v) -> {
          match rc/of_weak(weak) {
            Some(pr) -> {
              let v = mov v
              mut inner = Link(copy(pr))
              resolve(mut newcpy, mov v)
            }
            None -> ()
          }
        }
        Pending -> {
          -- the (user-) returned future is pending. Swap our return future for
          -- the user one, so when the user promise is resolved, our registered
          -- callbacks are called
          let cpy = copy(pr)
          mut inner = Link(cpy)
        }
        Link(mut pr) -> rc/write(mut pr, aux)
        Queued1(_) -> failwith("TODO 1")
        Queued_n(_) -> failwith("TODO n")
      }
    }
    rc/write(mut new, aux)
  }
  (fut, cb)
}

fun rec bind(fut, mov fn) {
  -- we make a copy to mutateate the future. [fut] is really an rc under the hood,
  -- so we can do this.
  let mut cp = copy(fut)
  let mut cp <- rc/write(mut cp)
  match mut cp {
    Pending -> {
      let fut, cb = add_cb(mov fn)
      mut cp = Queued1(cb)
      fut
    }
    Queued1(cb1) -> {
      let fut, cb = add_cb(mov fn)
      mut cp = Queued_n([cb1, cb])
      fut
    }
    Queued_n(mut cbs) -> {
      println("qn")
      let fut, cb = add_cb(mov fn)
      array/push(mut cbs, mov cb)
      fut
    }
    Resolved(v) -> {
      fn(v)
    }
    Link(mut pr) -> bind(pr, fn)
  }
}

fun add_cb(mut pr, mut cnt, len) {
  fun _ [pr, cnt, len] {
    rc/write(mut cnt, fun mut cnt {
      mut cnt = cnt + 1
      if cnt == len {
        resolve(mut pr, ())
      }
    })
  }
}

fun join(futs) {
  let len = array/length(futs)
  let fut, pr = wait()
  let mut cnt = rc/create(0)
  let mut pr = mov pr

  -- TODO Defining a cb here and copying it with copy() doesn't work. Copy is
  -- probably broken for functions.

  fun rec aux(mut cp) {
    match mut cp {
      Pending -> mut cp = Queued1(add_cb(mut pr, mut cnt, len))
      Queued1(cb1) -> mut cp = Queued_n([cb1, add_cb(mut pr, mut cnt, len)])
      Queued_n(mut cbs) -> array/push(mut cbs, add_cb(mut pr, mut cnt, len))
      Resolved(_) -> rc/write(mut cnt, fun mut cnt { mut cnt = cnt + 1 })
      Link(mut pr) -> rc/write(mut pr, aux)
    }
  }
  array/iter(futs) |> iter/iter(fun fut {
    let mut cp = copy(fut)
    rc/write(mut cp, aux)
  })


  rc/read(cnt, fun cnt {
    if cnt == len {
      resolve(mut pr, ())
    }
  })

  fut
}

fun resolved(fut) {
  fun rec aux(fut) {
    match fut {
      Resolved(_) -> true
      Queued1(_) | Queued_n(_) | Pending -> false
      Link(pr) -> rc/read(pr, aux)
    }
  }
  rc/read(fut, aux)
}

fun iter(fut, fn) {
  fun rec aux(fut) {
    match fut {
      Resolved(v) -> fn(v)
      Queued1(_) | Queued_n(_) | Pending -> ()
      Link(pr) -> rc/read(pr, aux)
    }
  }
  rc/read(fut, aux)
}


fun add_cnt_cb(mov final, mut cnt, len) {
  fun _ [cnt] {
    rc/write(mut cnt, fun mut cnt {
      mut cnt = cnt + 1
      if cnt == len {
        rc/read(final, fun final { final() })
      }
    })
  }
}

fun add_final(futs, mut pr, mov fn) {
  -- futures are cheap to copy
  let mut futs = array/map(futs, fun f { rc/to_weak(f) })
  fun () [pr] {
    -- temporarily move values out of futures and put them back after the cb has
    -- finished
    let mut tmp = array/create(array/length(futs))
    let mut i = 0
    array/map_inplace(mut futs, fun mut f {
      let mut f = rc/of_weak(f)
      match mut f {
        Some(mut f) -> {
          rc/write(mut f, fun mut f {
            match mut f {
              Resolved(v) -> {
                array/push(mut tmp, v)
                -- so we can move it out. Will be re-set after the callback
                -- [fn] has been calleda
                mut f = Pending
                mut i = i + 1
              }
              _ -> failwith("Not resolved in join_bind")
            }
          })

        }
        None -> ()
      }
    })

    let mut new = fn(tmp)

    -- put values back in
    fun rec aux() {
      match array/pop_back(mut tmp) {
        None -> ()
        Some(v) -> {
          let index = array/length(tmp)
          let mut f = rc/of_weak(futs.[index])
          match mut f {
            Some(mut f) -> {
              let mut f <- rc/write(mut f)
              mut f = Resolved(v)
            }
            None -> ()
          }
          aux()
        }
      }
    }
    aux()

    let mut newcpy = copy(new)  -- needed to resolve newcpy after linking pr
    -- copied from [add_cb] of bind
    -- this works because future and promise are really the same type
    fun rec aux(mut new) {
      match mut new {
        Resolved(v) -> {
          let v = mov v
          mut new = Link(copy(pr))
          resolve(mut newcpy, mov v)
        }
        Pending -> {
          -- the (user-) returned future is pending. Swap our return future for
          -- the user one, so when the user promise is resolved, our registered
          -- callbacks are called
          let cpy = copy(pr)
          mut new = Link(cpy)
        }
        Link(mut pr) -> rc/write(mut pr, aux)
        Queued1(_) -> failwith("TODO 1")
        Queued_n(_) -> failwith("TODO n")
      }
    }
    rc/write(mut new, aux)
  }
}

fun join_bind(futs, mov fn) {
  let len = array/length(futs)
  let fut, pr = wait()
  let mut cnt = rc/create(0)
  let mut pr = mov pr

  -- TODO Defining a cb here and copying it with copy() doesn't work. Copy is
  -- probably broken for functions.
  let final = rc/create(add_final(futs, mut pr, fn))

  fun rec aux(mut cp) {
    match mut cp {
      Pending -> mut cp = Queued1(add_cnt_cb(copy(final), mut cnt, len))
      Queued1(cb1) -> mut cp = Queued_n([cb1, add_cnt_cb(copy(final), mut cnt, len)])
      Queued_n(mut cbs) -> array/push(mut cbs, add_cnt_cb(copy(final), mut cnt, len))
      Resolved(_) -> rc/write(mut cnt, fun mut cnt { mut cnt = cnt + 1 })
      Link(mut pr) -> rc/write(mut pr, aux)
    }
  }
  array/iter(futs) |> iter/iter(fun fut {
    let mut cp = copy(fut)
    rc/write(mut cp, aux)
  })

  rc/read(cnt, fun cnt {
    if cnt == len {
      rc/read(final, fun f { f() })
    }
  })


  fut
}

fun extract(fut, f) {
  fun rec aux(fut) {
    match fut {
      Resolved(v) -> Some(f(v))
      Pending | Queued1(_) | Queued_n(_) -> None
      Link(pr) -> rc/read(pr, aux)
    }
  }
  rc/read(fut, aux)
}
