signature
{
  type t['a]

  val create : fun () -> t['a]
  val singleton : fun (mov 'a) -> t['a]
  val length : fun (t['a]) -> int
  val push : fun (mut t['a], mov 'a) -> unit
  val iter : fun (t['a], fun ('a) -> unit) -> unit
}

type t['a] = option[array['a]]

fun create() {
  None
}

fun singleton(mov value) {Some([value])}

fun length(arr) { match arr {
  None -> 0
  Some(arr) -> array/length(arr)
}}

fun push(mut arr, mov value){ match mut arr {
  None -> mut arr = Some([value])
  Some(mut arr) -> array/push(mut arr, mov value)
}}

fun iter(arr, f) {
  match arr {
    None -> ()
    Some(arr) -> array/iter(arr) |> iter/iter(f)
  }
}
