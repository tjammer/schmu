signature
{
  type t['a]

  val create : () -> t['a]
  val singleton : ('a!) -> t['a]
  val length : (t['a]) -> int
  val push : (t['a]&, 'a!) -> unit
  val iter : (t['a], ('a) -> unit) -> unit
}

type t['a] = option[array['a]]

fun create() {
  None
}

fun singleton(value!) {Some([value])}

fun length(arr) { match arr {
  None: 0
  Some(arr): array/length(arr)
}}

fun push(arr&, value!){ match &arr {
  None: &arr = Some([value])
  Some(arr&): array/push(&arr, !value)
}}

fun iter(arr, f) {
  match arr {
    None: ()
    Some(arr): array/iter(arr, f)
  }
}
