module type empty_t {
  type t
}


fun use_concrete(a) {
    ignore(a)
  fun concrete(a): a + 1
  concrete(0)
  }

functor define ( m : empty_t ) {
  signature {
    val use_this : ('a) -> int
    val dont_use : (int) -> int
  }
  fun use_this(a): use_concrete(a)
  fun dont_use(a): a + 1
}

module empty {
  type t = int
}

{
  use_concrete(1.0) |> ignore
}

module applied = define(empty)

let aliased = applied/dont_use
