(external printi (fun int unit))

(type int_wrap {:dat int :b int :c int})

(type (test 'a) {:int_wrap 'a})

(type (mut 'a) {:wrapped& 'a})

(defn test_thing []
  (def test {:int_wrap {:dat 2 :b 0 :c 0}})
  (defn vector_loop [i]
    (if (= i 10)
      (.int_wrap test)
      (vector_loop (+ i 1))))
  (vector_loop 0))

(defn test_thing_mut []
  (def test& {:wrapped {:dat 2 :b 0 :c 0}})
  (defn vector_loop [i]
    (if (= i 10)
      ()
      (do
        (set &(.wrapped test) {:dat (+ (.dat (.wrapped test)) 1) :b 0 :c 0})
        (vector_loop (+ i 1)))))
  (vector_loop 0)
  (.wrapped test))

(-> (.dat (test_thing))
    printi)
(-> (.dat (test_thing_mut))
    printi)
