type cstr = ptr(u8)
type string = { cstr : cstr, length : int }
type vector('a) = { mutable data : ptr('a), len : int, cap : int }
type foo = { x : int }
type container = { index : int, vec : vector(int) }

x = { x = 1 }

-- These are freed at the end of the program
vec = ["hey", "young", "world"]
vec = [x, {x = 2}, {x = 3}]


-- Vec is only alive inside the function and should be freed there
fun vec_inside() = do
  vec = [x, {x = 2}, {x = 3}]
  -- Make sure we can call realloc
  vec.data <- __realloc(vec.data, 9)
  in ()

-- Vec is returned and should be freed in its parent scope
fun make_vec() = do
  x = { x = 23 }
  in [x, {x = 2}, {x = 3}]

fun inner_parent_scope() = do
  vec = make_vec()
  in ()

-- Vec can be propagated out through multiple function calls
fun nest_fns() =
  make_vec()

fun make_nested_vec() = do
  nested = [[0, 1], [2, 3]]
  in nested

fun nest_allocs() =
  make_nested_vec()

-- Should be freed locally
fun nest_local() = do
  nested = [[0, 1], [2, 3]]
  in ()

-- Records of vectors
fun record_of_vecs() = do
  vec = [1, 2]
  cont = { index = 1, vec = vec }
  in cont

-- Vectors of records (of vectors)
fun vec_of_records() =
  [record_of_vecs(), record_of_vecs()]


vec = make_vec()
vec_inside()
inner_parent_scope()
normal = nest_fns()

nested = [[0, 1], [2, 3]]
nested.data <- __realloc(nested.data, 9)
nested = make_nested_vec()
nested = nest_allocs()
nest_local()

rec_of_vec = { index = 12, vec = [1, 2]}
rec_of_vec = record_of_vecs()

vec_of_rec = [record_of_vecs(), record_of_vecs()]
vec_of_rec = vec_of_records()
0
