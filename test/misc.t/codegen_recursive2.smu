module async {
  signature {
    type promise['a]
    type future['a]
    val wait : fun () -> (future['a], promise['a])
    val resolve : fun (mut promise['a], mov 'a) -> unit
    val join : fun (array[future['a]]) -> future[unit]
  }
  type prom_state['a] =
  Pending
  | Queued1(fun ('a) -> unit)
  | Queued_n(array[fun ('a) -> unit])
  | Resolved('a)
  | Other(rc[prom_state])
  type promise['a] = rc[prom_state['a]]
  type future['a] = promise[a]
  fun wait() {
    let pr = rc/create(Pending)
    copy(pr), pr
  }
  fun rec resolve(mut p, mov v) {
    let mut inner <- rc/write(mut p)
    match mut inner {
      Resolved(_) -> ()
      Pending ->
      mut inner = Resolved(v)
      Queued1(_b) ->
      mut inner = Resolved(v)
      Queued_n(_cbs) ->
      mut inner = Resolved(v)
      Other(mut pr) -> resolve(mut pr, v)
    }
  }
  fun add_cb(mut pr, mut cnt, _len) {
    fun _ [pr, cnt] {
      rc/write(mut cnt, fun mut _cnt {
        resolve(mut pr, ())
      })
    }
  }
  fun join(futs) {
    let len = 0
    let fut, pr = wait()
    let mut cnt = rc/create(0)
    let mut pr = mov pr
    fun rec aux(mut cp) {
      match mut cp {
        Pending -> mut cp = Queued1(add_cb(mut pr, mut cnt, len))
        Queued1(_b1) -> mut cp = Queued_n([])
        Queued_n(mut cbs) -> array/push(mut cbs, add_cb(mut pr, mut cnt, len))
        Resolved(_) -> rc/write(mut cnt, fun mut cnt {mut cnt = 1})
        Other(mut pr) -> rc/write(mut pr, aux)
      }
    }
    -- the lambda passed it [iter/iter] closes over aux, but the type of aux
    -- will only be known in the body of the lambda. Additionally, we have to
    -- monomorphize the closure.
    array/iter(futs) |> iter/iter(fun fut {
      let mut cp = copy(fut)
      rc/write(mut cp, aux)
    })
    fut
  }
}
{
  let f1, _p1 = async/wait()
  let f2, _p2 = async/wait()
  let f3, p3 = async/wait()
  let mut p3 = mov p3
  async/resolve(mut p3, 0)
  let _ = async/join([f1, f2, f3])
  0
}
