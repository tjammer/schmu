module async {
  signature {
    type promise['a]
    type future['a]
    val wait : fun () -> (future['a], promise['a])
    val resolve : fun (promise['a]&, 'a!) -> unit
    val join : fun (array[future['a]]) -> future[unit]
  }
  type prom_state['a] =
  Pending
  | Queued1(fun ('a) -> unit)
  | Queued_n(array[fun ('a) -> unit])
  | Resolved('a)
  | Other(rc[prom_state])
  type promise['a] = rc[prom_state['a]]
  type future['a] = promise[a]
  fun wait() {
    let pr = rc/create(Pending)
    copy(pr), pr
  }
  fun rec resolve(p&, v!) {
    let inner& <- rc/mut(&p)
    match &inner {
      Resolved(_) -> ()
      Pending ->
      &inner = Resolved(v)
      Queued1(_b) ->
      &inner = Resolved(v)
      Queued_n(_cbs) ->
      &inner = Resolved(v)
      Other(pr&) -> resolve(&pr, v)
    }
  }
  fun add_cb(pr&, cnt&, _len) {
    fun _ [pr, cnt] {
      rc/mut(&cnt, fun _cnt& {
        resolve(&pr, ())
      })
    }
  }
  fun join(futs) {
    let len = 0
    let fut, pr = wait()
    let cnt& = rc/create(0)
    let pr& = !pr
    fun rec aux(cp&) {
      match &cp {
        Pending -> &cp = Queued1(add_cb(&pr, &cnt, len))
        Queued1(_b1) -> &cp = Queued_n([])
        Queued_n(cbs&) -> array/push(&cbs, add_cb(&pr, &cnt, len))
        Resolved(_) -> rc/mut(&cnt, fun cnt& {&cnt = 1})
        Other(pr&) -> rc/mut(&pr, aux)
      }
    }
    -- the lambda passed it [iter/iter] closes over aux, but the type of aux
    -- will only be known in the body of the lambda. Additionally, we have to
    -- monomorphize the closure.
    array/iter(futs) |> iter/iter(fun fut {
      let cp& = copy(fut)
      rc/mut(&cp, aux)
    })
    fut
  }
}
{
  let f1, _p1 = async/wait()
  let f2, _p2 = async/wait()
  let f3, p3 = async/wait()
  let p3& = !p3
  async/resolve(&p3, 0)
  let _ = async/join([f1, f2, f3])
  0
}
