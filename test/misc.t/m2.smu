-- (mod/extr-a {:b 10})

(rec
 (defn even? [i]
   (match i
     (0 true)
     (1 false)
     (n (odd? (- n 1)))))
 (defn odd? [i]
   (match i
     (0 false)
     (1 true)
     (n (even? (- n 1))))))

-- (print (fmt-str (odd? 1)))
-- (print (fmt-str (odd? 100)))
-- (print (fmt-str (even? 100)))

(def cnt& 0)

(rec
 (defn pop [arr&]
   (print "pop")
   (set &cnt (+ cnt 1))
   (array-drop-back &arr)
   (pop-all &arr))
 (defn pop-all [arr&]
   (if (= (array-length arr) 0)
     ()
     (pop &arr))))

-- (val arr& [0 1 2 3])
-- (pop-all &arr)
-- (print (fmt-str (array-length arr)))

(defn test [i]
  (print "wrong")
  i)

(defn test [i]
  (print "right")
  i)
