(type view {:buf string :start int :len int})
(type (success 'a) {:rem view :mtch 'a})
(type (parse-result 'a) ((#ok (success 'a)) (#err view)))

(defn view-of-string (str)
  {:buf (copy str) :start 0 :len (string/len str)})

(defn ch (buf)
  (if (char-equal (string/get buf.buf buf.start) ' ')
    (#ok {:mtch {@buf :buf (copy buf.buf) :len 1}
          :rem {:buf (copy buf.buf) :start (+ 1 buf.start) :len (- buf.len 1)}})
    (#err (copy buf))))

(defn many-count (buf)
  (defn aux (rem cnt)
    (match (ch rem)
      ((#ok r)
       -- r.rem is moved out of the result.
       -- The mtch part is still alive and needs to be freed
       (aux r.rem (+ cnt 1)))
      ((#err _) (#ok {:rem (copy rem) :mtch cnt}))))
  (aux buf 0))

(def s (fmt-str " "))

(def inp (view-of-string s))
(ignore (many-count inp))
