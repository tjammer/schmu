type view = {buf : string, start : int, len : int}
type success['a] = {rem : view, mtch : 'a}
type parse_result['a] = Ok(success['a]) | Err(view)

fun view_of_string(str) {
  {buf = copy(str), start = 0, len = string/len(str)}
}

fun ch(buf) {
  if char_equal(string/get(buf.buf, buf.start), ' ') {
    Ok({mtch = {buf with buf = copy(buf.buf), len = 1},
        rem = {buf = copy(buf.buf), start = buf.start + 1, len = buf.len - 1}})
  } else {
    Err(copy(buf))
  }
}

fun many_count(buf) {
  fun rec aux(rem, cnt) {
    match ch(rem) {
      Ok(r):
        -- r.rem is moved out of the result.
        -- The mtch part is still alive and needs to be freed
        aux(r.rem, cnt + 1)
      Err(_): Ok({rem = copy(rem), mtch = cnt})
  }}
  aux(buf, 0)
}
let s = fmt(" ")

let inp = view_of_string(s)
ignore(many_count(inp))
