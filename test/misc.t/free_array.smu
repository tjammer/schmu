type foo = {x : int}
type container = {index : int, arr : array(int)}

let x = {x = 1}

-- These are freed at the end of the program
let arr = ["hey", "young", "world"]
let arr = [copy(x), {x = 2}, {x = 3}]

-- Arr is only alive inside the function and should be freed there
fun arr_inside():
  let arr& = [copy(x), {x = 2}, {x = 3}]
  -- Make sure we can call realloc
  Array.push(&arr, !{x = 12})

-- Arr is returned and should be freed in its parent scope
fun make_arr():
  let x = {x = 23}
  [x, {x = 2}, {x = 3}]

fun inner_parent_scope():
  ignore(make_arr())

-- Arr can be propagated out through multiple function calls
fun nest_fns(): make_arr()

fun make_nested_arr():
  let nested = [[0, 1], [2, 3]]
  nested

fun nest_allocs():
  make_nested_arr()

-- Should be freed locall
fun nest_local():
  ignore([[0, 1], [2, 3]])

-- Records of arrtors
fun record_of_arrs():
  let arr = [1, 2]
  {index = 1, arr}

-- Arrtors of records (of arrtors)
fun arr_of_records():
  [record_of_arrs(), record_of_arrs()]

let arr = make_arr()
arr_inside()
inner_parent_scope()
let normal = nest_fns()

let nested& = [[0, 1], [2, 3]]
Array.push(&nested, ![4, 5])
let nested = make_nested_arr()
let nested = nest_allocs()
nest_local()

let rec_of_arr = {index = 12, arr = [1, 2]}
let rec_of_arr = record_of_arrs()

let arr_of_rec = [record_of_arrs(), record_of_arrs()]
let arr_of_rec = arr_of_records()
0
