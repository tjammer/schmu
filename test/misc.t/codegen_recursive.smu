type prom_state['a] =
  | Pending
  | Queued1(fun ('a) -> unit)
  | Resolved(a)
  | Other(rc[prom_state])

fun wait() {
  let pr = rc/create(Pending)
  copy(pr), pr
}

fun rec resolve(mut p, mov v) {
  let mut inner <- rc/write(mut p)
  match mut inner {
    Resolved(_) -> ()
    Pending ->
    mut inner = Resolved(v)
    Queued1(_b) ->
    mut inner = Resolved(v)
    Other(mut pr) -> resolve(mut pr, mov v)
  }
}

fun add_cb(mut pr, mut cnt, _len) {
  fun _ [pr, cnt] {
    rc/write(mut cnt, fun mut _cnt {
      resolve(mut pr, 0)
    })
  }
}

{
  let len , pr = wait()
  let mut cnt = rc/create(0)
  let mut pr = mov pr
  fun rec _aux(mut cp) {
    match mut cp {
      Pending -> mut cp = Queued1(add_cb(mut pr, mut cnt, len))
      Queued1(_b1) -> ()
      Resolved(_) -> rc/write(mut cnt, fun mut cnt { mut cnt = 1 })
      Other(mut pr) -> rc/write(mut pr, _aux)
    }
  }
  0
}
