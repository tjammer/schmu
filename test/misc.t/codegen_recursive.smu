type prom_state['a] =
  | Pending
  | Queued1(fun ('a) -> unit)
  | Resolved(a)
  | Other(rc[prom_state])

fun wait() {
  let pr = rc/create(Pending)
  copy(pr), pr
}

fun rec resolve(p&, v!) {
  let inner& <- rc/mut(&p)
  match &inner {
    Resolved(_) -> ()
    Pending ->
    &inner = Resolved(v)
    Queued1(_b) ->
    &inner = Resolved(v)
    Other(pr&) -> resolve(&pr, !v)
  }
}

fun add_cb(pr&, cnt&, _len) {
  fun _ [pr, cnt] {
    rc/mut(&cnt, fun _cnt& {
      resolve(&pr, 0)
    })
  }
}

{
  let len , pr = wait()
  let cnt& = rc/create(0)
  let pr& = !pr
  fun rec _aux(cp&) {
    match &cp {
      Pending -> &cp = Queued1(add_cb(&pr, &cnt, len))
      Queued1(_b1) -> ()
      Resolved(_) -> rc/mut(&cnt, fun cnt& { &cnt = 1 })
      Other(pr&) -> rc/mut(&pr, _aux)
    }
  }
  0
}
