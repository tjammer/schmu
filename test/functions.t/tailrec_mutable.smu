type bref = {a& : bool}

fun rec mut_bref(i, rf&):
  if i > 0: &rf.a <- true else: mut_bref(i + 1, &rf)

fun rec dontmut_bref(i, rf&):
  if i > 0: &rf.a <- false
  else:
    -- introduce a new object, so the old one won't get mutated
    let rf2& = {a = true}
    dontmut_bref(i + 1, &rf2)

let rf& = {a = false}

mut_bref(0, &rf)

-- change from false to true
print(fmt(rf.a))

dontmut_bref(0, &rf)

-- don't change
print(fmt(rf.a))

-- some for int record type
type r = {a& : int}

fun rec mod_rec(r&, i):
  if i == 2: &r.a <- i
  else: mod_rec(&r, i + 1)

do:
  let ar& = {a = 20}
  mod_rec(&ar, 0)
  print(fmt(ar.a))

-- array
fun rec push_twice(a&, i):
  if i == 2: ()
  else:
    array/push(&a, !20)
    push_twice(&a, i + 1)

do:
  let a& = [10, 20]
  push_twice(&a, 0)
  print(fmt(array/length(a)))

-- int
fun rec change_int(i&, j):
  if j == 100: &i <- j else: change_int(&i, j + 1)

do:
  let i& = 0
  change_int (&i, 0)
  print(fmt(i))

-- create bogus objects to tidy up
fun rec test(a&, i):
  if i == 2:
    let b& = [10]
    test(&b, i + 1)
  else if i == 10:
    let b& = [10]
    test(&b, i + 1)
  else if i == 12: ()
  else:
    array/push(&a, !20)
    test(&a, i + 1)

do:
  let a& = []
  test(&a, 0)
  print(fmt(array/length(a)))
