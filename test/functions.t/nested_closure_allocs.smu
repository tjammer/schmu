(type view {:start int :len int})
(type (success 'a) {:rem view :mtch 'a})
(type (parse-result 'a) ((#ok (success 'a)) (#err view)))

(defn char [c]
  (fn [buf view]
    (if (char-equal buf.[view.start] c)
      (#ok {:mtch {@view :len 1}
            :rem {:start (+ 1 view.start) :len (- view.len 1)}})
      (#err view))))

(defn alt [alts!]
  (fn [buf view]
    (defn aux [i]
      (if (= i (array/length alts))
        (#err view)
        (match (alts.[i] buf view)
          ((#ok r) (#ok r))
          ((#err _) (aux (+ i 1))))))
    (aux 0)))

-- same thing with a named function
(defn alt-named [alts!]
  (defn named3 [buf view]
    (defn aux [i]
      (if (= i (array/length alts))
        (#err view)
        (match (alts.[i] buf view)
          ((#ok r) (#ok r))
          ((#err _) (aux (+ i 1))))))
    (aux 0))
    named3)

(defn view-of-string [str]
  {:start 0 :len (array/length str)})

(def x "x")
(def lx (view-of-string x))
(def ix "ix")
(def li (view-of-string ix))
(def xi "xi")
(def l0 (view-of-string xi))

(ignore (alt-named ![(char 'x') (char 'i')]))
(def c (alt ![(char 'x') (char 'i')]))
(ignore (c x lx))
(ignore (c ix li))
(ignore (c xi l0))
