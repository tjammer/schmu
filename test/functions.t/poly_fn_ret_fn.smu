type wrap['a] = { item : 'a }

let once& = true

fun black_box(f, g) {
  if once {
    &once = false
    copy(f)
  } else {copy(g)}
}
let foo = fun (fmt, a) {
  use fmt
  print1("{} foo\n", fmt, a)
}
fun bar(fmt, a) {
  use fmt
  print1("{} bar\n", fmt, a)
}

-- function call returns a polymorphic function
-- move it, without moving, this will error
let result = { item = black_box(foo, bar) }

(result.item)(copy(fmt/str), "a")
-- won't work because the type is fixed
-- (result.item)(10)
