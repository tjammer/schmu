external printi : fun (int) -> unit

type t['a] = {x : 'a}

-- This fn is generic
fun apply(x : 'a, f : fun ('a) -> 'b) {
  f(x)
}

let a = 2

fun add_closed(x) {
  -- we close over
  x + a
}

-- simple (int) -> int
fun add1(x) {x + 1}

fun print_bool(b) {
  if b {printi(1)}
  else {printi(0)}
}

-- simple (bool) -> bool
fun makefalse(b) {
  if b {false} else {b}
}

-- bool t -> bool t
fun make_rec_false(r) {
  if r.x {
    {x = false}
  } else {r}
}

-- simple t -> t
fun add3_rec(t) {
  {x = t.x + 3}
}

-- A polymorphic function which will get monomorphized
let f = fun x {copy(x)}

printi(apply(20, add1))
printi(apply(20, add_closed))
printi(apply({x = 20}, add3_rec).x)
print_bool(apply({x = true}, make_rec_false).x)
print_bool(apply(true, makefalse))
printi(f({x = 17}).x)
-- inline polymorphic function
18 |> (fun x {copy(x)}) |> printi
