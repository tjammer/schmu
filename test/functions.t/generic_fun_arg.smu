external printi : int -> unit

type t('a) = { x : 'a }

-- This fn is generic
function apply(x: 'a, f : 'a -> 'b)
  f(x)
end

a = 2

function add_closed(x)
  -- we close over a
  x + a
end

-- simple int -> int
function add1(x)
  x + 1
end

function print_bool(b)
  if b then printi(1)
  else printi(0) end
end

-- simple bool -> bool
function makefalse(b)
  if b then false
  else b end
end

-- bool t -> bool t
function make_rec_false(r)
  if r.x then { x = false }
  else r end
end

-- simple t -> t
function add3_rec(t)
  { x = t.x + 3 }
end

-- A polymorphic function which will get monomorphized
f = fn (x) x end

printi(apply(20, add1))
printi(apply(20, add_closed))
printi(apply({ x = 20 }, add3_rec).x)
print_bool(apply({ x = true }, make_rec_false).x)
print_bool(apply(true, makefalse))
printi(f({ x = 17 }).x)
-- inline polymorphic function
printi(fn (x) x end(18))
