module async {
  signature {
    type promise['a]
    type future['a]
    val return : fun (mov 'a) -> future['a]
    val wait : fun () -> (future['a], promise['a])
    val join_bind : fun (array[future['a]], mov fun (array['a]) -> future['b]) -> future['b]
  }
  type prom_state['a] =
  Pending
  | Queued1(fun ('a) -> unit)
  | Queued_n(array[fun ('a) -> unit])
  | Resolved('a)
  | Other(rc[prom_state])
  type promise['a] = rc[prom_state['a]]
  type future['a] = promise[a]
  fun return(mov v) { rc/create(Resolved(v)) }
  fun wait() {
    let pr = rc/create(Pending)
    copy(pr), pr
  }
  fun add_cnt_cb(mov final, mut cnt, _len) {
    fun _ [cnt] {
      rc/write(mut cnt, fun mut _cnt {
          rc/read(final, fun _final { () })
        }
      )
    }
  }
  fun add_final(futs, mut pr, mov fn) {
    let mut futs = array/map(futs, fun f { rc/to_weak(f) })
    fun () [pr] {
      let mut tmp = array/create(array/length(futs))
      array/map_inplace(mut futs, fun mut f {
        let mut f = rc/of_weak(f)
        match mut f {
          Some(mut f) ->
            rc/write(mut f, fun mut f {
              match f {
                _ -> ()
              }
            })
          None -> ()
        }
      })
      let mut new = fn(tmp)
      fun rec _aux() {
        match array/pop_back(mut tmp) {
          None -> 0
          Some(v) -> {
            let index = array/length(tmp)
            let mut f = rc/of_weak(futs.[index])
            match mut f {
              Some(mut f) -> {
                let mut f <- rc/write(mut f)
                mut f = Resolved(v)
              }
              None -> ()
            }
            _aux()
          }
        }
      }
      fun rec aux(mut new) {
        match new {
          Resolved(_vpr) -> rc/write(mut pr, aux)
          _ -> 0
        }
      }
      rc/write(mut new, aux)
    }
  }
  fun join_bind(futs, mov fn) {
    let len = futs
    let fut, pr = wait()
    let mut cnt = rc/create(0)
    let mut pr = mov pr
    let tmp = add_final(futs, mut pr, fn)
    let final = rc/create(tmp)
    fun rec _aux(mut cp) {
      match mut cp {
        Pending -> mut cp = Queued1(add_cnt_cb(copy(final), mut cnt, len))
        Queued1(_b1) -> mut cp = Queued_n([])
        Queued_n(mut cbs) -> array/push(mut cbs, add_cnt_cb(copy(final), mut cnt, len))
        Resolved(_) -> rc/write(mut cnt, fun mut cnt { mut cnt = 1 })
        Other(mut pr) -> rc/write(mut pr, _aux)
      }
    }
    fut
  }
}
{
  let f1, _ = async/wait()
  let f2, _ = async/wait()
  let f3, _ = async/wait()
  let f4, _ = async/wait()
  let futs = [f1, f2, f3, f4]
  let _f = async/join_bind(futs, fun vs {
    let _res = array/iter(vs) |> iter/fold(copy(""), fun (mov acc, _v : string) {
      acc
    })
    async/return(0)
  })
  0
}
