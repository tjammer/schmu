fun bind(res, f) {
  match res {
    Some(r): f(r)
    None: None
  }
}

fun apply(param, thing) {
  match param {
    (bar, foo): bind(bar(thing), fun r {
      bind(foo(r), fun r {
        println(fmt(r))
        Some(copy(r))
      })
    })
  }
}

ignore(apply((fun i {Some(i + 1)},
            fun i  {Some(i + 2)}),
           0))

-- This here is just a test to make sure that we can alias normal, monomorphized
-- functions
fun f(i) {
  println(fmt("printing ", i))
}

fun print_poly(to_print) {
  match f {
    foo: foo(to_print)
  }
}

print_poly(0)
print_poly(1.1)
