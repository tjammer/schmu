fun sort(mut arr, cmp) {
  fun partition(mut arr, lo, hi) {
    let pivot = copy(arr.[hi])
    let mut i = lo - 1
    iter_range(lo, hi, fun j {
      if cmp(arr.[j], pivot) < 0 {
        mut i = i + 1
        array/swap_items(mut arr, i, j)
      }
    })
    let i = i + 1
    array/swap_items(mut arr, i, hi)
    i
  }
  -- quicksort is a closure, as it closes over partition. partition itself is
  -- polymorphic. Before this change, quicksort would close over the dummy
  -- representation of partition and then construct the closure at the call
  -- site. This doesn't work here because cmp is not available insize quicksort.
  -- Instead, quicksort now closes over the already monomorphized partition.
  -- Functions in closures now mention the monomorphized name instead of the
  -- lexical one
  fun rec quicksort(mut arr, lo, hi) {
    if not(lo < hi) or (lo < 0) {
      ()
    } else {
      let p = partition(mut arr, lo, hi)
      quicksort(mut arr, lo, p - 1)
      quicksort(mut arr, p + 1, hi)
    }
  }
  let len = array/length(arr) - 1
  quicksort(mut arr, 0, len)
}

let mut arr = [9, 30, 0, 50, 2030, 34]
sort(mut arr, fun(a, b) {a - b})
array/iter(arr) |> iter/iter(fun i { fmt/(println(int, i)) })

-- These functions have different call names. Make sure this works as well
fun sort(mut arr, cmp) {
  fun partition(mut arr, lo, hi) {
    let pivot = copy(arr.[hi])
    let mut i = lo - 1
    iter_range(lo, hi, fun j {
      if cmp(arr.[j], pivot) < 0 {
        mut i = i + 1
        array/swap_items(mut arr, i, j)
      }
    })
    let i = i + 1
    array/swap_items(mut arr, i, hi)
    i
  }

  -- quicksort is a closure, as it closes over partition. partition itself is
  -- polymorphic. Before this change, quicksort would close over the dummy
  -- representation of partition and then construct the closure at the call
  -- site. This doesn't work here because cmp is not available insize quicksort.
  -- Instead, quicksort now closes over the already monomorphized partition.
  -- Functions in closures now mention the monomorphized name instead of the
  -- lexical one
  fun rec quicksort(mut arr, lo, hi) {
    if not(lo < hi) or (lo < 0) {
      ()
    } else {
      let p = partition(mut arr, lo, hi)
      quicksort(mut arr, lo, p - 1)
      quicksort(mut arr, p + 1, hi)
    }
  }
  let len = array/length(arr) - 1
  quicksort(mut arr, 0, len)
}
let mut arr = [9, 30, 0, 50, 2030, 34]
sort(mut arr, fun(a, b) {a - b})
array/iter(arr) |> iter/iter(fun i { fmt/(println(int, i)) })
