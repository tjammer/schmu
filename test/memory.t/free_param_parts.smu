module typekey {
  signature {
  type t
}
type t = int
}

type named = { thing : string, idx : int }

fun rec consume(storage, opt) {
  match storage.[opt] {
    None -> println("none")
    Some(thing, idx) -> {
      println(thing)
      -- passing idx in a tail call caused the string 'thing' to be freed. The
      -- solution is to explicitly mark it as (child of a) parameter, and not
      -- adding parameters to free lists.
      consume(storage, idx)
    }
  }
}

consume([Some(copy("thing"), 1), None], 0)

-- simpler examples without the array/get
fun rec simpler(arg, _) {
  match arg {
    Some(thing, idx) -> {
      ignore(thing)
      simpler(None, idx)}
    None -> ()
  }
}

simpler(Some(copy("thing"), 0), 0)

-- moved version
fun rec simpler(mov arg, mov _) {
  match mov arg {
    Some(thing, mov idx) -> {
      ignore(thing)
      simpler(mov None, mov idx)}
    None -> ()
  }
}

simpler(mov Some(copy("thing"), 0), mov 0)
