module async {
  type prom_state['a] =
    | Pending
    | Queued1(fun ('a) -> unit)
    | Queued_n(array[unit])
    | Resolved(a)

  fun wait() {
    rc/create(Pending)
  }

  fun resolve(mut p, mov v) {
    let mut inner <- rc/write(mut p)
    match inner {
      Queued1(_) -> ()
      Queued_n(cbs) -> {
        let _cbs = mov cbs
        mut inner = Resolved(v)
      }
      _b -> mut inner = Pending
    }
  }

  fun bind(fut, mov fn) {
    let mut cp = copy(fut)
    let mut cp <- rc/write(mut cp)
    match cp {
      Pending ->
      mut cp = Queued1(fun a { fn(a) })
      _ -> ()
    }
  }
}

let mut future = async/wait()
async/bind(future, fun _v { () })
async/resolve(mut future, 3)
