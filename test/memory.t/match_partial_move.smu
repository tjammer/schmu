module async {
  type prom_state['a] =
    | Pending
    | Queued1(fun ('a) -> unit)
    | Queued_n(array[unit])
    | Resolved(a)

  fun wait() {
    rc/create(Pending)
  }

  fun resolve(p&, v!) {
    rc/mut_with(&p, v, fun (inner&, v!) {
      match inner {
        Queued1(_): ()
        Queued_n(cbs): {
          let _cbs = !cbs
          &inner = Resolved(v)
        }
        _b: &inner = Pending
    }})
  }

  fun bind(fut, fn!) {
    let cp& = copy(fut)
    rc/mut_with(&cp, fn, fun (cp&, fn!) {
      match cp {
        Pending: 
          &cp = Queued1(fun a { fn(a) })
        _: ()
      }
    })
  }
}

let future& = async/wait()
async/bind(future, fun _v { () })
async/resolve(&future, 3)
