module async {
  type prom_state['a] =
  | Pending
  | Queued1(fun ('a) -> unit)
  | Resolved(a)
  fun return(mov v) { rc/create(Resolved(v)) }
  fun wait() {
    let pr = rc/create(Pending)
    copy(pr), pr
  }
  fun resolve(mut p, mov v) {
    let mut inner <- rc/write(mut p)
    match inner {
      Queued1(cb) -> {
        let _b = mov cb
        mut inner = Resolved(v)
      }
      _b -> mut inner = Pending
    }
  }
  fun add_cb(mov fn) {
    let fut, pr = wait()
    let mut pr = mov pr
    let weak = rc/to_weak(pr)
    fun cb(v) {
      let mut new = fn(v)
      rc/write(mut new, fun mut inner {
        match inner {
          Resolved(_v) ->
            match rc/of_weak(weak) {
              Some(_pr) ->
                mut inner = Pending
              None -> ()
            }
          Pending -> {
            let mut cpy = copy(pr)
            rc/write(mut pr, fun mut _prinner {
              mut inner = Queued1(fun _v [cpy] {
                resolve(mut cpy, ())
              })
            })
          }
          _ -> ()
        }
      })
    }
    fut, cb
  }
  fun bind(fut, mov fn) {
    let mut cp = copy(fut)
    let mut cp <- rc/write(mut cp)
    match cp {
      Pending -> {
        let _fut, cb = add_cb(fn)
        mut cp = Queued1(cb)
      }
      _ -> ()
    }
  }
}
{
  let future, promise = async/wait()
  async/bind(future, fun _v {
    async/return(0)
  })
  let mut pr = mov promise  
  async/resolve(mut pr, 3)
}
