module set = set/make(int)

let s = set/empty
let s1 = set/add(s, 0)
let s2 = set/add(s, 0)
let s3 = set/add(s2, 1)
let s4 = set/remove(s3, 0)
let s3 = set/add(s3, 2)
let s5 = set/add(s3, 3)

set/iter(s5) |> iter/iter(fun i { fmt/(println(int, i)) })
println("")
set/iter(s1) |> iter/iter(fun i { fmt/(println(int, i)) })
println("")
set/iter(s3) |> iter/iter(fun i { fmt/(println(int, i)) })
println("")
set/iter(s4) |> iter/iter(fun i { fmt/(println(int, i)) })

println("")
{
  let mb <- set/find(s4, 1)
  match mb {
    None -> println("none")
    Some(i) -> fmt/(print1("some {}\n", int, i))
  }
}

{
  let mb <- set/find(s4, 0)
  match mb {
    None -> println("none")
    Some(i) -> fmt/(print1("some {}\n", int, i))
  }
}
