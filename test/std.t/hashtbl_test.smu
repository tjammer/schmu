import stbl
use stbl

fun string() {
  println("## string")
  let tbl& = stbl/create(2)
  stbl/insert(&tbl, copy("key"), !1.1)
  fun find_println(tbl, key) {
    let v <- stbl/find(tbl, key)
    match v {
      Some(_v) -> println("1.1") -- TODO format float
      None -> println("none")
    }
  }
  find_println(tbl, "key")
  find_println(tbl, "otherkey")
  stbl/remove(&tbl, "key")
  find_println(tbl, "key")
}
println("# hashtbl")
string()

module key {
  type t = A1 | A2 | B1 | B2

  fun hash(k : t) { match k {
    A1 -> 0
    A2 -> 1
    B1 -> 2
    B2 -> 3
  }}
  fun equal(a, b) {hash(a) == hash(b)}
}
module keytbl = hashtbl/make(key)

fun key() {
  println("## key")
  let tbl& = keytbl/create(512)
  keytbl/insert(&tbl, !A1, !10)
  keytbl/insert(&tbl, !A2, !20)
  let v <- keytbl/find(tbl, A1)
  match v {
    Some(v) -> fmt/(print1("some v: {}\n", int, v))
    None -> println("none")
  }
}
key()


fun mut_array() {
  println("## mut array")
  let tbl& = keytbl/create(512)
  keytbl/insert(&tbl, !A1, ![])

  {
    let arr& <- keytbl/find_mut(&tbl, A2)
    match arr {
      Some(_arr) -> assert(false)
      None -> ()
    }
  }
  {
    let arr& <- keytbl/find_mut(&tbl, A1)
    match &arr {
      Some(arr&) -> array/push(&arr, 1)
      None -> assert(false)
    }
  }
  let v <- keytbl/find(tbl, A1)
  match v {
    Some(v) -> assert(array/length(v) == 1)
    None -> assert(false)
  }
}
mut_array()

fun project_mut() {
  println("## project mut")
  let tbl& = keytbl/create(64)

  -- add from empty
  {
    let arr& <- keytbl/find_mut(&tbl, A1)
    match arr {
      None -> &arr = Some([1, 2, 3])
      Some(_) -> assert(false)
    }
  }
  {
    let arr& <- keytbl/find_mut(&tbl, A1)
    match &arr {
      None -> assert(false)
      Some(arr&) -> &arr = [4, 5]
    }
  }
  {
    let arr <- keytbl/find(tbl, A1)
    match arr {
      None -> assert(false)
      Some(arr) -> {
        assert(array/length(arr) == 2)
        assert(arr.[0] == 4)
        assert(arr.[1] == 5)
      }
    }
  }
  -- delete
  {
    let arr& <- keytbl/find_mut(&tbl, A1)
    match arr {
      None -> assert(false)
      Some(_) -> &arr = None
    }
  }
  assert(keytbl/mem(tbl, A1) |> not)
}
project_mut()
