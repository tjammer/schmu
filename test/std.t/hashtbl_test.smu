import stbl
use stbl

fun string() {
    println("## string")
    let tbl& = stbl/create(2)
    stbl/insert(&tbl, !"key", !1.1)
    fun find_println(key) {
        match stbl/find(tbl, key) {
            Some(_v): println("1.1") -- TODO format float
            None: println("none")
        }
    }
    find_println("key")
    find_println("otherkey")
    stbl/remove(&tbl, "key")
    find_println("key")
}
println("# hashtbl")
string()

module key {
  type t = A1 | A2 | B1 | B2

  fun hash(k : t){ match k {
    A1: 0
    A2: 1
    B1: 2
    B2: 3
  }}
  fun equal(a, b) {hash(a) == hash(b)}
}
module keytbl = hashtbl/make(key)

fun key() {
  println("## key")
  let tbl& = keytbl/create(512)
  keytbl/insert(&tbl, !A1, !10)
  keytbl/insert(&tbl, !A2, !20)
  match keytbl/find(tbl, A1) {
    Some(v): fmt/(print1("some v: {}\n", int, v))
    None: println("none")
  }
}
key()


fun mut_array() {
  println("## mut array")
  let tbl& = keytbl/create(512)
  keytbl/insert(&tbl, !A1, ![])
  assert(keytbl/find_mut(&tbl, A2, fun (arr&) {array/push(&arr, !1)})
    |> not)
  assert(keytbl/find_mut(&tbl, A1, fun (arr&) {array/push(&arr, !1)}))
  match keytbl/find_map(tbl, A1, fun arr {array/length(arr)}) {
    Some(v): assert(v == 1)
    None: assert(false)
  }
}
mut_array()
