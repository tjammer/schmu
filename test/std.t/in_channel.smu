match in_channel/open("in_channel.smu") {
  Some(ic) -> {
    let mut ic = mov ic
    let mut buf = array/create(4096)
    in_channel/readn(mut ic, mut buf, 50) |> ignore
    let mut str = mov string/of_array(mov buf)
    println(str)

    mut buf = string/to_array(mov str)
    array/clear(mut buf)
    in_channel/readn(mut ic, mut buf, 6) |> ignore
    mut str = string/of_array(mov buf)
    println(str)

    mut buf = string/to_array(mov str)
    array/clear(mut buf)
    match in_channel/readline(mut ic, mut buf) {
      Some(n) -> fmt/(print1("read {} bytes\n", int, n))
      None -> println("read nothing")
    }
    mut str = string/of_array(mov buf)
    println(str)

    mut buf = string/to_array(mov str)
    array/clear(mut buf)
    match in_channel/readline(mut ic, mut buf) {
      Some(n) -> fmt/(print1("read {} bytes\n", int, n))
      None -> println("read nothing")
    }
    mut str = string/of_array(mov buf)
    println(str)

    mut buf = string/to_array(mov str)
    array/clear(mut buf)
    match in_channel/readrem(mut ic, mut buf) {
      Some(n) -> fmt/(print1("read {} bytes\n", int, n))
      None -> println("read nothing")
    }
    mut str = string/of_array(mov buf)
    println(str)

    in_channel/close(ic)
  }
  None -> ()
}

match in_channel/open("in_channel.smu") {
  Some(ic) -> {
    let mut ic = mov ic
    println(in_channel/readall(mut ic))
    in_channel/close(ic)
  }
  None -> ()
}

match in_channel/open("in_channel.smu") {
  Some(ic) -> {
    let mut ic = mov ic
    -- in_channel/lines(mut ic) |> iter/iter(println)
    in_channel/lines(mut ic) |> iter/iter(fun line {println(line)})
    in_channel/close(ic)
  }
  None -> ()
}
