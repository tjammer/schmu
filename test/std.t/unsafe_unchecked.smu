type inrecord = { str : array[int], other : int }
let arr = [None, Some({ str = [], other = 0})]

fun borrow(arr, i, fn) {
  match arr.[i] {
    None -> fn(None)
    Some(r) -> {
      let tmp = __unsafe_unchecked(Some(r.str))
      fn(tmp)
      unsafe/leak(tmp)
    }
  }
}

fun borrow_stdlib(arr, i, fn) {
  match arr.[i] {
    None -> fn(None)
    Some(r) -> {
      let tmp = unsafe/unchecked(Some(r.str))
      fn(tmp)
      unsafe/leak(tmp)
    }
  }
}

borrow(arr, 0, fun _ { () })
borrow(arr, 1, fun _ { () })
borrow_stdlib(arr, 1, fun _ { () })
