signature {
  type t = int
  val hash : fun (t) -> int
  val equal : fun (t, t) -> bool
  val compare : fun (t, t) -> t
  -- operators
  val + : fun (t, t) -> t
  val - : fun (t, t) -> t
  val * : fun (t, t) -> t
  val / : fun (t, t) -> t
  val < : fun (t, t) -> bool
  val > : fun (t, t) -> bool
  val <= : fun (t, t) -> bool
  val >= : fun (t, t) -> bool
  val == : fun (t, t) -> bool
  val <> : fun (t, t) -> bool

  val div_unsigned : fun (t, t) -> t
  val lt_unsigned : fun (t, t) -> bool
  val gt_unsigned : fun (t, t) -> bool
  val le_unsigned : fun (t, t) -> bool
  val ge_unsigned : fun (t, t) -> bool
}

let + = __addi
let - = __subi
let * = __multi
let / = __divi

let < = __lessi
let > = __greateri
let <= = __lesseqi
let >= = __greatereqi
let == = __equali
let <> = __nequali

let div_unsigned = __diviu
let lt_unsigned = __lessiu
let gt_unsigned = __greateriu
let le_unsigned = __lesseqiu
let ge_unsigned = __greatereqiu

fun hash(i) {
  -- basically murmurhash
  let m = 0xc6a4a7935bd1e995
  let r = 47
  let mut h = lxor(0, 8 * m)
  let mut k = mov i
  mut k = k * m
  mut k = lxor(k, lshr(k, r))
  mut k = k * m

  mut h = lxor(h, k)
  mut h = h * m

  mut h = lxor(h, lshr(h, r))
  mut h = h * m
  mut h = lxor(h, lshr(h, r))
  h
}

let equal = (==)

fun compare(l, r) {
  l - r
}
