import array
import iter
import option
import prelude
import string
import unsafe

signature {
  type t

  val open : (string/t) -> option/t[t]
  val close : (t) -> unit

  -- high level interface
  val with_open : (string/t, (t&) -> 'a) -> option/t['a]
  val readall : (t&) -> string/t
  val lines : (t&, iter/consumer[string/t, 'a]) -> 'a
  val size : (t) -> int

  -- low level interface
  type buf = array[u8]
  val readbuf : (t&, buf&) -> option/t[int]
  val readn : (t&, buf&, int) -> option/t[int]
  val readline : (t&, buf&) -> option/t[int]
  val readrem : (t&, buf&) -> option/t[int]

  type file
  val of_file : (file) -> t
  val to_file : (t) -> file
}

type file = raw_ptr[u8]

type t = {buf& : array#4096[u8], head& : int, unseen& : int, file : file}

type cstr = raw_ptr[u8]
external fread : (cstr, int, int, file) -> int
external fopen : (cstr, cstr) -> file
external fclose : (cstr) -> int

use option
use prelude

let bufsize = 4096

fun open(name) {
  let file = fopen(string/data(name), string/data("r"))
  if is_nullptr(file) {
    None
  } else {
    Some({buf = #4096[0u8], head = 0, unseen = 0, file})
  }
}

fun close(ic) {
  fclose(ic.file).ignore()
}

fun with_open(name, f) {
  match open(name) {
    Some(ic): {
      let ic& = !ic
      let ret = f(&ic)
      close(ic)
      Some(ret)
    }
    None: None
  }
}

external memcpy : (raw_ptr[u8], raw_ptr[u8], int) -> unit

fun fill(buf&, icbuf, lower, upper) {
  let diff = upper - lower
  let len = array/length(buf)
  -- We call [fill] often in [readall] so we allocate eagerly
  array/reserve(&buf, prelude/power_2_above(16, len + diff))

  memcpy(array/data(buf).unsafe/at(len), array/fixed/data(icbuf).unsafe/at(lower), diff)
  &__unsafe_array_length(buf) = len + diff
}

fun readbuf(ic&, buf&) {
  let lower, upper = {
    if ic.unseen > 0 {
      (ic.head, ic.head + ic.unseen)
    } else {
      (0, fread(__fixed_array_data(ic.buf), 1, bufsize, ic.file))
    }}
  -- copy content to buf
  fill(&buf, ic.buf, lower, upper)
  &ic.head = 0
  &ic.unseen = 0
  Some(upper - lower)
}

fun rec readn_impl(ic&, buf&, n, readacc) {
  if ic.unseen >= n {
    fill(&buf, ic.buf, ic.head, ic.head + n)
    &ic.head = ic.head + n
    &ic.unseen = ic.unseen - n
    Some(readacc + n)
  } else if ic.unseen > 0 {
    match readbuf(&ic, &buf) {
      Some(nread): {
        assert((n - nread) < 0)
        readn_impl(&ic, &buf, n - nread, nread + readacc)
      }
      None: {
        assert(false)
        None
      }
    }
  } else {
    let nread = fread(__fixed_array_data(ic.buf), 1, bufsize, ic.file)
    &ic.head = 0
    &ic.unseen = copy(nread)
    if nread == 0 {
      if readacc == 0 { None } else { Some(readacc) }
    } else {
      readn_impl(&ic, &buf, n, readacc)
    }}
}

fun readn(ic&, buf&, n) { readn_impl(&ic, &buf, n, 0) }

fun rec readall_impl(ic&, buf&, acc) {
  -- assumes ic.unseen = 0
  let nread = fread(__fixed_array_data(ic.buf), 1, bufsize, ic.file)
  if nread == 0  {
    if acc == 0 { None } else { Some(acc) }
  } else {
    fill(&buf, ic.buf, 0, nread)
    readall_impl(&ic, &buf, nread + acc)
  }
}

fun readrem(ic&, buf&) {
  let ret = match readbuf(&ic, &buf) {
    Some(nread): {
      fill(&buf, ic.buf, ic.head, ic.head + ic.unseen)
      readall_impl(&ic, &buf, nread)
    }
    None: None
  }
  -- make other (read) calls fail after this
  &ic.unseen = 0
  &ic.head = 0
  ret
}

fun readline(ic&, buf&) {
  fun rec find_newline(acc) {
    if ic.unseen > 0 {
      if prelude/char_equal('\n', ic.buf#[ic.head]) {
        &ic.unseen = ic.unseen - 1
        &ic.head = ic.head + 1
        Some(acc)
      } else {
        array/push(&buf, !copy(ic.buf#[ic.head]))
        &ic.unseen = ic.unseen - 1
        &ic.head = ic.head + 1
        find_newline(acc + 1)
      }
    } else {
      -- re-read file, then recurse, copied from readn_impl
      let nread = fread(__fixed_array_data(ic.buf), 1, bufsize, ic.file)
      &ic.head = 0
      &ic.unseen = copy(nread)
      if nread == 0 {
        if acc == 0 {
          None
        } else {
          Some(acc)
        }
      } else { find_newline(acc) }
    }}
  find_newline(0)
}

fun readall(ic&) {
  let buf& = array/create(bufsize)
  match readrem(&ic, &buf) {
    Some(_): string/of_array(!buf)
    None: ""
  }
}

fun lines(ic&, consume) {
  let buf& = array/create(bufsize)
  fun aux(f) {
    match readline(&ic, &buf) {
      Some(_): {
        let str = string/of_array(!buf)
        f(str)
        &buf = string/to_array(!str)
        array/clear(&buf)
        iter/Continue
      }
      None: iter/Exhausted
    }}
  consume(aux)
}

external rewind : (file) -> unit
fun of_file(file) {
  rewind(file)
  {buf = #4096[0u8], head = 0, unseen = 0, file}
}

fun to_file(ic): ic.file

external fseek : (file, int, i32) -> unit
external ftell : (file) -> int
let seek_set = 0i32
let seek_end = 2i32
fun size(ic) {
  let curr = ftell(ic.file)
  fseek(ic.file, 0, seek_end)
  let end = ftell(ic.file)
  fseek(ic.file, curr, seek_set)
  end
}
