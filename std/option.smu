signature {
  type t['a] = None | Some('a)

  val map : fun (t['a], fun ('a) -> 'b) -> t['b]
  val iter : fun (t['a], fun ('a) -> unit) -> unit
  val bind : fun (t['a], fun ('a) -> t['b]) -> t['b]
  val is_some : fun (t['a]) -> bool
  val is_none : fun (t['a]) -> bool
}


fun map(opt, f) {
  match opt {
    Some(thing) -> Some(f(thing))
    None -> None
  }
}

fun iter(opt, f) {
  match opt {
    Some(thing) -> {
      f(thing)
      ()
    }
    None -> ()
  }
}

fun bind(opt, f) {
  match opt {
    Some(thing) -> f(thing)
    None -> None
  }
}

fun is_some(opt) {
  match opt { Some(_) -> true; None -> false }
}

fun is_none(opt) {
  match opt { Some(_) -> false; None -> true }
}
