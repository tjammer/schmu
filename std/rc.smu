import option
import prelude

signature {
  val create : fun (mov 'a) -> rc['a]
  val count : fun (rc['a]) -> int

  val equal : fun (rc['a], rc['a]) -> bool

  val extract : fun (mov rc['a]) -> option/t['a]
  val read : fun (rc['a], once fun ('a) -> 'b) -> 'b
  val write: fun (mut rc['a], once fun (mut 'a) -> 'b) -> 'b

  val to_weak : fun (rc['a]) -> weak_rc['a]
  val of_weak : fun (weak_rc['a]) -> option/t[rc['a]]
}

let create = __rc_create
let to_weak = __rc_to_weak
let count = __rc_cnt

let equal = __rc_equal

use option
use prelude

fun of_weak(wrc) {
  if __rc_cntw(wrc) == 0 { None }
  else { Some(__unsafe_rc_of_weak(wrc)) }
}

fun extract(mov rc) {
  let inner = __unsafe_rc_get(rc)
  if count(rc) == 1 { Some(inner) }
  else { None }
}

fun read(rc, fn) {
  fn(__unsafe_rc_get(rc))
}

fun write(mut rc, fn) {
  fn(mut __unsafe_rc_get(rc))
}
