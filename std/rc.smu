import option
import prelude

signature {
  val create : fun ('a!) -> rc['a]
  val count : fun (rc['a]) -> int

  val extract : fun (rc['a]!) -> option/t['a]
  val read : fun (rc['a], fun ('a) -> 'b) -> 'b
  val read_with : fun (rc['a], 'b!, fun ('a, 'b!) -> 'c) -> 'c
  val mut : fun (rc['a]&, fun ('a&) -> 'b) -> 'b
  val mut_with : fun (rc['a]&, 'b!, fun ('a&, 'b!) -> 'c) -> 'c

  val to_weak : fun (rc['a]) -> weak_rc['a]
  val of_weak : fun (weak_rc['a]) -> option/t[rc['a]]
}

let create = __rc_create
let to_weak = __rc_to_weak
let count = __rc_cnt

use option
use prelude

fun of_weak(wrc) {
  if __rc_cntw(wrc) == 0 { None }
  else { Some(__unsafe_rc_of_weak(wrc)) }
}

fun extract(rc!) {
  let inner = __unsafe_rc_get(rc)
  if count(rc) == 1 { Some(inner) }
  else { None }
}

fun read(rc, fn) {
  fn(__unsafe_rc_get(rc))
}

fun read_with(rc, mvd!, fn) {
  fn(__unsafe_rc_get(rc), !mvd)
}

fun mut(rc&, fn) {
  fn(&__unsafe_rc_get(rc))
}

fun mut_with(rc&, mvd!, fn) {
  fn(&__unsafe_rc_get(rc), !mvd)
}
