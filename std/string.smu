(signature
  (type cstr (raw_ptr u8))
  (type t)

  (def len (fun t int))
  (def data (fun t cstr))
  (def get (fun t int u8))
  (def hash (fun t int))
  (def equal (fun t t bool))
  (def append (fun t& t unit))
  (def concat (fun t (array t) t))
  (def boyer-moore-horspool (fun t t (option/t int)))

  (def modify-buf (fun t& (fun (array u8)& unit) unit))
  (def of-array (fun (array u8)! t))
  (def to-array (fun t! (array u8)))
  (def of-fixed-array (fun (array#? u8) t))

  (def print (fun t unit)))

(type t (array u8))

(defn len [(str t)] (array/length str))

(defn data [(str t)] (array/data str))

(defn get [(str t) i] str.[i])

(defn hash [str]
  -- unsigned long
  -- hash(unsigned char *str)
  -- {
  --     unsigned long hash = 5381;
  --     int c;
  --     while (c = *str++)
  --         hash = ((hash << 5) + hash) + c; /* hash * 33 + c */
  --     return hash;
  -- }
  (array/fold str (fn [hash! c] (+ (* hash 33) (u8_to_int c))) !5381))

(external memcmp (fun (raw_ptr u8) (raw_ptr u8) int i32))

(defn equal [l r]
  (if (= (len l) (len r))
    (= 0 (int_of_i32 (memcmp (array/data l) (array/data r) (array/length l))))
    false))

(defn append (str& other)
  (array/iter other (fn ((c u8)) (array/push &str !c))))

(defn concat [delim strings]
  (let [ret& (array/create 32)]
    (array/iteri strings
                 (fn [i str]
                   (if (not (= i 0)) (append &ret delim))
                   (append &ret str)))
    ret))

(defn make-skips [pattern]
  (let [len (array/length pattern)
        skips& #256[len]]
    (array/iteri pattern
                 (fn [i c]
                   (if (not (= i (- len 1))) -- ignore last char
                     (set &skips.((u8_to_int c)) !(- (- len 1) i)))))
    skips))

(defn boyer-moore-horspool [pattern str]
  (open prelude)
  (open option)
  (def patlen1 (- (len pattern) 1))
  (def strptr (array/data str))
  (def last-patchar pattern.[patlen1])

  (defn find [skips istr]
    (def last-windowchar str.[(+ istr patlen1)])
    (if (<= (+ istr (len pattern)) (len str))
      (if (and (char-equal last-patchar last-windowchar)
               (= 0 (-> (memcmp (array/data pattern)
                                 (__unsafe_ptr_at strptr istr)
                                 patlen1)
                        int_of_i32)))
        (#some istr)
        (let [skip skips.((u8_to_int last-windowchar))]
          (find skips (+ istr skip))))
      #none))

  (if (< (len pattern) (len pattern))
    #none
    (let [skips (make-skips pattern)]
      (find skips 0))))

(defn modify-buf [(str& t) f]
  (f &str)
  -- return type needs to be inferred as unit
  ())

(defn of-array [(arr! (array u8))] arr)
(defn to-array [(str! t)] str)

(external memcpy (fun (raw_ptr u8) (raw_ptr u8) int unit))

(defn of-fixed-array [(arr (array#? u8))]
  (def ret (array/create (__fixed_array_length arr)))
  (memcpy (array/data ret) (__fixed_array_data arr) (__fixed_array_length arr))
  ret)

(type file (raw_ptr u8))
(external stdout file)
(external fwrite (fun cstr int int file unit))

(def newline #['\n'])

(defn print [(str t)]
  -- TODO should be named println, but (print (fmt-str ...)) also adds newline
  (fwrite (array/data str) (array/length str) 1 stdout)
  (fwrite (__fixed_array_data newline) 1 1 stdout))
