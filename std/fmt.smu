import array
import iter
import prelude
import schubfach
import string

use prelude

module formatter {
  signature {
    type t['a]

    val format : (t['a]!, raw_ptr[u8], int) -> t['a]
    val extract : (t['a]!) -> 'a

    val create : (('a&, raw_ptr[u8], int) -> unit!, 'a!) -> t['a]
  }

  type t['a] = { fn : ('a&, raw_ptr[u8], int) -> unit, data& : 'a }

  fun format(fm!, ptr, len) {
    let fm& = !fm
    fm.fn(&fm.data, ptr, len)
    fm
  }

  fun extract(fm!) {
    fm.data
  }

  fun create(fn!, data!) {
    { fn, data }
  }
}

type file = raw_ptr[u8]
external stdout : file
external stderr : file
external fwrite : (raw_ptr[u8], int, int, file) -> unit

fun pr() {
  formatter/create(
    fun(_& : unit, ptr, len) { fwrite(ptr, 1, len, stdout) }, ()
  )
}

fun prerr() {
  formatter/create(
    fun(_& : unit, ptr, len) { fwrite(ptr, 1, len, stderr) }, ()
  )
}

let int_digits = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz"

fun int_base(p!, value, base) {
  let arr& = #64['\000']
  if (base < 2 or base > 36) {
    formatter/format(p, array/fixed/data(arr), 1)
  }
  else {
    fun rec aux(value, index) {
      let tmp_value = value
      let value = value / base
      &arr#[index] = string/get(int_digits, 35 + (tmp_value - (value * base)))
      if (value <> 0) { aux(value, index + 1) }
      else {
        -- sign
        if tmp_value < 0 {
          &arr#[index + 1] = '-'
          index + 1
        }
        else { index }
      }
    }
    let length = aux(value, 0) + 1

    -- reverse
    iter_range(0, length / 2, fun i {
      array/fixed/swap_items(&arr, i, length - i - 1)
    })

    formatter/format(p, array/fixed/data(arr), length)
  }
}

fun int_base_unsigned(p!, value, base) {
  let arr& = #64['\000']
  if (base < 2 or base > 36) {
    formatter/format(p, array/fixed/data(arr), 1)
  }
  else {
    fun rec aux(value, index) {
      let tmp_value = value
      let value = div_unsigned(value, base)
      &arr#[index] = string/get(int_digits, 35 + (tmp_value - (value * base)))
      if (value <> 0) { aux(value, index + 1) }
      else { index }
    }
    let length = aux(value, 0) + 1

    -- reverse
    iter_range(0, length / 2, fun i {
      array/fixed/swap_items(&arr, i, length - i - 1)
    })

    formatter/format(p, array/fixed/data(arr), length)
  }
}

fun int(p!, i) {
  int_base(p, i, 10)
}

fun uint(p!, i) {
  int_base_unsigned(p, i, 10)
}

fun char(p!, c) {
  let arr = #[c]
  formatter/format(p, array/fixed/data(arr), 1)
}

fun str(p!, str) {
  formatter/format(p, string/data(str), string/len(str))
}

fun u8(p!, u) {
  int(p, int_of_u8(u)) |> str("u8")
}

fun bool(p!, b) {
  if b { str(p, "true") }
  else { str(p, "false") }
}

fun endl(p!) {
  let newline = #['\n']
  formatter/format(p, array/fixed/data(newline), 1)
  |> formatter/extract
}

fun float(p!, f) {
  use schubfach

  let significand = float/physical_significand(f)
  let exponent = float/physical_exponent(f)

  if exponent <> float/max_ieee_exponent {
    -- finite
    if exponent <> 0 or significand <> 0 {
      -- != 0
      let dec = to_decimal64(significand, exponent)
      let min_fixed_decs = -6
      let max_fixed_decs = 17
      let sign_bit = float/sign_bit(f)
      let num_digits = decimal_length(dec.digits)
      let decimal_point = num_digits + dec.exponent
      let use_fixed = decimal_point >= min_fixed_decs
        and decimal_point <= max_fixed_decs

      if use_fixed {
        let arr, len = format_fixed(
          dec.digits,
          dec.exponent,
          sign_bit,
          int_digits
        )
        formatter/format(p, array/fixed/data(arr), len)
      }
      else {
        let arr, len, exponent = format_scientific(
          dec.digits,
          dec.exponent,
          sign_bit,
          num_digits,
          int_digits
        )
        formatter/format(p, array/fixed/data(arr), len)
        |> int(exponent)
      }
    }
    else {
      str(p, "0.0")
    }
  }
  else if significand == 0 {
    if float/sign_bit(f) { char(p, '-') } else { p }
    |> str("inf")
  }
  else {
    str(p, "nan")
  }
}

module type concrete_formatter {
  type return
  val create : () -> formatter/t[return]
}

functor make_printer(m : concrete_formatter) {
  signature {
    type printer['a] = (formatter/t[m/return]!, 'a) -> formatter/t[m/return]
    val print : (printer['a], 'a) -> m/return
    val println : (printer['a], 'a) -> m/return
    val print_newline : () -> m/return

    val print1 : (string/t, printer['a], 'a) -> m/return
    val print2 : (string/t, printer['a], 'a, printer['b], 'b) -> m/return
    val print3 : (string/t, printer['a], 'a, printer['b], 'b, printer['c], 'c) -> m/return
    val print4 : (string/t, printer['a], 'a, printer['b], 'b, printer['c], 'c, printer['d], 'd) -> m/return
    val print5 : (string/t, printer['a], 'a, printer['b], 'b, printer['c], 'c, printer['d], 'd, printer['e], 'e) -> m/return
  }
  let missing_arg_msg = "Missing argument for format str: "
  let too_many_arg_msg = "Too many arguments for format str: "

  module impl {
    fun fmt_fail_missing() {
      prerr() |> str(missing_arg_msg)
      |> endl
      __any_abort()
    }

    fun fmt_fail_too_many() {
      prerr() |> str(too_many_arg_msg)
      |> endl
      __any_abort()
    }

    type slice = { start : int, len : int }
    type iter_kind = Str(slice) | Fmt(int)
    type escape = Escape | No_escape

    fun iter_fmt(str, cont) {
      let length = string/len(str)
      fun rec aux(start, len, num_fmts, escape) {
        if (start + len) < length {
          -- we have not reached the end of the format string yet
          match string/get(str, start + len) {
            123u8: {
              -- '{'
              match escape {
                No_escape: {
                  -- peek at next char
                  if (start + len + 1) < length
                  and char_equal(string/get(str, start + len + 1), 125u8) {
                    -- print the string up to here
                    assert(cont(Str({ start, len })))
                    -- then print the formatted item
                    assert(cont(Fmt(num_fmts)))
                    aux(start + len + 2, 0, num_fmts + 1, No_escape)
                  }
                  else {
                    assert(cont(Str({ start, len = len + 1 })))
                  }
                }
                Escape: {
                  -- continue
                  aux(start, len + 1, num_fmts, escape)
                }
              }
            }
            _: aux(start, len + 1, num_fmts, escape)
          }
        }
        -- we have reached the end
        else if len > 0 {
          assert(cont(Str({ start, len })))
        }
      }
      aux(0, 0, 0, No_escape)
      false
    }
  }

  fun print(fmt : printer['a], value) {
    fmt(!m/create(), value) |> formatter/extract
  }

  fun println(fmt : printer['a], value) {
    fmt(!m/create(), value) |> endl
  }

  fun helper_printn(fmtstr, cb) {
    let formatter& = m/create()
    let fmtnum& = 0
    impl/iter_fmt(fmtstr) |> iter/iter(fun f {
      match f {
        impl/Str({ start, len }): {
          let ptr = string/data(fmtstr) |> __unsafe_ptr_at(start)
          &formatter = formatter/format(formatter, ptr, len)
        }
        Fmt(num): {
          &fmtnum = num + 1
          &formatter = cb(!formatter, num)
        }
      }
    })
    fmtnum, formatter
  }

  fun print1(fmtstr, f0, v0) {
    let fmtnum, ret = helper_printn(fmtstr, fun (fmter!, i) {
      match i {
        0: f0(!fmter, v0)
        _: impl/fmt_fail_missing()
      }
    })
    if fmtnum <> 1 {
      impl/fmt_fail_too_many()
    }
    else { formatter/extract(ret) }
  }

  fun print2(fmtstr, f0, v0, f1, v1) {
    let fmtnum, ret = helper_printn(fmtstr, fun (fmter!, i) {
      match i {
        0: f0(!fmter, v0)
        1: f1(!fmter, v1)
        _: impl/fmt_fail_missing()
      }
    })
    if fmtnum <> 2 { impl/fmt_fail_too_many() }
    else { formatter/extract(ret) }
  }

  fun print3(fmtstr, f0, v0, f1, v1, f2, v2) {
    let fmtnum, ret = helper_printn(fmtstr, fun (fmter!, i) {
      match i {
        0: f0(!fmter, v0)
        1: f1(!fmter, v1)
        2: f2(!fmter, v2)
        _: impl/fmt_fail_missing()
      }
    })
    if fmtnum <> 3 { impl/fmt_fail_too_many() }
    else { formatter/extract(ret) }
  }

  fun print4(fmtstr, f0, v0, f1, v1, f2, v2, f3, v3) {
    let fmtnum, ret = helper_printn(fmtstr, fun (fmter!, i) {
      match i {
        0: f0(!fmter, v0)
        1: f1(!fmter, v1)
        2: f2(!fmter, v2)
        3: f3(!fmter, v3)
        _: impl/fmt_fail_missing()
      }
    })
    if fmtnum <> 4 { impl/fmt_fail_too_many() }
    else { formatter/extract(ret) }
  }

  fun print5(fmtstr, f0, v0, f1, v1, f2, v2, f3, v3, f4, v4) {
    let fmtnum, ret = helper_printn(fmtstr, fun (fmter!, i) {
      match i {
        0: f0(!fmter, v0)
        1: f1(!fmter, v1)
        2: f2(!fmter, v2)
        3: f3(!fmter, v3)
        4: f4(!fmter, v4)
        _: impl/fmt_fail_missing()
      }
    })
    if fmtnum <> 5 { impl/fmt_fail_too_many() }
    else { formatter/extract(ret) }
  }

  fun print_newline() {
    endl(m/create())
  }
}

module fmt_stdout {
  type return = unit

  fun create() {
    formatter/create(
      fun(_& : unit, ptr, len) { fwrite(ptr, 1, len, stdout) }, ()
    )
  }
}

module fmt_stderr {
  type return = unit

  fun create() {
    formatter/create(
      fun(_& : unit, ptr, len) { fwrite(ptr, 1, len, stderr) }, ()
    )
  }
}

module fmt_str {
  type return = string/t

  external memcpy : (raw_ptr[u8], raw_ptr[u8], int) -> unit
  fun create() {
    formatter/create(
      fun(s&, ptr, len) {
        let arr& = string/to_array(s)
        let arrlen = array/length(arr)
        array/reserve(&arr, arrlen + len + 1)

        let dst = array/data(arr) |> __unsafe_ptr_at(arrlen)
        memcpy(dst, ptr, len)
        let size = arrlen + len
        &arr.[size] = '\000'
        &__unsafe_array_length(arr) = size

        &s = string/of_array(arr)
      },
      array/create(128) |> string/of_array
    )
  }
}

module stdout = make_printer(fmt_stdout)

-- We cannot 'export' modules yet
let print = stdout/print
let println = stdout/println
let print_newline = stdout/print_newline

let print1 = stdout/print1
let print2 = stdout/print2
let print3 = stdout/print3
let print4 = stdout/print4
let print5 = stdout/print5

module stderr = make_printer(fmt_stderr)
module str = make_printer(fmt_str)
