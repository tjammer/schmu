(def data __array_data)
(def drop-back __array_drop_back)
(def length __array_length)

(defn create (len)
  (def ret& (__unsafe_array_create len))
  (set &(__unsafe_array_length ret) !0)
  ret)

(defn push (arr& value!)
  (let ((capacity (__array_capacity arr))
        (length (length arr)))
    (if (= capacity length)
      (__unsafe_array_realloc &arr (* 2 capacity)))
    (__unsafe_ptr_set &(data arr) length !value)
    (set &(__unsafe_array_length arr) !(+ 1 length))))

(defn iter (arr f)
  (defn inner (i)
    (if (= i (length arr))
      ()
      (do
        (f arr.[i])
        (inner (+ i 1)))))
  (inner 0))

(defn iteri (arr f)
  (defn inner (i)
    (if (= i (length arr))
      ()
      (do
        (f i arr.[i])
        (inner (+ i 1)))))
  (inner 0))

(defn fold (arr f init!)
  (defn inner (i acc!)
    (if (= i (length arr))
      acc
      (let ((acc (f !acc arr.[i])))
        (inner (+ i 1) !acc))))
  (inner 0 !init))

(defn foldi (arr f init!)
  (defn inner (i acc!)
    (if (= i (length arr))
      acc
      (let ((acc (f i !acc arr.[i])))
        (inner (+ i 1) !acc))))
  (inner 0 !init))

(defn map (arr f)
  (def ret (create (length arr)))
  (defn inner (ret! i)
    (def ret& !ret)
    (if (= i (length arr))
      ret
      (do
        (push &ret !(f arr.[i]))
        (inner !ret (+ i 1)))))
  (inner !ret 0))

(defn swap-items (arr& i j)
  (if (not (= i j))
    (let ((itmp !arr.[i]))
      (set &arr.[i] !arr.[j])
      (set &arr.[j] !itmp))))

(defn clear (arr&)
  (defn inner ()
    (if (= 0 (length arr))
      ()
      (do (drop-back &arr)
          (inner))))
  (inner))

(defn reserve (arr& size)
  (if (< (__array_capacity arr) size)
   (__unsafe_array_realloc &arr size)))
