let data = __array_data
let drop_back = __array_drop_back
let length = __array_length

use prelude

fun create(len):
  let ret& = __unsafe_array_create(len)
  &__unsafe_array_length(ret) <- 0
  ret

fun push(arr&, value!):
  let capacity = __array_capacity(arr)
  let length = length(arr)

  if capacity == length:
    if capacity == 0:
      __unsafe_array_realloc(&arr, 4)
    else:
      __unsafe_array_realloc(&arr, 2 * capacity)

  __unsafe_ptr_set(&data(arr), length, !value)
  &__unsafe_array_length(arr) <- length + 1

fun iter(arr, f):
  fun inner(i):
    if i == length(arr): () else:
      f(arr.[i])
      inner(i + 1)
  inner(0)

fun iteri(arr, f):
  fun inner(i):
    if i == length(arr): () else:
      f(i, arr.[i])
      inner(i + 1)
  inner(0)

fun fold(arr, init!, f):
  fun inner(i, acc!):
    if i == length(arr): acc else:
      let acc = f(!acc, arr.[i])
      inner(i + 1, !acc)
  inner(0, !init)

fun foldi(arr, init!, f):
  fun inner(i, acc!):
    if i == length(arr): acc else:
      let acc = f(i, !acc, arr.[i])
      inner(i + 1, !acc)
  inner(0, !init)

fun map(arr, f):
  let ret = create(length(arr))
  fun inner(ret!, i):
    let ret& = !ret
    if i == length(arr): ret else:
      push(&ret, !f(arr.[i]))
      inner(!ret, i + 1)
  inner(!ret, 0)

fun swap_items(arr&, i, j):
  if not (i == j):
    let itmp = !arr.[i]
    &arr.[i] <- arr.[j]
    &arr.[j] <- itmp


fun clear(arr&):
  fun inner():
    if 0 == length(arr): () else:
      drop_back(&arr)
      inner()
  inner()

fun reserve(arr&, size):
  if __array_capacity(arr) < size:
    __unsafe_array_realloc(&arr, size)

module fixed:
  let data = __fixed_array_data
