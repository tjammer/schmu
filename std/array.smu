import iter
import option
import prelude

let data = __array_data
let length = __array_length

use prelude

fun create(len) {
  let ret& = __unsafe_array_create(len)
  &__unsafe_array_length(ret) = 0
  ret
}

fun init(len, value!) {
  let ret& = __unsafe_array_create(len)
  &__unsafe_array_length(ret) = len
  fun rec inner(i) {
    if i == len { () }
    else {
      &ret.[i] = copy(value)
      inner(i + 1)
    }
  }
  inner(0)
  ret
}

fun push(arr&, value!) {
  let capacity = __array_capacity(arr)
  let length = length(arr)

  if capacity == length {
    if capacity == 0 {
      __unsafe_array_realloc(&arr, 4)
    } else {
      __unsafe_array_realloc(&arr, 2 * capacity)
    }
  }

  __unsafe_ptr_set(&data(arr), length, !value)
  &__unsafe_array_length(arr) = length + 1
}

fun iter(arr, cont) {
  fun rec inner(i) {
    if i == length(arr) { false }
    else {
      if cont(arr.[i]) { inner(i + 1) }
      else { false }
    }
  }
  inner(0)
}

fun map(arr, f) {
  let ret = create(length(arr))
  fun rec inner(ret!, i) {
    let ret& = !ret
    if i == length(arr) {
      ret
    } else {
      push(&ret, !f(arr.[i]))
      inner(!ret, i + 1)
    }
  }

  inner(!ret, 0)
}

fun map_inplace(arr&, f) {
  fun rec inner(i) {
    if i == length(arr) {
      ()
    } else {
      f(&arr.[i])
      inner(i + 1)
    }
  }

  inner(0)
}

fun pop_back(arr&) {
  use option
  if length(arr) == 0 {
    None
  }
  else {
    Some(__unsafe_array_pop_back(&arr))
  }
}

fun swap_items(arr&, i, j) {
  if not (i == j) {
    let itmp = !arr.[i]
    &arr.[i] = arr.[j]
    &arr.[j] = itmp
  }
}

fun clear(arr&) {
  fun rec inner() {
    if 0 == length(arr) {
      ()
    } else {
      pop_back(&arr) |> ignore
      inner()
    }
  }

  inner()
}

fun reserve(arr&, size) {
  fun rec aux(newcap) {
    if newcap < size { aux(2 * newcap) }
    else { __unsafe_array_realloc(&arr, newcap) }
  }
  let cap = __array_capacity(arr)
  if cap < size { aux(cap * 2) }
}

fun reverse(arr&) {
  let length = length(arr)
  iter_range(0, length / 2, fun i {
    swap_items(&arr, i, length - i - 1)
  })
}

fun empty(arr): length(arr) == 0

module fixed {
  let get = __fixed_array_get
  let length = __fixed_array_length
  let data = __fixed_array_data

  fun swap_items(arr&, i, j) {
    if not (i == j) {
      let itmp = !arr#[i]
      &arr#[i] = arr#[j]
      &arr#[j] = itmp
    }
  }

  fun reverse(arr&) {
    let length = length(arr)
    iter_range(0, length / 2, fun i {
      swap_items(&arr, i, length - i - 1)
    })
  }

}
