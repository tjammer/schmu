(type (ptr 'a) { :ptr (raw_ptr 'a) :length int })

(type (owned_ptr 'a) { :optr& (raw_ptr 'a) :length& int })

-- string
(type cstr (raw_ptr u8))

(type string (array u8))

(external puts (fun cstr unit))

(fun print [str] (puts (array-data str)))

(fun string-len [str] (array-length str))

-- array
(fun array-iter [arr f]
  (fun inner [i]
    (if (= i (array-length arr))
      ()
      (do
        (f (array-get arr i))
        (inner (+ i 1)))))
  (inner 0))

(fun array-iteri [arr f]
  (fun inner [i]
    (if (= i (array-length arr))
      ()
      (do
        (f i (array-get arr i))
        (inner (+ i 1)))))
  (inner 0))

(fun array-foldi [arr f init]
  (fun inner [i acc&]
    (if (= i (array-length arr))
      acc
      (do
        (set &acc (f i acc (array-get arr i)))
        (inner (+ i 1) &acc))))
  (val acc& init)
  (inner 0 &acc))

-- option
(type (option 'a) ((#some 'a) #none))
