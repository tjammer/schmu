type ptr('a) = { ptr : raw_ptr('a), length : int }
type owned_ptr('a) = { mutable optr : raw_ptr('a), mutable length : int }
type cstr = raw_ptr(u8)
type string = { cstr : cstr, length : int }

type vector('a) = {
  ptr : owned_ptr('a),
  mutable capacity : int
}

-- vector functions
fun vector_init(capacity) =
  -- __malloc is a builtin, the compiler will free once the ptr
  -- drops out of scope.
  val optr = __malloc(capacity)
  { ptr = { optr, length = 0 }, capacity }

fun vector_push(vec, v) =
  if vec.ptr.length = vec.capacity then
    val cap = vec.capacity * 2
    vec.ptr.optr <- __realloc(vec.ptr.optr, cap)
    vec.capacity <- cap
  __unsafe_ptr_set(vec.ptr.optr, vec.ptr.length, v)
  vec.ptr.length <- vec.ptr.length + 1

fun vector_iter(vec, f) =
  fun inner(i) =
    if i = vec.ptr.length then
      ()
    else
      f(__unsafe_ptr_get(vec.ptr.optr, i))
      inner(i+1)

  inner(0)

fun vector_fold(vec, f, init) =
  fun inner(i, acc) =
    if i = vec.ptr.length then
      acc
    else
      val acc = f(acc, __unsafe_ptr_get(vec.ptr.optr, i))
      inner(i+1, acc)

  inner(0, init)

type option('a) = Some('a) | None
