(record (ptr 'a) { :ptr (raw_ptr 'a) :length int })

(record (owned_ptr 'a) { :optr (mutable (raw_ptr 'a)) :length (mutable int) })

(alias cstr (raw_ptr u8))

(record string { :cstr cstr :length int })

(record (vector 'a) {:ptr (owned_ptr 'a) :capacity (mutable int)})

-- vector functions
(fun vector_init [capacity]
  (val optr (__malloc capacity))
  {:ptr {:optr :length 0} :capacity})

(fun vector_push [vec v]
  (if (= (.length (.ptr vec)) (.capacity vec))
    (do
      (val cap (* (.capacity vec) 2))
      (setf (.optr (.ptr vec)) (__realloc (.optr (.ptr vec)) cap))
      (setf (.capacity vec) cap)))
      (__unsafe_ptr_set (.optr (.ptr vec)) (.length (.ptr vec)) v)
      (setf (.length (.ptr vec)) (+ (.length (.ptr vec)) 1)))

(fun vector_iter [vec f]
  (fun inner [i]
    (if (= i (.length (.ptr vec)))
      ()
      (do
      (f (__unsafe_ptr_get (.optr (.ptr vec)) i))
        (inner (+ i 1)))))
  (inner 0))

(fun vector_fold [vec f init]
  (fun inner [i acc]
    (if (= i (.length (.ptr vec)))
      acc
      (do
        (val acc (f acc (__unsafe_ptr_get (.optr (.ptr vec)) i)))
        (inner (+ i 1) acc))))
  (inner 0 init))

(variant (option 'a) ((#some 'a) #none))

-- (external puts (fun cstr unit))

-- (fun print [str] (puts (.cstr str)))
