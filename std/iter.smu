import prelude

signature {
  type continue = bool
  type consumer['a] = fun ('a) -> continue
  type t['a] = fun (consumer['a]) -> continue

  -- creators
  val range : fun (int, int, consumer[int]) -> continue

  -- manipulators
  val map : fun (t['a], fun ('a) -> 'b, consumer['b]) -> continue
  val filter : fun (t['a], fun ('a) -> bool, consumer['a]) -> continue
  val take : fun (t['a], int, consumer['b]) -> continue

  -- consumers
  val iter : fun (t['a], fun ('a) -> unit) -> unit
  val iteri : fun (t['a], fun (int, 'a) -> unit) -> unit
  val fold : fun (t['a], mov 'b, fun (mov 'b, 'a) -> 'b) -> 'b
  val foldi : fun (t['a], mov 'b, fun (int, mov 'b, 'a) -> 'b) -> 'b
}

use prelude

-- iter creators
fun range(from, to, cont) {
  fun rec inner(i) {
    if i == to { false }
    else {
      if cont(i) { inner(i + 1) }
      else { false }
    }
  }
  inner(from)
}

-- iter manipulators
fun map(it : t['a], f, cont : consumer['b]){
  it(fun x { cont(f(x)) })
}

fun filter(it : t['a], f, cont){
  it(fun x {
    if f(x) { cont(x) }
    else { true }
  })
}

fun take(it : t['a], stop, cont) {
  let mut curr = 0
  it(fun x {
    if curr == stop { false }
    else {
      if cont(x) {
        mut curr = curr + 1
        true
      }
      else { false }
    }
  })
}

-- iter consumers
fun fold(it : t['a], mov init, f) {
  let mut r = mov init
  it(fun x {
    mut r = f(mov r, x)
    true
  }) |> ignore
  r
}

fun foldi(it : t['a], mov init, f) {
  let mut r = mov init
  let mut i = 0
  it(fun x {
    mut r = f(i, mov r, x)
    mut i = i + 1
    true
  }) |> ignore
  r
}

fun iter(it : t['a], f) {
  it(fun x {
    f(x)
    true
  }) |> ignore
}

fun iteri(it : t['a], f) {
  let mut i = 0
  it(fun x {
    f(i, x)
    mut i = i + 1
    true
  }) |> ignore
}
